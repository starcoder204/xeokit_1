[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/BIMViewer.js",
    "content": "import {Controller} from \"./Controller.js\";\r\nimport {BusyModal} from \"./BusyModal.js\";\r\nimport {ResetAction} from \"./toolbar/ResetAction.js\";\r\nimport {FitAction} from \"./toolbar/FitAction.js\";\r\nimport {FirstPersonMode} from \"./toolbar/FirstPersonMode.js\";\r\nimport {HideTool} from \"./toolbar/HideTool.js\";\r\nimport {SelectionTool} from \"./toolbar/SelectionTool.js\";\r\nimport {QueryTool} from \"./toolbar/QueryTool.js\";\r\nimport {SectionTool} from \"./toolbar/SectionTool.js\";\r\nimport {NavCubeMode} from \"./toolbar/NavCubeMode.js\";\r\n\r\nimport {ModelsExplorer} from \"./explorer/ModelsExplorer.js\";\r\nimport {ObjectsExplorer} from \"./explorer/ObjectsExplorer.js\";\r\nimport {ClassesExplorer} from \"./explorer/ClassesExplorer.js\";\r\nimport {StoreysExplorer} from \"./explorer/StoreysExplorer.js\";\r\n\r\nimport {Viewer} from \"@xeokit/xeokit-sdk/src/viewer/Viewer.js\";\r\nimport {AmbientLight} from \"@xeokit/xeokit-sdk/src/viewer/scene/lights/AmbientLight.js\";\r\nimport {DirLight} from \"@xeokit/xeokit-sdk/src/viewer/scene/lights/DirLight.js\";\r\nimport {BCFViewpointsPlugin} from \"@xeokit/xeokit-sdk/src/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js\";\r\nimport {ThreeDMode} from \"./toolbar/ThreeDMode.js\";\r\nimport {ObjectContextMenu} from \"./contextMenus/ObjectContextMenu.js\";\r\nimport {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\r\nimport {CanvasContextMenu} from \"./contextMenus/CanvasContextMenu.js\";\r\n\r\nconst explorerTemplate = `<div class=\"xeokit-tabs\">\r\n    <div class=\"xeokit-tab xeokit-modelsTab\">\r\n        <a class=\"xeokit-tab-btn\" href=\"#\">Models</a>\r\n        <div class=\"xeokit-tab-content\">\r\n            <div class=\"xeokit-btn-group\">\r\n                <button type=\"button\" class=\"xeokit-unloadAllModels xeokit-btn disabled\" data-tippy-content=\"Unload all models\">Unload all</button>\r\n            </div>\r\n            <div class=\"xeokit-models\" ></div>\r\n        </div>\r\n    </div>\r\n    <div class=\"xeokit-tab xeokit-objectsTab\">\r\n        <a class=\"xeokit-tab-btn disabled\" href=\"#\">Objects</a>\r\n        <div class=\"xeokit-tab-content\">\r\n         <div class=\"xeokit-btn-group\">\r\n            <button type=\"button\" class=\"xeokit-showAllObjects xeokit-btn disabled\" data-tippy-content=\"Show all objects\">Show all</button>\r\n            <button type=\"button\" class=\"xeokit-hideAllObjects xeokit-btn disabled\" data-tippy-content=\"Hide all objects\">Hide all</button>\r\n        </div>\r\n        <div class=\"xeokit-objects xeokit-tree-panel\" ></div>\r\n        </div>\r\n    </div>\r\n    <div class=\"xeokit-tab xeokit-classesTab\">\r\n        <a class=\"xeokit-tab-btn disabled\" href=\"#\">Classes</a>\r\n        <div class=\"xeokit-tab-content\">\r\n            <div class=\"xeokit-btn-group\">\r\n                <button type=\"button\" class=\"xeokit-showAllClasses xeokit-btn disabled\" data-tippy-content=\"Show all classes\">Show all</button>\r\n                <button type=\"button\" class=\"xeokit-hideAllClasses xeokit-btn disabled\" data-tippy-content=\"Hide all classes\">Hide all</button>\r\n            </div>\r\n            <div class=\"xeokit-classes xeokit-tree-panel\" ></div>\r\n        </div>\r\n    </div>\r\n     <div class=\"xeokit-tab xeokit-storeysTab\">\r\n        <a class=\"xeokit-tab-btn disabled\" href=\"#\">Storeys</a>\r\n        <div class=\"xeokit-tab-content\">\r\n         <div class=\"xeokit-btn-group\">\r\n                <button type=\"button\" class=\"xeokit-showAllStoreys xeokit-btn disabled\" data-tippy-content=\"Show all storeys\">Show all</button>\r\n                <button type=\"button\" class=\"xeokit-hideAllStoreys xeokit-btn disabled\" data-tippy-content=\"Hide all storeys\">Hide all</button>\r\n            </div>\r\n             <div class=\"xeokit-storeys xeokit-tree-panel\"></div>\r\n        </div>\r\n    </div>\r\n</div>`;\r\n\r\nconst toolbarTemplate = `<div class=\"xeokit-toolbar\">\r\n    <!-- Reset button -->\r\n    <div class=\"xeokit-btn-group\">\r\n        <button type=\"button\" class=\"xeokit-reset xeokit-btn fa fa-home fa-2x disabled\" data-tippy-content=\"Reset view\"></button>\r\n    </div>\r\n    <!-- 3D Mode button -->\r\n    <div class=\"xeokit-btn-group\" role=\"group\">\r\n        <button type=\"button\" class=\"xeokit-threeD xeokit-btn fa fa-cube fa-2x\" data-tippy-content=\"Toggle 2D/3D\"></button>\r\n    </div>\r\n    <!-- Fit button -->\r\n    <div class=\"xeokit-btn-group\" role=\"group\">\r\n        <button type=\"button\" class=\"xeokit-fit xeokit-btn fa fa-crop fa-2x disabled\" data-tippy-content=\"View fit\"></button>\r\n    </div>\r\n    <!-- First Person mode button -->\r\n    <div class=\"xeokit-btn-group\" role=\"group\">\r\n        <button type=\"button\" class=\"xeokit-firstPerson xeokit-btn fa fa-male fa-2x disabled\" data-tippy-content=\"First person\"></button>\r\n    </div>\r\n    <!-- Tools button group -->\r\n    <div class=\"xeokit-btn-group\" role=\"group\">\r\n        <!-- Hide tool button -->\r\n        <button type=\"button\" class=\"xeokit-hide xeokit-btn fa fa-eraser fa-2x disabled\" data-tippy-content=\"Hide objects\"></button>\r\n        <!-- Select tool button -->\r\n        <button type=\"button\" class=\"xeokit-select xeokit-btn fa fa-mouse-pointer fa-2x disabled\" data-tippy-content=\"Select objects\"></button>\r\n        <!-- Query tool button -->\r\n        <button type=\"button\" class=\"xeokit-query xeokit-btn fa fa-info-circle fa-2x disabled\" data-tippy-content=\"Query objects\"></button>\r\n        <!-- Slice tool button -->\r\n        <button type=\"button\" class=\"xeokit-section xeokit-btn fa fa-cut fa-2x disabled\" data-tippy-content=\"Slice objects\"></button>\r\n    </div>\r\n</div>`;\r\n\r\nfunction initTabs(containerElement) {\r\n\r\n    const tabsClass = 'xeokit-tabs';\r\n    const tabClass = 'xeokit-tab';\r\n    const tabButtonClass = 'xeokit-tab-btn';\r\n    const activeClass = 'active';\r\n\r\n    // Activates the chosen tab and deactivates the rest\r\n    function activateTab(chosenTabElement) {\r\n        let tabList = chosenTabElement.parentNode.querySelectorAll('.' + tabClass);\r\n        for (let i = 0; i < tabList.length; i++) {\r\n            let tabElement = tabList[i];\r\n            if (tabElement.isEqualNode(chosenTabElement)) {\r\n                tabElement.classList.add(activeClass)\r\n            } else {\r\n                tabElement.classList.remove(activeClass)\r\n            }\r\n        }\r\n    }\r\n\r\n    // Initialize each tabbed container\r\n    let tabbedContainers = containerElement.querySelectorAll('.' + tabsClass);\r\n    for (let i = 0; i < tabbedContainers.length; i++) {\r\n        let tabbedContainer = tabbedContainers[i];\r\n        let tabList = tabbedContainer.querySelectorAll('.' + tabClass);\r\n        activateTab(tabList[0]);\r\n        for (let i = 0; i < tabList.length; i++) {\r\n            let tabElement = tabList[i];\r\n            let tabButton = tabElement.querySelector('.' + tabButtonClass);\r\n            tabButton.addEventListener('click', function (event) {\r\n                event.preventDefault();\r\n                if (this.classList.contains(\"disabled\")) {\r\n                    return;\r\n                }\r\n                activateTab(event.target.parentNode);\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @desc A BIM viewer based on the [xeokit SDK](http://xeokit.io).\r\n *\r\n\r\n *\r\n */\r\nclass BIMViewer extends Controller {\r\n\r\n    /**\r\n     * Constructs a BIMViewer.\r\n     * @param {Server} server Data access strategy.\r\n     * @param {*} cfg Configuration.\r\n     */\r\n    constructor(server, cfg = {}) {\r\n\r\n        if (!cfg.canvasElement) {\r\n            throw \"Config expected: canvasElement\";\r\n        }\r\n\r\n        if (!cfg.explorerElement) {\r\n            throw \"Config expected: explorerElement\";\r\n        }\r\n\r\n        if (!cfg.toolbarElement) {\r\n            throw \"Config expected: toolbarElement\";\r\n        }\r\n\r\n        if (!cfg.navCubeCanvasElement) {\r\n            throw \"Config expected: navCubeCanvasElement\";\r\n        }\r\n\r\n        const canvasElement = cfg.canvasElement;\r\n        const explorerElement = cfg.explorerElement;\r\n        const toolbarElement = cfg.toolbarElement;\r\n        const navCubeCanvasElement = cfg.navCubeCanvasElement;\r\n        const queryInfoPanelElement = cfg.queryInfoPanelElement;\r\n        const busyModelBackdropElement = cfg.busyModelBackdropElement;\r\n\r\n        explorerElement.oncontextmenu = (e) => {\r\n            e.preventDefault();\r\n        };\r\n\r\n        toolbarElement.oncontextmenu = (e) => {\r\n            e.preventDefault();\r\n        };\r\n\r\n        navCubeCanvasElement.oncontextmenu = (e) => {\r\n            e.preventDefault();\r\n        };\r\n\r\n        const viewer = new Viewer({\r\n            canvasElement: canvasElement,\r\n            transparent: true\r\n        });\r\n\r\n        super(null, cfg, server, viewer);\r\n\r\n        this._configs = {};\r\n\r\n        /**\r\n         * The xeokit [Viewer](https://xeokit.github.io/xeokit-sdk/docs/class/src/viewer/Viewer.js~Viewer.html) at the core of this BIMViewer.\r\n         *\r\n         * @type {Viewer}\r\n         */\r\n        this.viewer = viewer;\r\n\r\n        this._customizeViewer();\r\n        this._initCanvasContextMenus();\r\n        this._initConfigs();\r\n\r\n        explorerElement.innerHTML = explorerTemplate;\r\n        toolbarElement.innerHTML = toolbarTemplate;\r\n\r\n        this._explorerElement = explorerElement;\r\n\r\n        initTabs(explorerElement);\r\n\r\n        this._modelsExplorer = new ModelsExplorer(this, {\r\n            modelsTabElement: explorerElement.querySelector(\".xeokit-modelsTab\"),\r\n            unloadModelsButtonElement: explorerElement.querySelector(\".xeokit-unloadAllModels\"),\r\n            modelsElement: explorerElement.querySelector(\".xeokit-models\")\r\n        });\r\n\r\n        this._objectsExplorer = new ObjectsExplorer(this, {\r\n            objectsTabElement: explorerElement.querySelector(\".xeokit-objectsTab\"),\r\n            showAllObjectsButtonElement: explorerElement.querySelector(\".xeokit-showAllObjects\"),\r\n            hideAllObjectsButtonElement: explorerElement.querySelector(\".xeokit-hideAllObjects\"),\r\n            objectsElement: explorerElement.querySelector(\".xeokit-objects\")\r\n        });\r\n\r\n        this._classesExplorer = new ClassesExplorer(this, {\r\n            classesTabElement: explorerElement.querySelector(\".xeokit-classesTab\"),\r\n            showAllClassesButtonElement: explorerElement.querySelector(\".xeokit-showAllClasses\"),\r\n            hideAllClassesButtonElement: explorerElement.querySelector(\".xeokit-hideAllClasses\"),\r\n            classesElement: explorerElement.querySelector(\".xeokit-classes\")\r\n        });\r\n\r\n        this._storeysExplorer = new StoreysExplorer(this, {\r\n            storeysTabElement: explorerElement.querySelector(\".xeokit-storeysTab\"),\r\n            showAllStoreysButtonElement: explorerElement.querySelector(\".xeokit-showAllStoreys\"),\r\n            hideAllStoreysButtonElement: explorerElement.querySelector(\".xeokit-hideAllStoreys\"),\r\n            storeysElement: explorerElement.querySelector(\".xeokit-storeys\")\r\n        });\r\n\r\n        this._resetAction = new ResetAction(this, {\r\n            buttonElement: toolbarElement.querySelector(\".xeokit-reset\"),\r\n            active: false\r\n        });\r\n\r\n        this._fitAction = new FitAction(this, {\r\n            buttonElement: toolbarElement.querySelector(\".xeokit-fit\"),\r\n            active: false\r\n        });\r\n\r\n        this._threeDMode = new ThreeDMode(this, {\r\n            buttonElement: toolbarElement.querySelector(\".xeokit-threeD\"),\r\n            active: false\r\n        });\r\n\r\n        this._firstPersonMode = new FirstPersonMode(this, {\r\n            buttonElement: toolbarElement.querySelector(\".xeokit-firstPerson\"),\r\n            active: false\r\n        });\r\n\r\n        this._hideTool = new HideTool(this, {\r\n            buttonElement: toolbarElement.querySelector(\".xeokit-hide\"),\r\n            active: false\r\n        });\r\n\r\n        this._selectionTool = new SelectionTool(this, {\r\n            buttonElement: toolbarElement.querySelector(\".xeokit-select\"),\r\n            active: false\r\n        });\r\n\r\n        this._queryTool = new QueryTool(this, {\r\n            buttonElement: toolbarElement.querySelector(\".xeokit-query\"),\r\n            queryInfoPanelElement: queryInfoPanelElement,\r\n            active: false\r\n        });\r\n\r\n        this._sectionTool = new SectionTool(this, {\r\n            buttonElement: toolbarElement.querySelector(\".xeokit-section\"),\r\n            active: false\r\n        });\r\n\r\n        this._navCubeMode = new NavCubeMode(this, {\r\n            navCubeCanvasElement: navCubeCanvasElement,\r\n            active: true\r\n        });\r\n\r\n        this._busyModal = new BusyModal(this, {\r\n            busyModalBackdropElement: busyModelBackdropElement\r\n        });\r\n\r\n        this._threeDMode.setActive(true);\r\n        this._firstPersonMode.setActive(false);\r\n        this._navCubeMode.setActive(true);\r\n\r\n        this._modelsExplorer.on(\"modelLoaded\", (modelId) => {\r\n            if (this._modelsExplorer.getNumModelsLoaded() === 1) {\r\n                this.setControlsEnabled(true);\r\n            }\r\n            this.fire(\"modelLoaded\", modelId);\r\n        });\r\n\r\n        this._modelsExplorer.on(\"modelUnloaded\", (modelId) => {\r\n            if (this._modelsExplorer.getNumModelsLoaded() === 0) {\r\n                this.setControlsEnabled(false);\r\n                this.openTab(\"models\");\r\n            }\r\n            this.fire(\"modelUnloaded\", modelId);\r\n        });\r\n\r\n        this._queryTool.on(\"queryPicked\", (event) => {\r\n            this.fire(\"queryPicked\", event);\r\n        });\r\n\r\n        this._queryTool.on(\"queryNotPicked\", () => {\r\n            this.fire(\"queryNotPicked\", true);\r\n        });\r\n\r\n        this._resetAction.on(\"reset\", () => {\r\n            this.fire(\"reset\", true);\r\n        });\r\n\r\n        this._mutexActivation([this._queryTool, this._hideTool, this._selectionTool, this._sectionTool]);\r\n\r\n        explorerElement.querySelector(\".xeokit-showAllObjects\").addEventListener(\"click\", (event) => {\r\n            this.setAllObjectsVisible(true);\r\n            this.setAllObjectsXRayed(false);\r\n            event.preventDefault();\r\n        });\r\n\r\n        explorerElement.querySelector(\".xeokit-hideAllObjects\").addEventListener(\"click\", (event) => {\r\n            this.setAllObjectsVisible(false);\r\n            event.preventDefault();\r\n        });\r\n\r\n        explorerElement.querySelector(\".xeokit-showAllClasses\").addEventListener(\"click\", (event) => {\r\n            this.setAllObjectsVisible(true);\r\n            this.setAllObjectsXRayed(false);\r\n            event.preventDefault();\r\n        });\r\n\r\n        explorerElement.querySelector(\".xeokit-hideAllClasses\").addEventListener(\"click\", (event) => {\r\n            this.setAllObjectsVisible(false);\r\n            event.preventDefault();\r\n        });\r\n\r\n        explorerElement.querySelector(\".xeokit-showAllStoreys\").addEventListener(\"click\", (event) => {\r\n            this.setAllObjectsVisible(true);\r\n            this.setAllObjectsXRayed(false);\r\n            event.preventDefault();\r\n        });\r\n\r\n        explorerElement.querySelector(\".xeokit-hideAllStoreys\").addEventListener(\"click\", (event) => {\r\n            this.setAllObjectsVisible(false);\r\n            event.preventDefault();\r\n        });\r\n\r\n        explorerElement.querySelector(\".xeokit-unloadAllModels\").addEventListener(\"click\", (event) => {\r\n            this.setControlsEnabled(false); // For quick UI feedback\r\n            this._modelsExplorer.unloadAllModels();\r\n            event.preventDefault();\r\n        });\r\n\r\n        this._bcfViewpointsPlugin = new BCFViewpointsPlugin(this.viewer, {});\r\n    }\r\n\r\n    _customizeViewer() {\r\n\r\n        const scene = this.viewer.scene;\r\n\r\n        scene.xrayMaterial.fill = false;\r\n        scene.xrayMaterial.fillAlpha = 0.1;\r\n        scene.xrayMaterial.fillColor = [0, 0, 0];\r\n        scene.xrayMaterial.edges = true;\r\n        scene.xrayMaterial.edgeAlpha = 0.3;\r\n        scene.xrayMaterial.edgeColor = [0, 0, 0];\r\n\r\n        scene.highlightMaterial.edges = true;\r\n        scene.highlightMaterial.edgeColor = [.5, .5, 0];\r\n        scene.highlightMaterial.edgeAlpha = 0.9;\r\n        scene.highlightMaterial.fill = true;\r\n        scene.highlightMaterial.fillAlpha = 0.1;\r\n        scene.highlightMaterial.fillColor = [1, 0, 0];\r\n\r\n        scene.clearLights();\r\n\r\n        new AmbientLight(scene, {\r\n            color: [0.3, 0.3, 0.3],\r\n            intensity: 1.0\r\n        });\r\n\r\n        new DirLight(scene, {\r\n            dir: [0.8, -0.6, -0.8],\r\n            color: [1.0, 1.0, 1.0],\r\n            intensity: 1.0,\r\n            space: \"world\"\r\n        });\r\n\r\n        new DirLight(scene, {\r\n            dir: [-0.8, -0.4, 0.4],\r\n            color: [1.0, 1.0, 1.0],\r\n            intensity: 1.0,\r\n            space: \"world\"\r\n        });\r\n\r\n        new DirLight(scene, {\r\n            dir: [0.2, -0.8, 0.8],\r\n            color: [0.6, 0.6, 0.6],\r\n            intensity: 1.0,\r\n            space: \"world\"\r\n        });\r\n\r\n        this.viewer.cameraControl.panRightClick = true;\r\n        this.viewer.cameraControl.panToPointer = true;\r\n        this.viewer.cameraControl.doublePickFlyTo = true;\r\n\r\n        // Scalable Ambient Obscurance (SAO) defaults\r\n\r\n        scene.camera.perspective.near = 0.05;\r\n        scene.camera.perspective.far = 3000.0;\r\n        scene.camera.ortho.near = 0.05;\r\n        scene.camera.ortho.far = 3000.0;\r\n\r\n        const sao = scene.sao;\r\n        sao.enabled = false;\r\n        sao.bias = 0.5;\r\n        sao.intensity = 0.5;\r\n        sao.scale = 1200.0;\r\n        sao.kernelRadius = 100;\r\n\r\n        // Only enable SAO and normal edge emphasis while camera is not moving\r\n\r\n        const timeoutDuration = 200;\r\n        var timer = timeoutDuration;\r\n        var saoEnabled = false;\r\n\r\n        const onCameraMatrix = scene.camera.on(\"matrix\", () => {\r\n            if (this._configs.saoInteractive) {\r\n                return;\r\n            }\r\n            const saoInteractiveDelay = this._configs.saoInteractiveDelay;\r\n            timer = ((saoInteractiveDelay !== null && saoInteractiveDelay !== undefined) ? this._configs.saoInteractiveDelay : 200);\r\n            if (saoEnabled) {\r\n                scene.sao.enabled = false;\r\n                saoEnabled = false;\r\n            }\r\n        });\r\n\r\n        const onSceneTick = scene.on(\"tick\", (e) => {\r\n            if (this._configs.saoInteractive) {\r\n                if (!saoEnabled) {\r\n                    scene.sao.enabled = (!!this._configs.saoEnabled);\r\n                    saoEnabled = true;\r\n                }\r\n                return;\r\n            }\r\n            if (saoEnabled) {\r\n                return;\r\n            }\r\n            timer -= e.deltaTime;\r\n            if (timer <= 0) {\r\n                if (!saoEnabled) {\r\n                    scene.sao.enabled = (!!this._configs.saoEnabled);\r\n                    saoEnabled = true;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    _initCanvasContextMenus() {\r\n\r\n        this._canvasContextMenu = new CanvasContextMenu();\r\n        this._objectContextMenu = new ObjectContextMenu();\r\n\r\n        this.viewer.cameraControl.on(\"rightClick\", (e) => {\r\n\r\n            const event = e.event;\r\n\r\n            const hit = this.viewer.scene.pick({\r\n                canvasPos: [event.offsetX, event.offsetY]\r\n            });\r\n\r\n            if (hit && hit.entity.isObject) {\r\n                this._canvasContextMenu.hide();\r\n                this._objectContextMenu.context = {\r\n                    viewer: this.viewer,\r\n                    bimViewer: this,\r\n                    showObjectInExplorers: (objectId) => {\r\n                        const openTabId = this.getOpenTab();\r\n                        if (openTabId !== \"objects\" && openTabId !== \"classes\" && openTabId !== \"storeys\") {\r\n                            // Scroll won't work if tab not open\r\n                            this.openTab(\"objects\");\r\n                        }\r\n                        this.showObjectInExplorers(objectId);\r\n                    },\r\n                    entity: hit.entity\r\n                };\r\n                this._objectContextMenu.show(event.pageX, event.pageY);\r\n            } else {\r\n                this._objectContextMenu.hide();\r\n                this._canvasContextMenu.context = {\r\n                    viewer: this.viewer,\r\n                    bimViewer: this\r\n                };\r\n                this._canvasContextMenu.show(event.pageX, event.pageY);\r\n            }\r\n        });\r\n    }\r\n\r\n    _initConfigs() {\r\n        this.setConfigs({\r\n            \"cameraNear\": \"0.05\",\r\n            \"cameraFar\": \"3000.0\",\r\n            \"saoEnabled\": \"false\",\r\n            \"saoBias\": \"0.5\",\r\n            \"saoIntensity\": \"0.5\",\r\n            \"saoScale\": \"1200.0\",\r\n            \"saoKernelRadius\": \"100\",\r\n            \"xrayContext\": true,\r\n            \"backgroundColor\": [1.0, 1.0, 1.0],\r\n            \"saoInteractive\": true,\r\n            \"saoInteractiveDelay\": 200,\r\n            \"objectColorSource\": \"model\"\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets a batch of viewer configurations.\r\n     *\r\n     * Note that this method is not to be confused with {@link BIMViewer#setViewerState}, which batch-updates various states of the viewer's UI and 3D view.\r\n     *\r\n     * See [Viewer Configurations](https://xeokit.github.io/xeokit-bim-viewer/docs/#viewer-configurations) for the list of available configurations.\r\n     *\r\n     * @param {*} viewerConfigs Map of key-value configuration pairs.\r\n     */\r\n    setConfigs(viewerConfigs) {\r\n        for (let name in viewerConfigs) {\r\n            if (viewerConfigs.hasOwnProperty(name)) {\r\n                const value = viewerConfigs[name];\r\n                this.setConfig(name, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a viewer configuration.\r\n     *\r\n     * See [Viewer Configurations](https://xeokit.github.io/xeokit-bim-viewer/docs/#viewer-configurations) for the list of available configurations.\r\n     *\r\n     * @param {String} name Configuration name.\r\n     * @param {*} value Configuration value.\r\n     */\r\n    setConfig(name, value) {\r\n\r\n        function parseBool(value) {\r\n            return ((value === true) || (value === \"true\"));\r\n        }\r\n\r\n        try {\r\n            switch (name) {\r\n\r\n                case \"backgroundColor\":\r\n                    const rgbColor = value;\r\n                    this.setBackgroundColor(rgbColor);\r\n                    this._configs[name] = rgbColor;\r\n                    break;\r\n\r\n                case \"cameraNear\":\r\n                    const near = parseFloat(value);\r\n                    this.viewer.scene.camera.perspective.near = near;\r\n                    this.viewer.scene.camera.ortho.near = near;\r\n                    this._configs[name] = near;\r\n                    break;\r\n\r\n                case \"cameraFar\":\r\n                    const far = parseFloat(value);\r\n                    this.viewer.scene.camera.perspective.far = far;\r\n                    this.viewer.scene.camera.ortho.far = far;\r\n                    this._configs[name] = far;\r\n                    break;\r\n\r\n                case \"saoEnabled\":\r\n                    this.viewer.scene.sao.enabled = this._configs[name] = parseBool(value);\r\n                    break;\r\n\r\n                case \"saoBias\":\r\n                    this.viewer.scene.sao.bias = parseFloat(value);\r\n                    break;\r\n\r\n                case \"saoIntensity\":\r\n                    this.viewer.scene.sao.intensity = parseFloat(value);\r\n                    break;\r\n\r\n                case \"saoScale\":\r\n                    this.viewer.scene.sao.scale = this._configs[name] = parseFloat(value);\r\n                    break;\r\n\r\n                case \"saoKernelRadius\":\r\n                    this.viewer.scene.sao.kernelRadius = this._configs[name] = parseFloat(value);\r\n                    break;\r\n\r\n                case \"saoBlur\":\r\n                    this.viewer.scene.sao.blur = this._configs[name] = parseBool(value);\r\n                    break;\r\n\r\n                case \"viewFitFOV\":\r\n                    this.viewer.cameraFlight.fitFOV = this._configs[name] = parseFloat(value);\r\n                    break;\r\n\r\n                case \"viewFitDuration\":\r\n                    this.viewer.cameraFlight.duration = this._configs[name] = parseFloat(value);\r\n                    break;\r\n\r\n                case \"perspectiveFOV\":\r\n                    this.viewer.camera.perspective.fov = this._configs[name] = parseFloat(value);\r\n                    break;\r\n\r\n                case \"excludeUnclassifiedObjects\":\r\n                    this._configs[name] = parseBool(value);\r\n                    break;\r\n\r\n                case \"objectColorSource\":\r\n                    this.setObjectColorSource(value);\r\n                    this._configs[name] = value;\r\n                    break;\r\n\r\n                case \"xrayContext\":\r\n                    this._configs[name] = value;\r\n                    break;\r\n\r\n                case \"saoInteractive\":\r\n                    this._configs[\"saoInteractive\"] = parseBool(value);\r\n                    break;\r\n\r\n                case \"saoInteractiveDelay\":\r\n                    var saoInteractiveDelay = parseFloat(value);\r\n                    if (saoInteractiveDelay < 0) {\r\n                        this.error(\"setConfig() - saoInteractiveDelay cannot be less than zero - clamping to zero\");\r\n                        saoInteractiveDelay = 0;\r\n                    }\r\n                    this._configs[\"saoInteractiveDelay\"] = parseFloat(value);\r\n                    break;\r\n\r\n\r\n                default:\r\n                    this.error(\"setConfig() - unsupported configuration: '\" + name + \"'\");\r\n            }\r\n\r\n        } catch (e) {\r\n            this.error(\"setConfig() - failed to configure '\" + name + \"': \" + e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the value of a viewer configuration.\r\n     *\r\n     * These are set with {@link BIMViewer#setConfig} and {@link BIMViewer#setConfigs}.\r\n     *\r\n     * @param {String} name Configuration name.\r\n     * @ereturns {*} Configuration value.\r\n     */\r\n    getConfig(name) {\r\n        return this._configs[name];\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------\r\n    // Content querying methods\r\n    //------------------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets information on all available projects.\r\n     *\r\n     * See [Getting Info on Available Projects](https://xeokit.github.io/xeokit-bim-viewer/docs/#getting-info-on-available-projects) for usage.\r\n     *\r\n     * @param {Function} done Callback invoked on success, into which the projects information JSON is passed.\r\n     * @param {Function} error Callback invoked on failure, into which the error message string is passed.\r\n     */\r\n    getProjectsInfo(done, error) {\r\n        if (!done) {\r\n            this.error(\"getProjectsInfo() - Argument expected: 'done'\");\r\n            return;\r\n        }\r\n        this.server.getProjects(done, (errorMsg) => {\r\n            this.error(\"getProjectsInfo() - \" + errorMsg);\r\n            if (error) {\r\n                error(errorMsg);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets information on the given project.\r\n     *\r\n     * See [Getting Info on a Project](https://xeokit.github.io/xeokit-bim-viewer/docs/#getting-info-on-a-project) for usage.\r\n     *\r\n     * @param {String} projectId ID of the project to get information on. Must be the ID of one of the projects in the information obtained by {@link BIMViewer#getProjects}.\r\n     * @param {Function} done Callback invoked on success, into which the project information JSON is passed.\r\n     * @param {Function} error Callback invoked on failure, into which the error message string is passed.\r\n     */\r\n    getProjectInfo(projectId, done, error) {\r\n        if (!projectId) {\r\n            this.error(\"getProjectInfo() - Argument expected: projectId\");\r\n            return;\r\n        }\r\n        if (!done) {\r\n            this.error(\"getProjectInfo() - Argument expected: 'done'\");\r\n            return;\r\n        }\r\n        this.server.getProject(projectId,\r\n            done, (errorMsg) => {\r\n                this.error(\"getProjectInfo() - \" + errorMsg);\r\n                if (error) {\r\n                    error(errorMsg);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Gets information on the given object, belonging to the given model, within the given project.\r\n     *\r\n     * See [Getting Info on an Object](https://xeokit.github.io/xeokit-bim-viewer/docs/#getting-info-on-an-object) for usage.\r\n     *\r\n     * @param {String} projectId ID of the project to get information on. Must be the ID of one of the projects in the information obtained by {@link BIMViewer#getProjects}.\r\n     * @param {String} modelId ID of a model within the project. Must be the ID of one of the models in the information obtained by {@link BIMViewer#getProjectInfo}.\r\n     * @param {String} objectId ID of an object in the model.\r\n     * @param {Function} done Callback invoked on success, into which the object information JSON is passed.\r\n     * @param {Function} error Callback invoked on failure, into which the error message string is passed.\r\n     */\r\n    getObjectInfo(projectId, modelId, objectId, done, error) {\r\n        if (!projectId) {\r\n            this.error(\"getObjectInfo() - Argument expected: projectId\");\r\n            return;\r\n        }\r\n        if (!modelId) {\r\n            this.error(\"getObjectInfo() - Argument expected: modelId\");\r\n            return;\r\n        }\r\n        if (!objectId) {\r\n            this.error(\"getObjectInfo() - Argument expected: objectId\");\r\n            return;\r\n        }\r\n        if (!done) {\r\n            this.error(\"getProjectInfo() - Argument expected: 'done'\");\r\n            return;\r\n        }\r\n        this.server.getObjectInfo(projectId, modelId, objectId,\r\n            done,\r\n            (errorMsg) => {\r\n                if (error) {\r\n                    error(errorMsg);\r\n                }\r\n            });\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------\r\n    // Content loading methods\r\n    //------------------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Loads a project into the viewer.\r\n     *\r\n     * Unloads any currently loaded project and its models first. If the given project is already loaded, will unload that project first.\r\n     *\r\n     * @param {String} projectId ID of the project to load. Must be the ID of one of the projects in the information obtained by {@link BIMViewer#getProjects}.\r\n     * @param {Function} done Callback invoked on success.\r\n     * @param {Function} error Callback invoked on failure, into which the error message string is passed.\r\n     */\r\n    loadProject(projectId, done, error) {\r\n        if (!projectId) {\r\n            this.error(\"loadProject() - Argument expected: objectId\");\r\n            return;\r\n        }\r\n        this._modelsExplorer.loadProject(projectId,\r\n            () => {\r\n                if (done) {\r\n                    done();\r\n                }\r\n            }, (errorMsg) => {\r\n                this.error(\"loadProject() - \" + errorMsg);\r\n                if (error) {\r\n                    error(errorMsg);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Unloads whatever project is currently loaded.\r\n     */\r\n    unloadProject() {\r\n        this._modelsExplorer.unloadProject();\r\n        this.openTab(\"models\");\r\n        this.setControlsEnabled(false); // For quick UI feedback\r\n    }\r\n\r\n    /**\r\n     * Returns the ID of the currently loaded project, if any.\r\n     *\r\n     * @returns {String} The ID of the currently loaded project, otherwise ````null```` if no project is currently loaded.\r\n     */\r\n    getLoadedProjectId() {\r\n        return this._modelsExplorer.getLoadedProjectId();\r\n    }\r\n\r\n    /**\r\n     * Returns the IDs of the models in the currently loaded project.\r\n     *\r\n     * @returns {String[]} The IDs of the models in the currently loaded project.\r\n     */\r\n    getModelIds() {\r\n        return this._modelsExplorer.getModelIds();\r\n    }\r\n\r\n    /**\r\n     * Loads a model into the viewer.\r\n     *\r\n     * Assumes that the project containing the model is currently loaded.\r\n     *\r\n     * @param {String} modelId ID of the model to load. Must be the ID of one of the models in the currently loaded project.\r\n     * @param {Function} done Callback invoked on success.\r\n     * @param {Function} error Callback invoked on failure, into which the error message string is passed.\r\n     */\r\n    loadModel(modelId, done, error) {\r\n        if (!modelId) {\r\n            this.error(\"loadModel() - Argument expected: modelId\");\r\n            return;\r\n        }\r\n        this._modelsExplorer.loadModel(modelId,\r\n            () => {\r\n                if (done) {\r\n                    done();\r\n                }\r\n            }, (errorMsg) => {\r\n                this.error(\"loadModel() - \" + errorMsg);\r\n                if (error) {\r\n                    error(errorMsg);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Load all models in the currently loaded project.\r\n     *\r\n     * Doesn't reload any models that are currently loaded.\r\n     *\r\n     * @param {Function} done Callback invoked on successful loading of the models.\r\n     */\r\n    loadAllModels(done = function () {\r\n    }) {\r\n        const modelIds = this._modelsExplorer.getModelIds();\r\n        const loadNextModel = (i, done2) => {\r\n            if (i >= modelIds.length) {\r\n                done2();\r\n            } else {\r\n                const modelId = modelIds[i];\r\n                if (!this._modelsExplorer.isModelLoaded(modelId)) {\r\n                    this._modelsExplorer.loadModel(modelId, () => {\r\n                        loadNextModel(i + 1, done2);\r\n                    }, (errorMsg) => {\r\n                        this.error(\"loadAllModels() - \" + errorMsg);\r\n                        loadNextModel(i + 1, done2);\r\n                    });\r\n                } else {\r\n                    loadNextModel(i + 1, done2);\r\n                }\r\n            }\r\n        };\r\n        loadNextModel(0, done);\r\n    }\r\n\r\n    /**\r\n     * Returns the IDs of the currently loaded models, if any.\r\n     *\r\n     * @returns {String[]} The IDs of the currently loaded models, otherwise an empty array if no models are currently loaded.\r\n     */\r\n    getLoadedModelIds() {\r\n        return this._modelsExplorer._getLoadedModelIds();\r\n    }\r\n\r\n    /**\r\n     * Gets if the given model is loaded.\r\n     *\r\n     * @param {String} modelId ID of the model to check. Must be the ID of one of the models in the currently loaded project.\r\n     * @returns {Boolean} True if the given model is loaded.\r\n     */\r\n    isModelLoaded(modelId) {\r\n        if (!modelId) {\r\n            this.error(\"unloadModel() - Argument expected: modelId\");\r\n            return;\r\n        }\r\n        return this._modelsExplorer.isModelLoaded(modelId);\r\n    }\r\n\r\n    /**\r\n     * Unloads a model from the viewer.\r\n     *\r\n     * Does nothing if the model is not currently loaded.\r\n     *\r\n     * @param {String} modelId ID of the model to unload.\r\n     */\r\n    unloadModel(modelId) {\r\n        if (!modelId) {\r\n            this.error(\"unloadModel() - Argument expected: modelId\");\r\n            return;\r\n        }\r\n        this._modelsExplorer.unloadModel(modelId);\r\n    }\r\n\r\n    /**\r\n     * Unloads all currently loaded models.\r\n     */\r\n    unloadAllModels() {\r\n        this._modelsExplorer.unloadAllModels();\r\n    }\r\n\r\n    /**\r\n     * Sets the viewer's background color.\r\n     *\r\n     * @param {Number[]} rgbColor Three-element array of RGB values, each in range ````[0..1]````.\r\n     */\r\n    setBackgroundColor(rgbColor) {\r\n        this.viewer.scene.canvas.canvas.style.background = \"rgba(\" + (rgbColor[0] * 255) + \",\" + (rgbColor[1] * 255) + \",\" + (rgbColor[2] * 255) + \", 1.0)\";\r\n    }\r\n\r\n    /**\r\n     * Sets where the colors for model objects will be loaded from.\r\n     *\r\n     * Options are:\r\n     *\r\n     * * \"model\" - (default) load colors from models, and\r\n     * * \"viewer\" - load colors from the viewer's inbuilt table of colors for IFC types.\r\n     *\r\n     * This is \"model\" by default.\r\n     *\r\n     * @param {String} source Where colors will be loaded from - \"model\" or \"viewer\".\r\n     */\r\n    setObjectColorSource(source) {\r\n        switch (source) {\r\n            case \"model\":\r\n                break;\r\n            case \"viewer\":\r\n                break;\r\n            default:\r\n                source = \"model\";\r\n                this.error(\"setObjectColorSource() - Unsupported value - accepted values are 'model' and 'viewer' - defaulting to 'model'\");\r\n                return;\r\n        }\r\n        this._objectColorSource = source;\r\n    }\r\n\r\n    /**\r\n     * Gets where the colors for model objects will be loaded from.\r\n     *\r\n     * This is \"model\" by default.\r\n     *\r\n     * @return {String} Where colors will be loaded from - \"model\" to get colors from the model, or \"viewer\" to get them from the viewer's built-in table of colors for IFC types.\r\n     */\r\n    getObjectColorSource() {\r\n        return this._objectColorSource || \"model\";\r\n    }\r\n\r\n    /**\r\n     * Updates viewer UI state according to the properties in the given object.\r\n     *\r\n     * Note that, since some updates could be animated (e.g. flying the camera to fit objects to view) this\r\n     * method optionally takes a callback, which it invokes after updating the UI.\r\n     *\r\n     * Also, this method is not to be confused with {@link BIMViewer#setConfigs}, which is used to batch-update various configurations and user preferences on the viewer.\r\n     *\r\n     * See [Viewer States](https://xeokit.github.io/xeokit-bim-viewer/docs/#viewer_states) for the list of states that may be batch-updated with this method.\r\n     *\r\n     * @param {Object} viewerState Specifies the viewer UI state updates.\r\n     * @param {Function} done Callback invoked on successful update of the viewer states.\r\n     */\r\n    setViewerState(viewerState, done = () => {\r\n    }) {\r\n        if (viewerState.tabOpen) {\r\n            this.openTab(viewerState.tabOpen);\r\n        }\r\n        if (viewerState.expandObjectsTree) {\r\n            this._objectsExplorer.expandTreeViewToDepth(viewerState.expandObjectsTree);\r\n        }\r\n        if (viewerState.expandClassesTree) {\r\n            this._classesExplorer.expandTreeViewToDepth(viewerState.expandClassesTree);\r\n        }\r\n        if (viewerState.expandStoreysTree) {\r\n            this._storeysExplorer.expandTreeViewToDepth(viewerState.expandStoreysTree);\r\n        }\r\n        if (viewerState.setCamera) {\r\n            this.setCamera(viewerState.setCamera);\r\n        }\r\n        this._parseSelectedStorey(viewerState, () => {\r\n            this._parseThreeDMode(viewerState, () => {\r\n                done();\r\n            });\r\n        });\r\n    }\r\n\r\n    _parseSelectedStorey(viewerState, done) {\r\n        if (viewerState.selectedStorey) {\r\n            this.selectStorey(viewerState.selectedStorey);\r\n            done();\r\n        } else {\r\n            done();\r\n        }\r\n    }\r\n\r\n    _parseThreeDMode(viewerState, done) {\r\n        const activateThreeDMode = (viewerState.threeDEnabled !== false);\r\n        this.set3DEnabled(activateThreeDMode, done);\r\n    }\r\n\r\n    /**\r\n     * Highlights the given object in the tree views within the Objects, Classes and Storeys tabs.\r\n     *\r\n     * Also scrolls the object's node into view within each tree, then highlights it.\r\n     *\r\n     * De-highlights whatever node is currently highlighted in each of those trees.\r\n     *\r\n     * @param {String} objectId ID of the object\r\n     */\r\n    showObjectInExplorers(objectId) {\r\n        if (!objectId) {\r\n            this.error(\"showObjectInExplorers() - Argument expected: objectId\");\r\n            return;\r\n        }\r\n        this._objectsExplorer.showNodeInTreeView(objectId);\r\n        this._classesExplorer.showNodeInTreeView(objectId);\r\n        this._storeysExplorer.showNodeInTreeView(objectId);\r\n    }\r\n\r\n    /**\r\n     * De-highlights the object previously highlighted with {@link BIMViewer#showObjectInExplorers}.\r\n     *\r\n     * This only de-highlights the node. If the node is currently scrolled into view, then the node will remain in view.\r\n     *\r\n     * For each tab, does nothing if a node is currently highlighted.\r\n     */\r\n    unShowObjectInExplorers() {\r\n        this._objectsExplorer.unShowNodeInTreeView();\r\n        this._classesExplorer.unShowNodeInTreeView();\r\n        this._storeysExplorer.unShowNodeInTreeView();\r\n    }\r\n\r\n    /**\r\n     * Sets whether or not the given objects are visible.\r\n     *\r\n     * @param {String[]} objectIds IDs of objects.\r\n     * @param {Boolean} visible True to set objects visible, false to set them invisible.\r\n     */\r\n    setObjectsVisible(objectIds, visible) {\r\n        this._withObjectsInSubtree(objectIds, (entity) => {\r\n            entity.visible = visible;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the visibility of all objects.\r\n     *\r\n     * @param {Boolean} visible True to set objects visible, false to set them invisible.\r\n     */\r\n    setAllObjectsVisible(visible) {\r\n        if (visible) {\r\n            this.viewer.scene.setObjectsVisible(this.viewer.scene.objectIds, true);\r\n        } else {\r\n            this.viewer.scene.setObjectsVisible(this.viewer.scene.visibleObjectIds, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets whether or not the given objects are X-rayed.\r\n     *\r\n     * @param {String[]} objectIds IDs of objects.\r\n     * @param {Boolean} xrayed Whether or not to X-ray the objects.\r\n     */\r\n    setObjectsXRayed(objectIds, xrayed) {\r\n        this._withObjectsInSubtree(objectIds, (entity) => {\r\n            entity.xrayed = xrayed;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets whether or not all objects are X-rayed.\r\n     *\r\n     * @param {Boolean} xrayed Whether or not to set all objects X-rayed.\r\n     */\r\n    setAllObjectsXRayed(xrayed) {\r\n        if (xrayed) {\r\n            this.viewer.scene.setObjectsXRayed(this.viewer.scene.objectIds, true);\r\n        } else {\r\n            this.viewer.scene.setObjectsXRayed(this.viewer.scene.xrayedObjectIds, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets whether or not the given objects are selected.\r\n     *\r\n     * @param {String[]} objectIds IDs of objects.\r\n     * @param {Boolean} selected Whether or not to set the objects selected.\r\n     */\r\n    setObjectsSelected(objectIds, selected) {\r\n        this._withObjectsInSubtree(objectIds, (entity) => {\r\n            entity.selected = selected;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets whether or not all objects are selected.\r\n     *\r\n     * @param {Boolean} selected Whether or not to set all objects selected.\r\n     */\r\n    setAllObjectsSelected(selected) {\r\n        if (selected) {\r\n            this.viewer.scene.setObjectsSelected(this.viewer.scene.objectIds, true);\r\n        } else {\r\n            this.viewer.scene.setObjectsSelected(this.viewer.scene.selectedObjectIds, false);\r\n        }\r\n    }\r\n\r\n    _withObjectsInSubtree(objectIds, callback) {\r\n        if (!objectIds) {\r\n            this.error(\"Argument expected: objectIds\");\r\n            return;\r\n        }\r\n        for (let i = 0, len = objectIds.length; i < len; i++) {\r\n            const objectId = objectIds[i];\r\n            this.viewer.metaScene.withMetaObjectsInSubtree(objectId, (metaObject) => {\r\n                const entity = this.viewer.scene.objects[metaObject.id];\r\n                if (entity) {\r\n                    callback(entity);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Flies the camera to fit the given object in view.\r\n     *\r\n     * @param {String} objectId ID of the object\r\n     * @param {Function} done Callback invoked on completion\r\n     */\r\n    flyToObject(objectId, done) {\r\n        if (!objectId) {\r\n            this.error(\"flyToObject() - Argument expected: objectId\");\r\n            return;\r\n        }\r\n        const viewer = this.viewer;\r\n        const scene = viewer.scene;\r\n        const objectIds = [];\r\n        this.viewer.metaScene.withMetaObjectsInSubtree(objectId, (metaObject) => {\r\n            if (scene.objects[metaObject.id]) {\r\n                objectIds.push(metaObject.id);\r\n            }\r\n        });\r\n        if (objectIds.length === 0) {\r\n            this.error(\"Object not found in viewer: '\" + objectId + \"'\");\r\n            if (done) {\r\n                done();\r\n            }\r\n            return;\r\n        }\r\n        scene.setObjectsVisible(objectIds, true);\r\n        scene.setObjectsHighlighted(objectIds, true);\r\n        const aabb = scene.getAABB(objectIds);\r\n        viewer.cameraFlight.flyTo({\r\n            aabb: aabb\r\n        }, () => {\r\n            if (done) {\r\n                done();\r\n            }\r\n            setTimeout(function () {\r\n                scene.setObjectsHighlighted(scene.highlightedObjectIds, false);\r\n            }, 500);\r\n        });\r\n        viewer.cameraControl.pivotPos = math.getAABB3Center(aabb);\r\n    }\r\n\r\n    /**\r\n     * Flies the camera to fit the given objects in view.\r\n     *\r\n     * @param {String[]} objectIds IDs of the objects\r\n     * @param {Function} done Callback invoked on completion\r\n     */\r\n    viewFitObjects(objectIds, done) {\r\n        if (!objectIds) {\r\n            this.error(\"flyToObject() - Argument expected: objectIds\");\r\n            return;\r\n        }\r\n        const viewer = this.viewer;\r\n        const scene = viewer.scene;\r\n\r\n        const entityIds = [];\r\n\r\n        for (var i = 0, len = objectIds.length; i < len; i++) {\r\n            const objectId = objectIds[i];\r\n            this.viewer.metaScene.withMetaObjectsInSubtree(objectId, (metaObject) => {\r\n                if (scene.objects[metaObject.id]) {\r\n                    entityIds.push(metaObject.id);\r\n                }\r\n            });\r\n        }\r\n        if (entityIds.length === 0) {\r\n            if (done) {\r\n                done();\r\n            }\r\n            return;\r\n        }\r\n        scene.setObjectsVisible(entityIds, true);\r\n        scene.setObjectsHighlighted(entityIds, true);\r\n        const aabb = scene.getAABB(entityIds);\r\n        viewer.cameraFlight.flyTo({\r\n            aabb: aabb\r\n        }, () => {\r\n            if (done) {\r\n                done();\r\n            }\r\n            setTimeout(function () {\r\n                scene.setObjectsHighlighted(scene.highlightedObjectIds, false);\r\n            }, 500);\r\n        });\r\n        viewer.cameraControl.pivotPos = math.getAABB3Center(aabb);\r\n    }\r\n\r\n    /**\r\n     * Flies the camera to fit all objects in view.\r\n     *\r\n     * @param {Function} done Callback invoked on completion\r\n     */\r\n    viewFitAll(done) {\r\n        const viewer = this.viewer;\r\n        const scene = viewer.scene;\r\n        const aabb = scene.getAABB();\r\n        viewer.cameraFlight.flyTo({\r\n            aabb: aabb\r\n        }, () => {\r\n            if (done) {\r\n                done();\r\n            }\r\n        });\r\n        viewer.cameraControl.pivotPos = math.getAABB3Center(aabb);\r\n    }\r\n\r\n    /**\r\n     * Jumps the camera to fit the given object in view.\r\n     *\r\n     * @param {String} objectId ID of the object\r\n     */\r\n    jumpToObject(objectId) {\r\n        if (!objectId) {\r\n            this.error(\"jumpToObject() - Argument expected: objectId\");\r\n            return;\r\n        }\r\n        const viewer = this.viewer;\r\n        const scene = viewer.scene;\r\n        const objectIds = [];\r\n        this.viewer.metaScene.withMetaObjectsInSubtree(objectId, (metaObject) => {\r\n            if (scene.objects[metaObject.id]) {\r\n                objectIds.push(metaObject.id);\r\n            }\r\n        });\r\n        if (objectIds.length === 0) {\r\n            this.error(\"Object not found in viewer: '\" + objectId + \"'\");\r\n            return;\r\n        }\r\n        scene.setObjectsVisible(objectIds, true);\r\n        const aabb = scene.getAABB(objectIds);\r\n        viewer.cameraFlight.jumpTo({\r\n            aabb: aabb\r\n        });\r\n        viewer.cameraControl.pivotPos = math.getAABB3Center(aabb);\r\n    }\r\n\r\n    /**\r\n     * Sets the camera to the given position.\r\n     *\r\n     * @param {Number[]} [params.eye] Eye position.\r\n     * @param {Number[]} [params.look] Point of interest.\r\n     * @param {Number[]} [params.up] Direction of \"up\".\r\n     */\r\n    setCamera(params) {\r\n        const viewer = this.viewer;\r\n        const scene = viewer.scene;\r\n        const camera = scene.camera;\r\n        if (params.eye) {\r\n            camera.eye = params.eye;\r\n        }\r\n        if (params.look) {\r\n            camera.look = params.look;\r\n        }\r\n        if (params.up) {\r\n            camera.up = params.up;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fits the given models in view.\r\n     *\r\n     * @param {String[]} modelIds ID of the models.\r\n     * @param {Function} [done] Callback invoked on completion. Will be animated if this is given, otherwise will be instantaneous.\r\n     */\r\n    viewFitModels(modelIds, done) {\r\n        if (!modelIds) {\r\n            this.error(\"viewFitModels() - Argument expected: modelIds\");\r\n            return;\r\n        }\r\n        const viewer = this.viewer;\r\n        const scene = viewer.scene;\r\n        const aabb = math.AABB3();\r\n        math.collapseAABB3(aabb);\r\n        for (var i = 0, len = modelIds.length; i < len; i++) {\r\n            const modelId = modelIds[i];\r\n            const model = scene.models[modelId];\r\n            if (!model) {\r\n                this.error(\"Model not found in viewer: '\" + modelId + \"'\");\r\n                continue;\r\n            }\r\n            model.visible = true;\r\n            model.highlighted = true;\r\n            math.expandAABB3(aabb, model.aabb);\r\n        }\r\n        if (done) {\r\n            viewer.cameraFlight.flyTo({\r\n                aabb: aabb\r\n            }, () => {\r\n                done();\r\n                setTimeout(function () {\r\n                    scene.setObjectsHighlighted(scene.highlightedObjectIds, false);\r\n                }, 500);\r\n            });\r\n        } else {\r\n            viewer.cameraFlight.jumpTo({\r\n                aabb: aabb\r\n            });\r\n            setTimeout(function () {\r\n                scene.setObjectsHighlighted(scene.highlightedObjectIds, false);\r\n            }, 500);\r\n        }\r\n        viewer.cameraControl.pivotPos = math.getAABB3Center(aabb);\r\n    }\r\n\r\n    /**\r\n     * Opens the specified viewer tab.\r\n     *\r\n     * The available tabs are:\r\n     *\r\n     *  * \"models\" - the Models tab, which lists the models available within the currently loaded project,\r\n     *  * \"objects\" - the Objects tab, which contains a tree view for each loaded model, organized to indicate the containment hierarchy of their objects,\r\n     *  * \"classes\" - the Classes tab, which contains a tree view for each loaded model, with nodes grouped by IFC types of their objects, and\r\n     *  * \"storeys\" - the Storeys tab, which contains a tree view for each loaded model, with nodes grouped within ````IfcBuildingStoreys````, sub-grouped by their IFC types.\r\n     *\r\n     * @param {String} tabId ID of the tab to open - see method description.\r\n     */\r\n    openTab(tabId) {\r\n        if (!tabId) {\r\n            this.error(\"openTab() - Argument expected: tabId\");\r\n            return;\r\n        }\r\n        const tabClass = 'xeokit-tab';\r\n        const activeClass = 'active';\r\n        let tabSelector;\r\n        switch (tabId) {\r\n            case \"models\":\r\n                tabSelector = \"xeokit-modelsTab\";\r\n                break;\r\n            case \"objects\":\r\n                tabSelector = \"xeokit-objectsTab\";\r\n                break;\r\n            case \"classes\":\r\n                tabSelector = \"xeokit-classesTab\";\r\n                break;\r\n            case \"storeys\":\r\n                tabSelector = \"xeokit-storeysTab\";\r\n                break;\r\n            default:\r\n                this.error(\"openTab() - tab not recognized: '\" + tabId + \"'\");\r\n                return;\r\n        }\r\n        let tabs = this._explorerElement.querySelectorAll(\".\" + tabClass);\r\n        let tab = this._explorerElement.querySelector(\".\" + tabSelector);\r\n        for (let i = 0; i < tabs.length; i++) {\r\n            let tabElement = tabs[i];\r\n            if (tabElement.isEqualNode(tab)) {\r\n                tabElement.classList.add(activeClass)\r\n            } else {\r\n                tabElement.classList.remove(activeClass)\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the ID of the currently open viewer tab.\r\n     *\r\n     * The available tabs are:\r\n     *\r\n     *  * \"models\" - the Models tab, which lists the models available within the currently loaded project,\r\n     *  * \"objects\" - the Objects tab, which contains a tree view for each loaded model, organized to indicate the containment hierarchy of their objects,\r\n     *  * \"classes\" - the Classes tab, which contains a tree view for each loaded model, with nodes grouped by IFC types of their objects, and\r\n     *  * \"storeys\" - the Storeys tab, which contains a tree view for each loaded model, with nodes grouped within ````IfcBuildingStoreys````, sub-grouped by their IFC types.\r\n     *  * \"none\" - no tab is open; this is unlikely, since one of the above tabs should be open at a any time, but here for robustness.\r\n     */\r\n    getOpenTab() {\r\n        function hasClass(element, className) {\r\n            if (!element) {\r\n                return false;\r\n            }\r\n            return (\" \" + element.className + \" \").indexOf(\" \" + className + \" \") > -1;\r\n        }\r\n\r\n        const activeClass = 'active';\r\n        let modelsTab = this._explorerElement.querySelector(\".xeokit-modelsTab\");\r\n        if (hasClass(modelsTab, activeClass)) {\r\n            return \"models\";\r\n        }\r\n        let objectsTab = this._explorerElement.querySelector(\".xeokit-objectsTab\");\r\n        if (hasClass(objectsTab, activeClass)) {\r\n            return \"objects\";\r\n        }\r\n        let classesTab = this._explorerElement.querySelector(\".xeokit-classesTab\");\r\n        if (hasClass(classesTab, activeClass)) {\r\n            return \"classes\";\r\n        }\r\n        let storeysTab = this._explorerElement.querySelector(\".xeokit-storeysTab\");\r\n        if (hasClass(storeysTab, activeClass)) {\r\n            return \"storeys\";\r\n        }\r\n        return \"none\";\r\n    }\r\n\r\n    /**\r\n     * Switches the viewer between 2D and 3D viewing modes.\r\n     *\r\n     * @param {Boolean} enabled Set true to switch into 3D mode, else false to switch into 2D mode.\r\n     * @param {Function} done Callback to invoke when switch complete. Supplying this callback causes an animated transition. Otherwise, the transition will be instant.\r\n     */\r\n    set3DEnabled(enabled, done) {\r\n        if (enabled) {\r\n            this._threeDMode.setActive(true, done);\r\n        } else {\r\n            this._threeDMode.setActive(false, done);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets whether the viewer is in 3D or 2D viewing mode.\r\n     *\r\n     * @returns {boolean} True when in 3D mode, else false.\r\n     */\r\n    get3DEnabled() {\r\n        return this._threeDMode.getActive();\r\n    }\r\n\r\n    /**\r\n     * Transitions the viewer into an isolated view of the given building storey.\r\n     *\r\n     * Does nothing and logs an error if no object of the given ID is in the viewer, or if the object is not an ````IfcBuildingStorey````.\r\n     *\r\n     * @param {String} storeyObjectId ID of an ````IfcBuildingStorey```` object.\r\n     * @param {Function} [done] Optional callback to invoke on completion. When provided, the transition will be animated, with the camera flying into position. Otherwise, the transition will be instant, with the camera jumping into position.\r\n     */\r\n    selectStorey(storeyObjectId, done) {\r\n        const metaScene = this.viewer.metaScene;\r\n        const storeyMetaObject = metaScene.metaObjects[storeyObjectId];\r\n        if (!storeyMetaObject) {\r\n            this.error(\"selectStorey() - Object is not found: '\" + storeyObjectId + \"'\");\r\n            return;\r\n        }\r\n        if (storeyMetaObject.type !== \"IfcBuildingStorey\") {\r\n            this.error(\"selectStorey() - Object is not an IfcBuildingStorey: '\" + storeyObjectId + \"'\");\r\n            return;\r\n        }\r\n        this._storeysExplorer.selectStorey(storeyObjectId, done);\r\n    }\r\n\r\n    /**\r\n     * Saves viewer state to a BCF viewpoint.\r\n     *\r\n     * This does not save information about the project and model(s) that are currently loaded. When loading the viewpoint,\r\n     * the viewer will assume that the same project and models will be currently loaded (the BCF viewpoint specification\r\n     * does not contain that information).\r\n     *\r\n     * Note that xeokit's {@link Camera#look} is the **point-of-interest**, whereas the BCF ````camera_direction```` is a\r\n     * direction vector. Therefore, we save ````camera_direction```` as the vector from {@link Camera#eye} to {@link Camera#look}.\r\n     *\r\n     * @param {*} [options] Options for getting the viewpoint.\r\n     * @param {Boolean} [options.spacesVisible=false] Indicates whether ````IfcSpace```` types should be forced visible in the viewpoint.\r\n     * @param {Boolean} [options.openingsVisible=false] Indicates whether ````IfcOpening```` types should be forced visible in the viewpoint.\r\n     * @param {Boolean} [options.spaceBoundariesVisible=false] Indicates whether the boundaries of ````IfcSpace```` types should be visible in the viewpoint.\r\n     * @returns {*} BCF JSON viewpoint object\r\n     * @example\r\n     *\r\n     * const viewpoint = bimViewer.saveBCFViewpoint({\r\n     *     spacesVisible: false,          // Default\r\n     *     spaceBoundariesVisible: false, // Default\r\n     *     openingsVisible: false         // Default\r\n     * });\r\n     *\r\n     * // viewpoint will resemble the following:\r\n     *\r\n     * {\r\n     *     perspective_camera: {\r\n     *         camera_view_point: {\r\n     *             x: 0.0,\r\n     *             y: 0.0,\r\n     *             z: 0.0\r\n     *         },\r\n     *         camera_direction: {\r\n     *             x: 1.0,\r\n     *             y: 1.0,\r\n     *             z: 2.0\r\n     *         },\r\n     *         camera_up_vector: {\r\n     *             x: 0.0,\r\n     *             y: 0.0,\r\n     *             z: 1.0\r\n     *         },\r\n     *         field_of_view: 90.0\r\n     *     },\r\n     *     lines: [],\r\n     *     clipping_planes: [{\r\n     *         location: {\r\n     *             x: 0.5,\r\n     *             y: 0.5,\r\n     *             z: 0.5\r\n     *         },\r\n     *         direction: {\r\n     *             x: 1.0,\r\n     *             y: 0.0,\r\n     *             z: 0.0\r\n     *         }\r\n     *     }],\r\n     *     bitmaps: [],\r\n     *     snapshot: {\r\n     *         snapshot_type: png,\r\n     *         snapshot_data: \"data:image/png;base64,......\"\r\n     *     },\r\n     *     components: {\r\n     *         visibility: {\r\n     *             default_visibility: false,\r\n     *             exceptions: [{\r\n     *                 ifc_guid: 4$cshxZO9AJBebsni$z9Yk,\r\n     *                 originating_system: xeokit.io,\r\n     *                 authoring_tool_id: xeokit/v1.0\r\n     *             }]\r\n     *        },\r\n     *         selection: [{\r\n     *            ifc_guid: \"4$cshxZO9AJBebsni$z9Yk\",\r\n     *         }]\r\n     *     }\r\n     * }\r\n     */\r\n    saveBCFViewpoint(options) {\r\n        return this._bcfViewpointsPlugin.getViewpoint(options);\r\n    }\r\n\r\n    /**\r\n     * Sets viewer state to the given BCF viewpoint.\r\n     *\r\n     * This assumes that the viewer currently contains the same project and model(s) that were loaded at the time that the\r\n     * viewpoint was originally saved (the BCF viewpoint specification does not contain that information).\r\n     *\r\n     * Note that xeokit's {@link Camera#look} is the **point-of-interest**, whereas the BCF ````camera_direction```` is a\r\n     * direction vector. Therefore, when loading a BCF viewpoint, we set {@link Camera#look} to the absolute position\r\n     * obtained by offsetting the BCF ````camera_view_point````  along ````camera_direction````.\r\n     *\r\n     * When loading a viewpoint, we also have the option to find {@link Camera#look} as the closest point of intersection\r\n     * (on the surface of any visible and pickable {@link Entity}) with a 3D ray fired from ````camera_view_point```` in\r\n     * the direction of ````camera_direction````.\r\n     *\r\n     * @param {*} bcfViewpoint  BCF JSON viewpoint object or \"reset\" / \"RESET\" to reset the viewer, which clears SectionPlanes,\r\n     * shows default visible entities and restores camera to initial default position.\r\n     * @param {*} [options] Options for setting the viewpoint.\r\n     * @param {Boolean} [options.rayCast=true] When ````true```` (default), will attempt to set {@link Camera#look} to the closest\r\n     * point of surface intersection with a ray fired from the BCF ````camera_view_point```` in the direction of ````camera_direction````.\r\n     * @param {Boolean} [options.immediate] When ````true```` (default), immediately set camera position.\r\n     * @param {Boolean} [options.duration] Flight duration in seconds.  Overrides {@link CameraFlightAnimation#duration}.\r\n     */\r\n    loadBCFViewpoint(bcfViewpoint, options) {\r\n        if (!bcfViewpoint) {\r\n            this.error(\"loadBCFViewpoint() - Argument expected: bcfViewpoint\");\r\n            return;\r\n        }\r\n        this._bcfViewpointsPlugin.setViewpoint(bcfViewpoint, options);\r\n    }\r\n\r\n    /**\r\n     * Resets the view.\r\n     *\r\n     * This resets object appearances (visibility, selection, highlight and X-ray), sets camera to\r\n     * default position, and removes section planes.\r\n     */\r\n    resetView() {\r\n        this._resetAction.reset();\r\n    }\r\n\r\n    /**\r\n     * Enables or disables the various buttons and controls throughout the viewer.\r\n     *\r\n     * This also makes various buttons appear disabled.\r\n     *\r\n     * @param {Boolean} enabled Whether or not to disable the controls.\r\n     */\r\n    setControlsEnabled(enabled) {\r\n\r\n        // Explorer\r\n\r\n        // Models tab is always enabled\r\n        this._objectsExplorer.setEnabled(enabled);\r\n        this._classesExplorer.setEnabled(enabled);\r\n        this._storeysExplorer.setEnabled(enabled);\r\n\r\n        // Toolbar\r\n\r\n        this._resetAction.setEnabled(enabled);\r\n        this._fitAction.setEnabled(enabled);\r\n        this._threeDMode.setEnabled(enabled);\r\n        this._firstPersonMode.setEnabled(enabled);\r\n        this._queryTool.setEnabled(enabled);\r\n        this._hideTool.setEnabled(enabled);\r\n        this._selectionTool.setEnabled(enabled);\r\n        this._sectionTool.setEnabled(enabled);\r\n    }\r\n\r\n    /**\r\n     * Sets whether or not keyboard camera control is enabled.\r\n     *\r\n     * This is useful when we don't want key events over the canvas to clash with other UI elements outside the canvas.\r\n     *\r\n     * Default value is ````true````.\r\n     *\r\n     * @param {Boolean} enabled Set ````true```` to enable keyboard input.\r\n     */\r\n    setKeyboardEnabled(enabled) {\r\n        this.viewer.scene.input.keyboardEnabled = enabled;\r\n    }\r\n\r\n    /**\r\n     * Gets whether keyboard camera control is enabled.\r\n     *\r\n     * This is useful when we don't want key events over the canvas to clash with other UI elements outside the canvas.\r\n     *\r\n     * Default value is ````true````.\r\n     *\r\n     * @returns {Boolean} Returns ````true```` if keyboard input is enabled.\r\n     */\r\n    getKeyboardEnabled() {\r\n        return  this.viewer.scene.input.keyboardEnabled;\r\n    }\r\n\r\n    /**\r\n     * Destroys the viewer, freeing all resources.\r\n     */\r\n    destroy() {\r\n        this.viewer.destroy();\r\n        this._bcfViewpointsPlugin.destroy();\r\n        this._canvasContextMenu.destroy();\r\n        this._objectContextMenu.destroy();\r\n    }\r\n}\r\n\r\nexport {BIMViewer};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/BIMViewer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "explorerTemplate",
    "memberof": "src/BIMViewer.js",
    "static": true,
    "longname": "src/BIMViewer.js~explorerTemplate",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-bim-viewer/src/BIMViewer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "toolbarTemplate",
    "memberof": "src/BIMViewer.js",
    "static": true,
    "longname": "src/BIMViewer.js~toolbarTemplate",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-bim-viewer/src/BIMViewer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "initTabs",
    "memberof": "src/BIMViewer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/BIMViewer.js~initTabs",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-bim-viewer/src/BIMViewer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [
      {
        "name": "containerElement",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "class",
    "name": "BIMViewer",
    "memberof": "src/BIMViewer.js",
    "static": true,
    "longname": "src/BIMViewer.js~BIMViewer",
    "access": "public",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/BIMViewer.js",
    "importStyle": "{BIMViewer}",
    "description": "A BIM viewer based on the [xeokit SDK](http://xeokit.io).",
    "lineNumber": 144,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ]
  },
  {
    "__docId__": 53,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#constructor",
    "access": "public",
    "description": "Constructs a BIMViewer.",
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "Server"
        ],
        "spread": false,
        "optional": false,
        "name": "server",
        "description": "Data access strategy."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": "Configuration."
      }
    ]
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "_configs",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_configs",
    "access": "private",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "viewer",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#viewer",
    "access": "public",
    "description": "The xeokit [Viewer](https://xeokit.github.io/xeokit-sdk/docs/class/src/viewer/Viewer.js~Viewer.html) at the core of this BIMViewer.",
    "lineNumber": 202,
    "type": {
      "nullable": null,
      "types": [
        "Viewer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "_explorerElement",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_explorerElement",
    "access": "private",
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "_modelsExplorer",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_modelsExplorer",
    "access": "private",
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "_objectsExplorer",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_objectsExplorer",
    "access": "private",
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "_classesExplorer",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_classesExplorer",
    "access": "private",
    "description": null,
    "lineNumber": 228,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "_storeysExplorer",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_storeysExplorer",
    "access": "private",
    "description": null,
    "lineNumber": 235,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "_resetAction",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_resetAction",
    "access": "private",
    "description": null,
    "lineNumber": 242,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "_fitAction",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_fitAction",
    "access": "private",
    "description": null,
    "lineNumber": 247,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "_threeDMode",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_threeDMode",
    "access": "private",
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "_firstPersonMode",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_firstPersonMode",
    "access": "private",
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "_hideTool",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_hideTool",
    "access": "private",
    "description": null,
    "lineNumber": 262,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "_selectionTool",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_selectionTool",
    "access": "private",
    "description": null,
    "lineNumber": 267,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "_queryTool",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_queryTool",
    "access": "private",
    "description": null,
    "lineNumber": 272,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "_sectionTool",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_sectionTool",
    "access": "private",
    "description": null,
    "lineNumber": 278,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "_navCubeMode",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_navCubeMode",
    "access": "private",
    "description": null,
    "lineNumber": 283,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "_busyModal",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_busyModal",
    "access": "private",
    "description": null,
    "lineNumber": 288,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "_bcfViewpointsPlugin",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_bcfViewpointsPlugin",
    "access": "private",
    "description": null,
    "lineNumber": 364,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "_customizeViewer",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_customizeViewer",
    "access": "private",
    "description": null,
    "lineNumber": 367,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "_initCanvasContextMenus",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_initCanvasContextMenus",
    "access": "private",
    "description": null,
    "lineNumber": 470,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "_canvasContextMenu",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_canvasContextMenu",
    "access": "private",
    "description": null,
    "lineNumber": 472,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "_objectContextMenu",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_objectContextMenu",
    "access": "private",
    "description": null,
    "lineNumber": 473,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "_initConfigs",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_initConfigs",
    "access": "private",
    "description": null,
    "lineNumber": 510,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "setConfigs",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#setConfigs",
    "access": "public",
    "description": "Sets a batch of viewer configurations.\n\nNote that this method is not to be confused with {@link BIMViewer#setViewerState}, which batch-updates various states of the viewer's UI and 3D view.\n\nSee [Viewer Configurations](https://xeokit.github.io/xeokit-bim-viewer/docs/#viewer-configurations) for the list of available configurations.",
    "lineNumber": 536,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "viewerConfigs",
        "description": "Map of key-value configuration pairs."
      }
    ],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "setConfig",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#setConfig",
    "access": "public",
    "description": "Sets a viewer configuration.\n\nSee [Viewer Configurations](https://xeokit.github.io/xeokit-bim-viewer/docs/#viewer-configurations) for the list of available configurations.",
    "lineNumber": 553,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Configuration name."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Configuration value."
      }
    ],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "getConfig",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#getConfig",
    "access": "public",
    "description": "Gets the value of a viewer configuration.\n\nThese are set with {@link BIMViewer#setConfig} and {@link BIMViewer#setConfigs}.",
    "lineNumber": 662,
    "unknown": [
      {
        "tagName": "@ereturns",
        "tagValue": "{*} Configuration value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Configuration name."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "getProjectsInfo",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#getProjectsInfo",
    "access": "public",
    "description": "Gets information on all available projects.\n\nSee [Getting Info on Available Projects](https://xeokit.github.io/xeokit-bim-viewer/docs/#getting-info-on-available-projects) for usage.",
    "lineNumber": 678,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback invoked on success, into which the projects information JSON is passed."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "Callback invoked on failure, into which the error message string is passed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "getProjectInfo",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#getProjectInfo",
    "access": "public",
    "description": "Gets information on the given project.\n\nSee [Getting Info on a Project](https://xeokit.github.io/xeokit-bim-viewer/docs/#getting-info-on-a-project) for usage.",
    "lineNumber": 700,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "projectId",
        "description": "ID of the project to get information on. Must be the ID of one of the projects in the information obtained by {@link BIMViewer#getProjects}."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback invoked on success, into which the project information JSON is passed."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "Callback invoked on failure, into which the error message string is passed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "getObjectInfo",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#getObjectInfo",
    "access": "public",
    "description": "Gets information on the given object, belonging to the given model, within the given project.\n\nSee [Getting Info on an Object](https://xeokit.github.io/xeokit-bim-viewer/docs/#getting-info-on-an-object) for usage.",
    "lineNumber": 729,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "projectId",
        "description": "ID of the project to get information on. Must be the ID of one of the projects in the information obtained by {@link BIMViewer#getProjects}."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "modelId",
        "description": "ID of a model within the project. Must be the ID of one of the models in the information obtained by {@link BIMViewer#getProjectInfo}."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "objectId",
        "description": "ID of an object in the model."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback invoked on success, into which the object information JSON is passed."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "Callback invoked on failure, into which the error message string is passed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "loadProject",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#loadProject",
    "access": "public",
    "description": "Loads a project into the viewer.\n\nUnloads any currently loaded project and its models first. If the given project is already loaded, will unload that project first.",
    "lineNumber": 768,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "projectId",
        "description": "ID of the project to load. Must be the ID of one of the projects in the information obtained by {@link BIMViewer#getProjects}."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback invoked on success."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "Callback invoked on failure, into which the error message string is passed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "unloadProject",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#unloadProject",
    "access": "public",
    "description": "Unloads whatever project is currently loaded.",
    "lineNumber": 789,
    "params": [],
    "return": null
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "getLoadedProjectId",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#getLoadedProjectId",
    "access": "public",
    "description": "Returns the ID of the currently loaded project, if any.",
    "lineNumber": 800,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} The ID of the currently loaded project, otherwise ````null```` if no project is currently loaded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The ID of the currently loaded project, otherwise ````null```` if no project is currently loaded."
    },
    "params": []
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "getModelIds",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#getModelIds",
    "access": "public",
    "description": "Returns the IDs of the models in the currently loaded project.",
    "lineNumber": 809,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String[]} The IDs of the models in the currently loaded project."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": "The IDs of the models in the currently loaded project."
    },
    "params": []
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "loadModel",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#loadModel",
    "access": "public",
    "description": "Loads a model into the viewer.\n\nAssumes that the project containing the model is currently loaded.",
    "lineNumber": 822,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "modelId",
        "description": "ID of the model to load. Must be the ID of one of the models in the currently loaded project."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback invoked on success."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "Callback invoked on failure, into which the error message string is passed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "loadAllModels",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#loadAllModels",
    "access": "public",
    "description": "Load all models in the currently loaded project.\n\nDoesn't reload any models that are currently loaded.",
    "lineNumber": 847,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback invoked on successful loading of the models."
      }
    ],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "getLoadedModelIds",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#getLoadedModelIds",
    "access": "public",
    "description": "Returns the IDs of the currently loaded models, if any.",
    "lineNumber": 875,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String[]} The IDs of the currently loaded models, otherwise an empty array if no models are currently loaded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": "The IDs of the currently loaded models, otherwise an empty array if no models are currently loaded."
    },
    "params": []
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "isModelLoaded",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#isModelLoaded",
    "access": "public",
    "description": "Gets if the given model is loaded.",
    "lineNumber": 885,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} True if the given model is loaded."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "modelId",
        "description": "ID of the model to check. Must be the ID of one of the models in the currently loaded project."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if the given model is loaded."
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "unloadModel",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#unloadModel",
    "access": "public",
    "description": "Unloads a model from the viewer.\n\nDoes nothing if the model is not currently loaded.",
    "lineNumber": 900,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "modelId",
        "description": "ID of the model to unload."
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "unloadAllModels",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#unloadAllModels",
    "access": "public",
    "description": "Unloads all currently loaded models.",
    "lineNumber": 911,
    "params": [],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "setBackgroundColor",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#setBackgroundColor",
    "access": "public",
    "description": "Sets the viewer's background color.",
    "lineNumber": 920,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "rgbColor",
        "description": "Three-element array of RGB values, each in range ````[0..1]````."
      }
    ],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "setObjectColorSource",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#setObjectColorSource",
    "access": "public",
    "description": "Sets where the colors for model objects will be loaded from.\n\nOptions are:\n\n* \"model\" - (default) load colors from models, and\n* \"viewer\" - load colors from the viewer's inbuilt table of colors for IFC types.\n\nThis is \"model\" by default.",
    "lineNumber": 936,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Where colors will be loaded from - \"model\" or \"viewer\"."
      }
    ],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "_objectColorSource",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_objectColorSource",
    "access": "private",
    "description": null,
    "lineNumber": 947,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "getObjectColorSource",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#getObjectColorSource",
    "access": "public",
    "description": "Gets where the colors for model objects will be loaded from.\n\nThis is \"model\" by default.",
    "lineNumber": 957,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Where colors will be loaded from - \"model\" to get colors from the model, or \"viewer\" to get them from the viewer's built-in table of colors for IFC types."
    },
    "params": []
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "setViewerState",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#setViewerState",
    "access": "public",
    "description": "Updates viewer UI state according to the properties in the given object.\n\nNote that, since some updates could be animated (e.g. flying the camera to fit objects to view) this\nmethod optionally takes a callback, which it invokes after updating the UI.\n\nAlso, this method is not to be confused with {@link BIMViewer#setConfigs}, which is used to batch-update various configurations and user preferences on the viewer.\n\nSee [Viewer States](https://xeokit.github.io/xeokit-bim-viewer/docs/#viewer_states) for the list of states that may be batch-updated with this method.",
    "lineNumber": 974,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "viewerState",
        "description": "Specifies the viewer UI state updates."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback invoked on successful update of the viewer states."
      }
    ],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "_parseSelectedStorey",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_parseSelectedStorey",
    "access": "private",
    "description": null,
    "lineNumber": 998,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "viewerState",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "_parseThreeDMode",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_parseThreeDMode",
    "access": "private",
    "description": null,
    "lineNumber": 1007,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "viewerState",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "showObjectInExplorers",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#showObjectInExplorers",
    "access": "public",
    "description": "Highlights the given object in the tree views within the Objects, Classes and Storeys tabs.\n\nAlso scrolls the object's node into view within each tree, then highlights it.\n\nDe-highlights whatever node is currently highlighted in each of those trees.",
    "lineNumber": 1021,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "objectId",
        "description": "ID of the object"
      }
    ],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "unShowObjectInExplorers",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#unShowObjectInExplorers",
    "access": "public",
    "description": "De-highlights the object previously highlighted with {@link BIMViewer#showObjectInExplorers}.\n\nThis only de-highlights the node. If the node is currently scrolled into view, then the node will remain in view.\n\nFor each tab, does nothing if a node is currently highlighted.",
    "lineNumber": 1038,
    "params": [],
    "return": null
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "setObjectsVisible",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#setObjectsVisible",
    "access": "public",
    "description": "Sets whether or not the given objects are visible.",
    "lineNumber": 1050,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "objectIds",
        "description": "IDs of objects."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "visible",
        "description": "True to set objects visible, false to set them invisible."
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "setAllObjectsVisible",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#setAllObjectsVisible",
    "access": "public",
    "description": "Sets the visibility of all objects.",
    "lineNumber": 1061,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "visible",
        "description": "True to set objects visible, false to set them invisible."
      }
    ],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "setObjectsXRayed",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#setObjectsXRayed",
    "access": "public",
    "description": "Sets whether or not the given objects are X-rayed.",
    "lineNumber": 1075,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "objectIds",
        "description": "IDs of objects."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "xrayed",
        "description": "Whether or not to X-ray the objects."
      }
    ],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "setAllObjectsXRayed",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#setAllObjectsXRayed",
    "access": "public",
    "description": "Sets whether or not all objects are X-rayed.",
    "lineNumber": 1086,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "xrayed",
        "description": "Whether or not to set all objects X-rayed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "setObjectsSelected",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#setObjectsSelected",
    "access": "public",
    "description": "Sets whether or not the given objects are selected.",
    "lineNumber": 1100,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "objectIds",
        "description": "IDs of objects."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "selected",
        "description": "Whether or not to set the objects selected."
      }
    ],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "setAllObjectsSelected",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#setAllObjectsSelected",
    "access": "public",
    "description": "Sets whether or not all objects are selected.",
    "lineNumber": 1111,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "selected",
        "description": "Whether or not to set all objects selected."
      }
    ],
    "return": null
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "_withObjectsInSubtree",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_withObjectsInSubtree",
    "access": "private",
    "description": null,
    "lineNumber": 1119,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "objectIds",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "flyToObject",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#flyToObject",
    "access": "public",
    "description": "Flies the camera to fit the given object in view.",
    "lineNumber": 1141,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "objectId",
        "description": "ID of the object"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback invoked on completion"
      }
    ],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "viewFitObjects",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#viewFitObjects",
    "access": "public",
    "description": "Flies the camera to fit the given objects in view.",
    "lineNumber": 1183,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "objectIds",
        "description": "IDs of the objects"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback invoked on completion"
      }
    ],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "viewFitAll",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#viewFitAll",
    "access": "public",
    "description": "Flies the camera to fit all objects in view.",
    "lineNumber": 1228,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback invoked on completion"
      }
    ],
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "jumpToObject",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#jumpToObject",
    "access": "public",
    "description": "Jumps the camera to fit the given object in view.",
    "lineNumber": 1247,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "objectId",
        "description": "ID of the object"
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "setCamera",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#setCamera",
    "access": "public",
    "description": "Sets the camera to the given position.",
    "lineNumber": 1279,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": true,
        "name": "params.eye",
        "description": "Eye position."
      },
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": true,
        "name": "params.look",
        "description": "Point of interest."
      },
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": true,
        "name": "params.up",
        "description": "Direction of \"up\"."
      }
    ],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "viewFitModels",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#viewFitModels",
    "access": "public",
    "description": "Fits the given models in view.",
    "lineNumber": 1300,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "modelIds",
        "description": "ID of the models."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "done",
        "description": "Callback invoked on completion. Will be animated if this is given, otherwise will be instantaneous."
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "openTab",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#openTab",
    "access": "public",
    "description": "Opens the specified viewer tab.\n\nThe available tabs are:\n\n * \"models\" - the Models tab, which lists the models available within the currently loaded project,\n * \"objects\" - the Objects tab, which contains a tree view for each loaded model, organized to indicate the containment hierarchy of their objects,\n * \"classes\" - the Classes tab, which contains a tree view for each loaded model, with nodes grouped by IFC types of their objects, and\n * \"storeys\" - the Storeys tab, which contains a tree view for each loaded model, with nodes grouped within ````IfcBuildingStoreys````, sub-grouped by their IFC types.",
    "lineNumber": 1352,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "tabId",
        "description": "ID of the tab to open - see method description."
      }
    ],
    "return": null
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "getOpenTab",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#getOpenTab",
    "access": "public",
    "description": "Returns the ID of the currently open viewer tab.\n\nThe available tabs are:\n\n * \"models\" - the Models tab, which lists the models available within the currently loaded project,\n * \"objects\" - the Objects tab, which contains a tree view for each loaded model, organized to indicate the containment hierarchy of their objects,\n * \"classes\" - the Classes tab, which contains a tree view for each loaded model, with nodes grouped by IFC types of their objects, and\n * \"storeys\" - the Storeys tab, which contains a tree view for each loaded model, with nodes grouped within ````IfcBuildingStoreys````, sub-grouped by their IFC types.\n * \"none\" - no tab is open; this is unlikely, since one of the above tabs should be open at a any time, but here for robustness.",
    "lineNumber": 1400,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "set3DEnabled",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#set3DEnabled",
    "access": "public",
    "description": "Switches the viewer between 2D and 3D viewing modes.",
    "lineNumber": 1434,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "Set true to switch into 3D mode, else false to switch into 2D mode."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback to invoke when switch complete. Supplying this callback causes an animated transition. Otherwise, the transition will be instant."
      }
    ],
    "return": null
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "get3DEnabled",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#get3DEnabled",
    "access": "public",
    "description": "Gets whether the viewer is in 3D or 2D viewing mode.",
    "lineNumber": 1447,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True when in 3D mode, else false."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True when in 3D mode, else false."
    },
    "params": []
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "selectStorey",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#selectStorey",
    "access": "public",
    "description": "Transitions the viewer into an isolated view of the given building storey.\n\nDoes nothing and logs an error if no object of the given ID is in the viewer, or if the object is not an ````IfcBuildingStorey````.",
    "lineNumber": 1459,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "storeyObjectId",
        "description": "ID of an ````IfcBuildingStorey```` object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "done",
        "description": "Optional callback to invoke on completion. When provided, the transition will be animated, with the camera flying into position. Otherwise, the transition will be instant, with the camera jumping into position."
      }
    ],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "saveBCFViewpoint",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#saveBCFViewpoint",
    "access": "public",
    "description": "Saves viewer state to a BCF viewpoint.\n\nThis does not save information about the project and model(s) that are currently loaded. When loading the viewpoint,\nthe viewer will assume that the same project and models will be currently loaded (the BCF viewpoint specification\ndoes not contain that information).\n\nNote that xeokit's {@link Camera#look} is the **point-of-interest**, whereas the BCF ````camera_direction```` is a\ndirection vector. Therefore, we save ````camera_direction```` as the vector from {@link Camera#eye} to {@link Camera#look}.",
    "examples": [
      "\nconst viewpoint = bimViewer.saveBCFViewpoint({\n    spacesVisible: false,          // Default\n    spaceBoundariesVisible: false, // Default\n    openingsVisible: false         // Default\n});\n\n// viewpoint will resemble the following:\n\n{\n    perspective_camera: {\n        camera_view_point: {\n            x: 0.0,\n            y: 0.0,\n            z: 0.0\n        },\n        camera_direction: {\n            x: 1.0,\n            y: 1.0,\n            z: 2.0\n        },\n        camera_up_vector: {\n            x: 0.0,\n            y: 0.0,\n            z: 1.0\n        },\n        field_of_view: 90.0\n    },\n    lines: [],\n    clipping_planes: [{\n        location: {\n            x: 0.5,\n            y: 0.5,\n            z: 0.5\n        },\n        direction: {\n            x: 1.0,\n            y: 0.0,\n            z: 0.0\n        }\n    }],\n    bitmaps: [],\n    snapshot: {\n        snapshot_type: png,\n        snapshot_data: \"data:image/png;base64,......\"\n    },\n    components: {\n        visibility: {\n            default_visibility: false,\n            exceptions: [{\n                ifc_guid: 4$cshxZO9AJBebsni$z9Yk,\n                originating_system: xeokit.io,\n                authoring_tool_id: xeokit/v1.0\n            }]\n       },\n        selection: [{\n           ifc_guid: \"4$cshxZO9AJBebsni$z9Yk\",\n        }]\n    }\n}"
    ],
    "lineNumber": 1550,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} BCF JSON viewpoint object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Options for getting the viewpoint."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.spacesVisible",
        "description": "Indicates whether ````IfcSpace```` types should be forced visible in the viewpoint."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.openingsVisible",
        "description": "Indicates whether ````IfcOpening```` types should be forced visible in the viewpoint."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.spaceBoundariesVisible",
        "description": "Indicates whether the boundaries of ````IfcSpace```` types should be visible in the viewpoint."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "BCF JSON viewpoint object"
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "loadBCFViewpoint",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#loadBCFViewpoint",
    "access": "public",
    "description": "Sets viewer state to the given BCF viewpoint.\n\nThis assumes that the viewer currently contains the same project and model(s) that were loaded at the time that the\nviewpoint was originally saved (the BCF viewpoint specification does not contain that information).\n\nNote that xeokit's {@link Camera#look} is the **point-of-interest**, whereas the BCF ````camera_direction```` is a\ndirection vector. Therefore, when loading a BCF viewpoint, we set {@link Camera#look} to the absolute position\nobtained by offsetting the BCF ````camera_view_point````  along ````camera_direction````.\n\nWhen loading a viewpoint, we also have the option to find {@link Camera#look} as the closest point of intersection\n(on the surface of any visible and pickable {@link Entity}) with a 3D ray fired from ````camera_view_point```` in\nthe direction of ````camera_direction````.",
    "lineNumber": 1576,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "bcfViewpoint",
        "description": "BCF JSON viewpoint object or \"reset\" / \"RESET\" to reset the viewer, which clears SectionPlanes,\nshows default visible entities and restores camera to initial default position."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Options for setting the viewpoint."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.rayCast",
        "description": "When ````true```` (default), will attempt to set {@link Camera#look} to the closest\npoint of surface intersection with a ray fired from the BCF ````camera_view_point```` in the direction of ````camera_direction````."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.immediate",
        "description": "When ````true```` (default), immediately set camera position."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.duration",
        "description": "Flight duration in seconds.  Overrides {@link CameraFlightAnimation#duration}."
      }
    ],
    "return": null
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "resetView",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#resetView",
    "access": "public",
    "description": "Resets the view.\n\nThis resets object appearances (visibility, selection, highlight and X-ray), sets camera to\ndefault position, and removes section planes.",
    "lineNumber": 1590,
    "params": [],
    "return": null
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "setControlsEnabled",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#setControlsEnabled",
    "access": "public",
    "description": "Enables or disables the various buttons and controls throughout the viewer.\n\nThis also makes various buttons appear disabled.",
    "lineNumber": 1601,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "Whether or not to disable the controls."
      }
    ],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "setKeyboardEnabled",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#setKeyboardEnabled",
    "access": "public",
    "description": "Sets whether or not keyboard camera control is enabled.\n\nThis is useful when we don't want key events over the canvas to clash with other UI elements outside the canvas.\n\nDefault value is ````true````.",
    "lineNumber": 1631,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "Set ````true```` to enable keyboard input."
      }
    ],
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "getKeyboardEnabled",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#getKeyboardEnabled",
    "access": "public",
    "description": "Gets whether keyboard camera control is enabled.\n\nThis is useful when we don't want key events over the canvas to clash with other UI elements outside the canvas.\n\nDefault value is ````true````.",
    "lineNumber": 1644,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Returns ````true```` if keyboard input is enabled."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Returns ````true```` if keyboard input is enabled."
    },
    "params": []
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#destroy",
    "access": "public",
    "description": "Destroys the viewer, freeing all resources.",
    "lineNumber": 1651,
    "params": [],
    "return": null
  },
  {
    "__docId__": 127,
    "kind": "file",
    "name": "src/BusyModal.js",
    "content": "import {Controller} from \"./Controller.js\";\r\n\r\n/** @private */\r\nclass BusyModal extends Controller {\r\n\r\n    constructor(parent, cfg = {}) {\r\n\r\n        super(parent, cfg);\r\n\r\n        const busyModalBackdropElement = cfg.busyModalBackdropElement || document.body;\r\n\r\n        if (!busyModalBackdropElement) {\r\n            throw \"Missing config: busyModalBackdropElement\";\r\n        }\r\n\r\n        this._modal = document.createElement(\"div\");\r\n        this._modal.classList.add(\"xeokit-busy-modal\");\r\n        this._modal.innerHTML = '<div class=\"xeokit-busy-modal-content\"><div class=\"xeokit-busy-modal-body\"><div class=\"xeokit-busy-modal-message\">Default text</div></div></div>';\r\n\r\n        busyModalBackdropElement.appendChild(this._modal);\r\n\r\n        this._modalVisible = false;\r\n        this._modal.style.display = 'hidden';\r\n    }\r\n\r\n    show(message) {\r\n        this._modalVisible = true;\r\n        this._modal.querySelector('.xeokit-busy-modal-message').innerText = message;\r\n        this._modal.style.display = 'block';\r\n    }\r\n\r\n    hide() {\r\n        this._modalVisible = false;\r\n        this._modal.style.display = 'none';\r\n    }\r\n\r\n    destroy() {\r\n        super.destroy();\r\n        if (this._modal) {\r\n            this._modal.parentNode.removeChild(this._modal);\r\n            this._modal = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport {BusyModal};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/BusyModal.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 128,
    "kind": "class",
    "name": "BusyModal",
    "memberof": "src/BusyModal.js",
    "static": true,
    "longname": "src/BusyModal.js~BusyModal",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/BusyModal.js",
    "importStyle": "{BusyModal}",
    "description": null,
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/BusyModal.js~BusyModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BusyModal.js~BusyModal#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "_modal",
    "memberof": "src/BusyModal.js~BusyModal",
    "static": false,
    "longname": "src/BusyModal.js~BusyModal#_modal",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "_modalVisible",
    "memberof": "src/BusyModal.js~BusyModal",
    "static": false,
    "longname": "src/BusyModal.js~BusyModal#_modalVisible",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "show",
    "memberof": "src/BusyModal.js~BusyModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BusyModal.js~BusyModal#show",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "hide",
    "memberof": "src/BusyModal.js~BusyModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BusyModal.js~BusyModal#hide",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/BusyModal.js~BusyModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BusyModal.js~BusyModal#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "file",
    "name": "src/contextMenus/CanvasContextMenu.js",
    "content": "import {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\r\nimport {ContextMenu} from \"@xeokit/xeokit-sdk/src/extras/ContextMenu/ContextMenu.js\";\r\n\r\n/**\r\n * @private\r\n */\r\nclass CanvasContextMenu extends ContextMenu {\r\n    constructor(cfg = {}) {\r\n        super({\r\n            context: cfg.context,\r\n            items: [\r\n                [\r\n                    {\r\n                        title: \"Hide All\",\r\n                        getEnabled: function (context) {\r\n                            return (context.viewer.scene.numVisibleObjects > 0);\r\n                        },\r\n                        doAction: function (context) {\r\n                            context.viewer.scene.setObjectsVisible(context.viewer.scene.visibleObjectIds, false);\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"Show all\",\r\n                        getEnabled: function (context) {\r\n                            const scene = context.viewer.scene;\r\n                            return ((scene.numVisibleObjects < scene.numObjects) || (context.viewer.scene.numXRayedObjects > 0));\r\n                        },\r\n                        doAction: function (context) {\r\n                            const scene = context.viewer.scene;\r\n                            scene.setObjectsVisible(scene.objectIds, true);\r\n                            scene.setObjectsXRayed(scene.xrayedObjectIds, false);\r\n                        }\r\n                    }\r\n                ],\r\n                [\r\n                    {\r\n                        title: \"View Fit All\",\r\n                        doAction: function (context) {\r\n                            const viewer = context.viewer;\r\n                            const scene = viewer.scene;\r\n                            const sceneAABB = scene.getAABB(scene.visibleObjectIds);\r\n                            viewer.cameraFlight.flyTo({\r\n                                aabb: sceneAABB,\r\n                                duration: 0.5\r\n                            });\r\n                            viewer.cameraControl.pivotPos = math.getAABB3Center(sceneAABB);\r\n                        }\r\n                    }\r\n                ],\r\n                [\r\n                    {\r\n                        title: \"X-Ray All\",\r\n                        getEnabled: function (context) {\r\n                            const scene = context.viewer.scene;\r\n                            return (scene.numXRayedObjects < scene.numObjects);\r\n                        },\r\n                        doAction: function (context) {\r\n                            const scene = context.viewer.scene;\r\n                            scene.setObjectsVisible(scene.objectIds, true);\r\n                            scene.setObjectsXRayed(scene.objectIds, true);\r\n                            scene.setObjectsPickable(scene.objectIds, false);\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"X-Ray None\",\r\n                        getEnabled: function (context) {\r\n                            return (context.viewer.scene.numXRayedObjects > 0);\r\n                        },\r\n                        doAction: function (context) {\r\n                            const xrayedObjectIds = context.viewer.scene.xrayedObjectIds;\r\n                            context.viewer.scene.setObjectsPickable(xrayedObjectIds, true);\r\n                            context.viewer.scene.setObjectsXRayed(xrayedObjectIds, false);\r\n                        }\r\n                    }\r\n                ],\r\n                [\r\n                    {\r\n                        title: \"Select None\",\r\n                        getEnabled: function (context) {\r\n                            return (context.viewer.scene.numSelectedObjects > 0);\r\n                        },\r\n                        doAction: function (context) {\r\n                            context.viewer.scene.setObjectsSelected(context.viewer.scene.selectedObjectIds, false);\r\n                        }\r\n                    }\r\n                ],\r\n                [\r\n                    {\r\n                        title: \"Reset View\",\r\n                        doAction: function (context) {\r\n                            context.bimViewer.resetView();\r\n                        }\r\n                    }\r\n                ]\r\n            ]\r\n        });\r\n    }\r\n}\r\n\r\nexport {CanvasContextMenu};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/contextMenus/CanvasContextMenu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 139,
    "kind": "class",
    "name": "CanvasContextMenu",
    "memberof": "src/contextMenus/CanvasContextMenu.js",
    "static": true,
    "longname": "src/contextMenus/CanvasContextMenu.js~CanvasContextMenu",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/contextMenus/CanvasContextMenu.js",
    "importStyle": "{CanvasContextMenu}",
    "description": "",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "@xeokit/xeokit-sdk/src/extras/ContextMenu/ContextMenu.js~ContextMenu"
    ],
    "ignore": true
  },
  {
    "__docId__": 140,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/contextMenus/CanvasContextMenu.js~CanvasContextMenu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/contextMenus/CanvasContextMenu.js~CanvasContextMenu#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 141,
    "kind": "file",
    "name": "src/contextMenus/ModelsContextMenu.js",
    "content": "import {ContextMenu} from \"@xeokit/xeokit-sdk/src/extras/ContextMenu/ContextMenu.js\";\r\n\r\n/**\r\n * @private\r\n */\r\nclass ModelsContextMenu extends ContextMenu {\r\n    constructor(cfg = {}) {\r\n        super({\r\n            context: cfg.context,\r\n            items: [\r\n                [\r\n                    {\r\n                        title: \"Load\",\r\n                        getEnabled: function (context) {\r\n                            return (!context.bimViewer.isModelLoaded(context.modelId));\r\n                        },\r\n                        doAction: function (context) {\r\n                            context.bimViewer.loadModel(context.modelId);\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"Unload\",\r\n                        getEnabled: function (context) {\r\n                            return context.bimViewer.isModelLoaded(context.modelId);\r\n                        },\r\n                        doAction: function (context) {\r\n                            context.bimViewer.unloadModel(context.modelId);\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"Load All\",\r\n                        getEnabled: function (context) {\r\n                            const bimViewer = context.bimViewer;\r\n                            const modelIds = bimViewer.getModelIds();\r\n                            const loadedModelIds = bimViewer.getLoadedModelIds();\r\n                            return (loadedModelIds.length < modelIds.length);\r\n                        },\r\n                        doAction: function (context) {\r\n                            context.bimViewer.loadAllModels();\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"Unload All\",\r\n                        getEnabled: function (context) {\r\n                            const loadedModelIds = context.bimViewer.getLoadedModelIds();\r\n                            return (loadedModelIds.length > 0);\r\n                        },\r\n                        doAction: function (context) {\r\n                            context.bimViewer.unloadAllModels();\r\n                        }\r\n                    }\r\n                ]\r\n            ]\r\n        })\r\n    }\r\n}\r\n\r\nexport {ModelsContextMenu};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/contextMenus/ModelsContextMenu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 142,
    "kind": "class",
    "name": "ModelsContextMenu",
    "memberof": "src/contextMenus/ModelsContextMenu.js",
    "static": true,
    "longname": "src/contextMenus/ModelsContextMenu.js~ModelsContextMenu",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/contextMenus/ModelsContextMenu.js",
    "importStyle": "{ModelsContextMenu}",
    "description": "",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "@xeokit/xeokit-sdk/src/extras/ContextMenu/ContextMenu.js~ContextMenu"
    ],
    "ignore": true
  },
  {
    "__docId__": 143,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/contextMenus/ModelsContextMenu.js~ModelsContextMenu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/contextMenus/ModelsContextMenu.js~ModelsContextMenu#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 144,
    "kind": "file",
    "name": "src/contextMenus/ObjectContextMenu.js",
    "content": "import {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\r\nimport {ContextMenu} from \"@xeokit/xeokit-sdk/src/extras/ContextMenu/ContextMenu.js\";\r\n\r\n/**\r\n * @private\r\n */\r\nclass ObjectContextMenu extends ContextMenu {\r\n    constructor(cfg = {}) {\r\n        super({\r\n            context: cfg.context,\r\n            items: [\r\n                [\r\n                    {\r\n                        title: \"View Fit\",\r\n                        doAction: function (context) {\r\n                            const viewer = context.viewer;\r\n                            const scene = viewer.scene;\r\n                            const entity = context.entity;\r\n                            viewer.cameraFlight.flyTo({\r\n                                aabb: entity.aabb,\r\n                                duration: 0.5\r\n                            }, () => {\r\n                                setTimeout(function () {\r\n                                    scene.setObjectsHighlighted(scene.highlightedObjectIds, false);\r\n                                }, 500);\r\n                            });\r\n                            viewer.cameraControl.pivotPos = math.getAABB3Center(entity.aabb);\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"View Fit All\",\r\n                        doAction: function (context) {\r\n                            const viewer = context.viewer;\r\n                            const scene = viewer.scene;\r\n                            const sceneAABB = scene.getAABB(scene.visibleObjectIds);\r\n                            viewer.cameraFlight.flyTo({\r\n                                aabb: sceneAABB,\r\n                                duration: 0.5\r\n                            });\r\n                            viewer.cameraControl.pivotPos = math.getAABB3Center(sceneAABB);\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"Show in Tree\",\r\n                        doAction: function (context) {\r\n                            const objectId = context.entity.id;\r\n                            context.showObjectInExplorers(objectId);\r\n                        }\r\n                    }\r\n                ],\r\n                [\r\n                    {\r\n                        title: \"Hide\",\r\n                        getEnabled: function (context) {\r\n                            return context.entity.visible;\r\n                        },\r\n                        doAction: function (context) {\r\n                            context.entity.visible = false;\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"Hide Others\",\r\n                        doAction: function (context) {\r\n                            const viewer = context.viewer;\r\n                            const scene = viewer.scene;\r\n                            const entity = context.entity;\r\n                            const metaObject = viewer.metaScene.metaObjects[entity.id];\r\n                            if (!metaObject) {\r\n                                return;\r\n                            }\r\n                            scene.setObjectsVisible(scene.visibleObjectIds, false);\r\n                            scene.setObjectsHighlighted(scene.highlightedObjectIds, false);\r\n                            metaObject.withMetaObjectsInSubtree((metaObject) => {\r\n                                const entity = scene.objects[metaObject.id];\r\n                                if (entity) {\r\n                                    entity.visible = true;\r\n                                }\r\n                            });\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"Hide All\",\r\n                        getEnabled: function (context) {\r\n                            return (context.viewer.scene.numVisibleObjects > 0);\r\n                        },\r\n                        doAction: function (context) {\r\n                            context.viewer.scene.setObjectsVisible(context.viewer.scene.visibleObjectIds, false);\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"Show All\",\r\n                        getEnabled: function (context) {\r\n                            const scene = context.viewer.scene;\r\n                            return ((scene.numVisibleObjects < scene.numObjects) || (context.viewer.scene.numXRayedObjects > 0));\r\n                        },\r\n                        doAction: function (context) {\r\n                            const scene = context.viewer.scene;\r\n                            scene.setObjectsVisible(scene.objectIds, true);\r\n                            scene.setObjectsPickable(scene.xrayedObjectIds, true);\r\n                            scene.setObjectsXRayed(scene.xrayedObjectIds, false);\r\n                        }\r\n                    }\r\n                ],\r\n                [\r\n                    {\r\n                        title: \"X-Ray\",\r\n                        getEnabled: function (context) {\r\n                            return (!context.entity.xrayed);\r\n                        },\r\n                        doAction: function (context) {\r\n                            const entity = context.entity;\r\n                            entity.xrayed = true;\r\n                            entity.pickable = false;\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"X-Ray Others\",\r\n                        doAction: function (context) {\r\n                            const viewer = context.viewer;\r\n                            const scene = viewer.scene;\r\n                            const entity = context.entity;\r\n                            const metaObject = viewer.metaScene.metaObjects[entity.id];\r\n                            if (!metaObject) {\r\n                                return;\r\n                            }\r\n                            scene.setObjectsVisible(scene.objectIds, true);\r\n                            scene.setObjectsXRayed(scene.objectIds, true);\r\n                            scene.setObjectsPickable(scene.objectIds, false);\r\n                            scene.setObjectsHighlighted(scene.highlightedObjectIds, false);\r\n                            metaObject.withMetaObjectsInSubtree((metaObject) => {\r\n                                const entity = scene.objects[metaObject.id];\r\n                                if (entity) {\r\n                                    entity.xrayed = false;\r\n                                    entity.pickable = true;\r\n                                }\r\n                            });\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"X-Ray All\",\r\n                        getEnabled: function (context) {\r\n                            const scene = context.viewer.scene;\r\n                            return (scene.numXRayedObjects < scene.numObjects);\r\n                        },\r\n                        doAction: function (context) {\r\n                            const scene = context.viewer.scene;\r\n                            scene.setObjectsVisible(scene.objectIds, true);\r\n                            scene.setObjectsPickable(scene.objectIds, false);\r\n                            scene.setObjectsXRayed(scene.objectIds, true);\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"X-Ray None\",\r\n                        getEnabled: function (context) {\r\n                            return (context.viewer.scene.numXRayedObjects > 0);\r\n                        },\r\n                        doAction: function (context) {\r\n                            const scene = context.viewer.scene;\r\n                            const xrayedObjectIds = scene.xrayedObjectIds;\r\n                            scene.setObjectsPickable(xrayedObjectIds, true);\r\n                            scene.setObjectsXRayed(xrayedObjectIds, false);\r\n                        }\r\n                    }\r\n                ],\r\n                [\r\n                    {\r\n                        title: \"Select\",\r\n                        getEnabled: function (context) {\r\n                            return (!context.entity.selected);\r\n                        },\r\n                        doAction: function (context) {\r\n                            context.entity.selected = true;\r\n\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"Undo Select\",\r\n                        getEnabled: function (context) {\r\n                            return context.entity.selected;\r\n                        },\r\n                        doAction: function (context) {\r\n                            context.entity.selected = false;\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"Select None\",\r\n                        getEnabled: function (context) {\r\n                            return (context.viewer.scene.numSelectedObjects > 0);\r\n                        },\r\n                        doAction: function (context) {\r\n                            context.viewer.scene.setObjectsSelected(context.viewer.scene.selectedObjectIds, false);\r\n                        }\r\n                    }\r\n                ]\r\n            ]\r\n        });\r\n    }\r\n};\r\n\r\nexport {ObjectContextMenu};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/contextMenus/ObjectContextMenu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 145,
    "kind": "class",
    "name": "ObjectContextMenu",
    "memberof": "src/contextMenus/ObjectContextMenu.js",
    "static": true,
    "longname": "src/contextMenus/ObjectContextMenu.js~ObjectContextMenu",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/contextMenus/ObjectContextMenu.js",
    "importStyle": "{ObjectContextMenu}",
    "description": "",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "@xeokit/xeokit-sdk/src/extras/ContextMenu/ContextMenu.js~ContextMenu"
    ],
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/contextMenus/ObjectContextMenu.js~ObjectContextMenu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/contextMenus/ObjectContextMenu.js~ObjectContextMenu#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 147,
    "kind": "file",
    "name": "src/contextMenus/TreeViewContextMenu.js",
    "content": "import {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\r\nimport {ContextMenu} from \"@xeokit/xeokit-sdk/src/extras/ContextMenu/ContextMenu.js\";\r\n\r\nconst tempVec3 = math.vec3();\r\n\r\n/**\r\n * @private\r\n */\r\nclass TreeViewContextMenu extends ContextMenu {\r\n    constructor(cfg = {}) {\r\n        super({\r\n            context: cfg.context,\r\n            items: [\r\n                [\r\n                    {\r\n                        title: \"Isolate\",\r\n                        doAction: function (context) {\r\n                            const viewer = context.viewer;\r\n                            const scene = viewer.scene;\r\n                            const objectIds = [];\r\n                            context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\r\n                                if (treeViewNode.objectId) {\r\n                                    objectIds.push(treeViewNode.objectId);\r\n                                }\r\n                            });\r\n                            const aabb = scene.getAABB(objectIds);\r\n\r\n                            viewer.cameraControl.pivotPos = math.getAABB3Center(aabb, tempVec3);\r\n\r\n                            scene.setObjectsXRayed(scene.xrayedObjectIds, false);\r\n                            scene.setObjectsVisible(scene.objectIds, false);\r\n                            scene.setObjectsPickable(scene.objectIds, false);\r\n                            scene.setObjectsSelected(scene.selectedObjectIds, false);\r\n\r\n                            scene.setObjectsVisible(objectIds, true);\r\n                            scene.setObjectsPickable(objectIds, true);\r\n\r\n                            viewer.cameraFlight.flyTo({\r\n                                aabb: aabb\r\n                            }, () => {\r\n                            });\r\n                        }\r\n                    }\r\n                ],\r\n                [\r\n                    {\r\n                        title: \"View Fit\",\r\n                        doAction: function (context) {\r\n                            const viewer = context.viewer;\r\n                            const scene = viewer.scene;\r\n                            const objectIds = [];\r\n                            context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\r\n                                if (treeViewNode.objectId) {\r\n                                    objectIds.push(treeViewNode.objectId);\r\n                                }\r\n                            });\r\n                            scene.setObjectsVisible(objectIds, true);\r\n                            scene.setObjectsHighlighted(objectIds, true);\r\n                            const aabb = scene.getAABB(objectIds);\r\n                            viewer.cameraFlight.flyTo({\r\n                                aabb: aabb,\r\n                                duration: 0.5\r\n                            }, () => {\r\n                                setTimeout(function () {\r\n                                    scene.setObjectsHighlighted(scene.highlightedObjectIds, false);\r\n                                }, 500);\r\n                            });\r\n                            viewer.cameraControl.pivotPos = math.getAABB3Center(aabb);\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"View Fit All\",\r\n                        doAction: function (context) {\r\n                            const viewer = context.viewer;\r\n                            const scene = viewer.scene;\r\n                            const sceneAABB = scene.getAABB(scene.visibleObjectIds);\r\n                            viewer.cameraFlight.flyTo({\r\n                                aabb: sceneAABB,\r\n                                duration: 0.5\r\n                            });\r\n                            viewer.cameraControl.pivotPos = math.getAABB3Center(sceneAABB);\r\n                        }\r\n                    }\r\n                ],\r\n                [\r\n                    {\r\n                        title: \"Hide\",\r\n                        doAction: function (context) {\r\n                            context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\r\n                                if (treeViewNode.objectId) {\r\n                                    const entity = context.viewer.scene.objects[treeViewNode.objectId];\r\n                                    if (entity) {\r\n                                        entity.visible = false;\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"Hide Others\",\r\n                        doAction: function (context) {\r\n                            const scene = context.viewer.scene;\r\n                            scene.setObjectsVisible(scene.visibleObjectIds, false);\r\n                            scene.setObjectsPickable(scene.xrayedObjectIds, true);\r\n                            scene.setObjectsXRayed(scene.xrayedObjectIds, false);\r\n                            scene.setObjectsHighlighted(scene.highlightedObjectIds, false);\r\n                            context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\r\n                                if (treeViewNode.objectId) {\r\n                                    const entity = scene.objects[treeViewNode.objectId];\r\n                                    if (entity) {\r\n                                        entity.visible = true;\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"Hide All\",\r\n                        getEnabled: function (context) {\r\n                            return (context.viewer.scene.visibleObjectIds.length > 0);\r\n                        },\r\n                        doAction: function (context) {\r\n                            context.viewer.scene.setObjectsVisible(context.viewer.scene.visibleObjectIds, false);\r\n                        }\r\n                    }\r\n                ],\r\n                [\r\n                    {\r\n                        title: \"Show\",\r\n                        doAction: function (context) {\r\n                            context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\r\n                                if (treeViewNode.objectId) {\r\n                                    const entity = context.viewer.scene.objects[treeViewNode.objectId];\r\n                                    if (entity) {\r\n                                        entity.visible = true;\r\n                                        if (entity.xrayed) {\r\n                                            entity.pickable = true;\r\n                                        }\r\n                                        entity.xrayed = false;\r\n                                        entity.selected = false;\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"Show Others\",\r\n                        doAction: function (context) {\r\n                            const scene = context.viewer.scene;\r\n                            scene.setObjectsVisible(scene.objectIds, true);\r\n                            scene.setObjectsPickable(scene.xrayedObjectIds, true);\r\n                            scene.setObjectsXRayed(scene.xrayedObjectIds, false);\r\n                            context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\r\n                                if (treeViewNode.objectId) {\r\n                                    const entity = scene.objects[treeViewNode.objectId];\r\n                                    if (entity) {\r\n                                        entity.visible = false;\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"Show All\",\r\n                        getEnabled: function (context) {\r\n                            const scene = context.viewer.scene;\r\n                            return ((scene.numVisibleObjects < scene.numObjects) || (context.viewer.scene.numXRayedObjects > 0));\r\n                        },\r\n                        doAction: function (context) {\r\n                            const scene = context.viewer.scene;\r\n                            scene.setObjectsVisible(scene.objectIds, true);\r\n                            scene.setObjectsPickable(scene.xrayedObjectIds, true);\r\n                            scene.setObjectsXRayed(scene.xrayedObjectIds, false);\r\n                        }\r\n                    }\r\n                ],\r\n                [\r\n                    {\r\n                        title: \"X-Ray\",\r\n                        doAction: function (context) {\r\n                            context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\r\n                                if (treeViewNode.objectId) {\r\n                                    const entity = context.viewer.scene.objects[treeViewNode.objectId];\r\n                                    if (entity) {\r\n                                        entity.xrayed = true;\r\n                                        entity.visible = true;\r\n                                        entity.pickable = false;\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"Undo X-Ray\",\r\n                        doAction: function (context) {\r\n                            context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\r\n                                if (treeViewNode.objectId) {\r\n                                    const entity = context.viewer.scene.objects[treeViewNode.objectId];\r\n                                    if (entity) {\r\n                                        entity.xrayed = false;\r\n                                        entity.pickable = true;\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"X-Ray Others\",\r\n                        doAction: function (context) {\r\n                            const scene = context.viewer.scene;\r\n                            scene.setObjectsVisible(scene.objectIds, true);\r\n                            scene.setObjectsPickable(scene.objectIds, false);\r\n                            scene.setObjectsXRayed(scene.objectIds, true);\r\n                            scene.setObjectsHighlighted(scene.highlightedObjectIds, false);\r\n                            context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\r\n                                if (treeViewNode.objectId) {\r\n                                    const entity = scene.objects[treeViewNode.objectId];\r\n                                    if (entity) {\r\n                                        entity.xrayed = false;\r\n                                        entity.pickable = true;\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"X-Ray All\",\r\n                        doAction: function (context) {\r\n                            const scene = context.viewer.scene;\r\n                            scene.setObjectsVisible(scene.objectIds, true);\r\n                            scene.setObjectsXRayed(scene.objectIds, true);\r\n                            scene.setObjectsPickable(scene.objectIds, false);\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"X-Ray None\",\r\n                        getEnabled: function (context) {\r\n                            return (context.viewer.scene.numXRayedObjects > 0);\r\n                        },\r\n                        doAction: function (context) {\r\n                            const scene = context.viewer.scene;\r\n                            const xrayedObjectIds = scene.xrayedObjectIds;\r\n                            scene.setObjectsPickable(xrayedObjectIds, true);\r\n                            scene.setObjectsXRayed(xrayedObjectIds, false);\r\n                        }\r\n                    }\r\n                ],\r\n                [\r\n                    {\r\n                        title: \"Select\",\r\n                        doAction: function (context) {\r\n                            context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\r\n                                if (treeViewNode.objectId) {\r\n                                    const entity = context.viewer.scene.objects[treeViewNode.objectId];\r\n                                    if (entity) {\r\n                                        entity.selected = true;\r\n                                        entity.visible = true;\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"Undo Select\",\r\n                        doAction: function (context) {\r\n                            context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\r\n                                if (treeViewNode.objectId) {\r\n                                    const entity = context.viewer.scene.objects[treeViewNode.objectId];\r\n                                    if (entity) {\r\n                                        entity.selected = false;\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                    },\r\n                    {\r\n                        title: \"Select None\",\r\n                        getEnabled: function (context) {\r\n                            return (context.viewer.scene.numSelectedObjects > 0);\r\n                        },\r\n                        doAction: function (context) {\r\n                            context.viewer.scene.setObjectsSelected(context.viewer.scene.selectedObjectIds, false);\r\n                        }\r\n                    }\r\n                ]\r\n            ]\r\n        })\r\n    }\r\n}\r\n\r\nexport {TreeViewContextMenu};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/contextMenus/TreeViewContextMenu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "name": "tempVec3",
    "memberof": "src/contextMenus/TreeViewContextMenu.js",
    "static": true,
    "longname": "src/contextMenus/TreeViewContextMenu.js~tempVec3",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-bim-viewer/src/contextMenus/TreeViewContextMenu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 149,
    "kind": "class",
    "name": "TreeViewContextMenu",
    "memberof": "src/contextMenus/TreeViewContextMenu.js",
    "static": true,
    "longname": "src/contextMenus/TreeViewContextMenu.js~TreeViewContextMenu",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/contextMenus/TreeViewContextMenu.js",
    "importStyle": "{TreeViewContextMenu}",
    "description": "",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "@xeokit/xeokit-sdk/src/extras/ContextMenu/ContextMenu.js~ContextMenu"
    ],
    "ignore": true
  },
  {
    "__docId__": 150,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/contextMenus/TreeViewContextMenu.js~TreeViewContextMenu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/contextMenus/TreeViewContextMenu.js~TreeViewContextMenu#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 151,
    "kind": "file",
    "name": "src/Controller.js",
    "content": "import {Map} from \"@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js\";\r\nimport {utils} from \"@xeokit/xeokit-sdk/src/viewer/scene/utils.js\";\r\n\r\n/** @private */\r\nclass Controller {\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    constructor(parent, cfg, server, viewer) {\r\n\r\n        this.bimViewer = (parent ? (parent.bimViewer || parent) : this);\r\n        this.server = parent ? parent.server : server;\r\n        this.viewer = parent ? parent.viewer : viewer;\r\n\r\n        this._children = [];\r\n\r\n        if (parent) {\r\n            parent._children.push(this);\r\n        }\r\n\r\n        this._subIdMap = null; // Subscription subId pool\r\n        this._subIdEvents = null; // Subscription subIds mapped to event names\r\n        this._eventSubs = null; // Event names mapped to subscribers\r\n        this._events = null; // Maps names to events\r\n        this._eventCallDepth = 0; // Helps us catch stack overflows from recursive events\r\n\r\n        this._enabled = null; // Used by #setEnabled() and #getEnabled()\r\n        this._active = null; // Used by #setActive() and #getActive()\r\n    }\r\n\r\n    /**\r\n     * Fires an event on this Controller.\r\n     *\r\n     * @protected\r\n     *\r\n     * @param {String} event The event type name\r\n     * @param {Object} value The event parameters\r\n     * @param {Boolean} [forget=false] When true, does not retain for subsequent subscribers\r\n     */\r\n    fire(event, value, forget) {\r\n        if (!this._events) {\r\n            this._events = {};\r\n        }\r\n        if (!this._eventSubs) {\r\n            this._eventSubs = {};\r\n        }\r\n        if (forget !== true) {\r\n            this._events[event] = value || true; // Save notification\r\n        }\r\n        const subs = this._eventSubs[event];\r\n        let sub;\r\n        if (subs) { // Notify subscriptions\r\n            for (const subId in subs) {\r\n                if (subs.hasOwnProperty(subId)) {\r\n                    sub = subs[subId];\r\n                    this._eventCallDepth++;\r\n                    if (this._eventCallDepth < 300) {\r\n                        sub.callback.call(sub.scope, value);\r\n                    } else {\r\n                        this.error(\"fire: potential stack overflow from recursive event '\" + event + \"' - dropping this event\");\r\n                    }\r\n                    this._eventCallDepth--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Subscribes to an event on this Controller.\r\n     *\r\n     * The callback is be called with this component as scope.\r\n     *\r\n     * @param {String} event The event\r\n     * @param {Function} callback Called fired on the event\r\n     * @param {Object} [scope=this] Scope for the callback\r\n     * @return {String} Handle to the subscription, which may be used to unsubscribe with {@link #off}.\r\n     */\r\n    on(event, callback, scope) {\r\n        if (!this._events) {\r\n            this._events = {};\r\n        }\r\n        if (!this._subIdMap) {\r\n            this._subIdMap = new Map(); // Subscription subId pool\r\n        }\r\n        if (!this._subIdEvents) {\r\n            this._subIdEvents = {};\r\n        }\r\n        if (!this._eventSubs) {\r\n            this._eventSubs = {};\r\n        }\r\n        let subs = this._eventSubs[event];\r\n        if (!subs) {\r\n            subs = {};\r\n            this._eventSubs[event] = subs;\r\n        }\r\n        const subId = this._subIdMap.addItem(); // Create unique subId\r\n        subs[subId] = {\r\n            callback: callback,\r\n            scope: scope || this\r\n        };\r\n        this._subIdEvents[subId] = event;\r\n        const value = this._events[event];\r\n        if (value !== undefined) { // A publication exists, notify callback immediately\r\n            callback.call(scope || this, value);\r\n        }\r\n        return subId;\r\n    }\r\n\r\n    /**\r\n     * Cancels an event subscription that was previously made with {@link Controller#on} or {@link Controller#once}.\r\n     *\r\n     * @param {String} subId Subscription ID\r\n     */\r\n    off(subId) {\r\n        if (subId === undefined || subId === null) {\r\n            return;\r\n        }\r\n        if (!this._subIdEvents) {\r\n            return;\r\n        }\r\n        const event = this._subIdEvents[subId];\r\n        if (event) {\r\n            delete this._subIdEvents[subId];\r\n            const subs = this._eventSubs[event];\r\n            if (subs) {\r\n                delete subs[subId];\r\n            }\r\n            this._subIdMap.removeItem(subId); // Release subId\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Subscribes to the next occurrence of the given event, then un-subscribes as soon as the event is handled.\r\n     *\r\n     * This is equivalent to calling {@link Controller#on}, and then calling {@link Controller#off} inside the callback function.\r\n     *\r\n     * @param {String} event Data event to listen to\r\n     * @param {Function} callback Called when fresh data is available at the event\r\n     * @param {Object} [scope=this] Scope for the callback\r\n     */\r\n    once(event, callback, scope) {\r\n        const self = this;\r\n        const subId = this.on(event,\r\n            function (value) {\r\n                self.off(subId);\r\n                callback.call(scope || this, value);\r\n            },\r\n            scope);\r\n    }\r\n\r\n    /**\r\n     * Logs a console debugging message for this Controller.\r\n     *\r\n     * The console message will have this format: *````[LOG] [<component type> <component id>: <message>````*\r\n     *\r\n     * @protected\r\n     *\r\n     * @param {String} message The message to log\r\n     */\r\n    log(message) {\r\n        message = \"[LOG] \" + message;\r\n        window.console.log(message);\r\n    }\r\n\r\n    /**\r\n     * Logs a warning for this Controller to the JavaScript console.\r\n     *\r\n     * The console message will have this format: *````[WARN] [<component type> =<component id>: <message>````*\r\n     *\r\n     * @protected\r\n     *\r\n     * @param {String} message The message to log\r\n     */\r\n    warn(message) {\r\n        message = \"[WARN] \" + message;\r\n        window.console.warn(message);\r\n    }\r\n\r\n    /**\r\n     * Logs an error for this Controller to the JavaScript console.\r\n     *\r\n     * The console message will have this format: *````[ERROR] [<component type> =<component id>: <message>````*\r\n     *\r\n     * @protected\r\n     *\r\n     * @param {String} message The message to log\r\n     */\r\n    error(message) {\r\n        message = \"[ERROR] \" + message;\r\n        window.console.error(message);\r\n    }\r\n\r\n    _mutexActivation(controllers) {\r\n        const numControllers = controllers.length;\r\n        for (let i = 0; i < numControllers; i++) {\r\n            const controller = controllers[i];\r\n            controller.on(\"active\", (function () {\r\n                const _i = i;\r\n                return function (active) {\r\n                    if (!active) {\r\n                        return;\r\n                    }\r\n                    for (let j = 0; j < numControllers; j++) {\r\n                        if (j === _i) {\r\n                            continue;\r\n                        }\r\n                        controllers[j].setActive(false);\r\n                    }\r\n                };\r\n            })());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enables or disables this Controller.\r\n     *\r\n     * Fires an \"enabled\" event on update.\r\n     *\r\n     * @protected\r\n     *\r\n     *\r\n     * @param {boolean} enabled Whether or not to enable.\r\n     */\r\n    setEnabled(enabled) {\r\n        if (this._enabled === enabled) {\r\n            return;\r\n        }\r\n        this._enabled = enabled;\r\n        this.fire(\"enabled\", this._enabled);\r\n    }\r\n\r\n    /**\r\n     * Gets whether or not this Controller is enabled.\r\n     *\r\n     * @protected\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    getEnabled() {\r\n        return this._enabled;\r\n    }\r\n\r\n    /**\r\n     * Activates or deactivates this Controller.\r\n     *\r\n     * Fires an \"active\" event on update.\r\n     *\r\n     * @protected\r\n     *\r\n     * @param {boolean} active Whether or not to activate.\r\n     */\r\n    setActive(active) {\r\n        if (this._active === active) {\r\n            return;\r\n        }\r\n        this._active = active;\r\n        this.fire(\"active\", this._active);\r\n    }\r\n\r\n    /**\r\n     * Gets whether or not this Controller is active.\r\n     *\r\n     * @protected\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    getActive() {\r\n        return this._active;\r\n    }\r\n\r\n    /**\r\n     * Destroys this Controller.\r\n     *\r\n     * @protected\r\n     *\r\n     */\r\n    destroy() {\r\n        if (this.destroyed) {\r\n            return;\r\n        }\r\n        /**\r\n         * Fired when this Controller is destroyed.\r\n         * @event destroyed\r\n         */\r\n        this.fire(\"destroyed\", this.destroyed = true);\r\n        this._subIdMap = null;\r\n        this._subIdEvents = null;\r\n        this._eventSubs = null;\r\n        this._events = null;\r\n        this._eventCallDepth = 0;\r\n        for (let i = 0, len = this._children.length; i < len; i++) {\r\n            this._children.destroy();\r\n        }\r\n        this._children = [];\r\n    }\r\n}\r\n\r\nexport {Controller};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/Controller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 152,
    "kind": "class",
    "name": "Controller",
    "memberof": "src/Controller.js",
    "static": true,
    "longname": "src/Controller.js~Controller",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/Controller.js",
    "importStyle": "{Controller}",
    "description": null,
    "lineNumber": 5,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#constructor",
    "access": "protected",
    "description": "",
    "lineNumber": 10,
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "member",
    "name": "bimViewer",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#bimViewer",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "member",
    "name": "server",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#server",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "member",
    "name": "viewer",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#viewer",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "_children",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#_children",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "_subIdMap",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#_subIdMap",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "_subIdEvents",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#_subIdEvents",
    "access": "private",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "_eventSubs",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#_eventSubs",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "_events",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#_events",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "_eventCallDepth",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#_eventCallDepth",
    "access": "private",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "_enabled",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#_enabled",
    "access": "private",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "_active",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#_active",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "fire",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#fire",
    "access": "protected",
    "description": "Fires an event on this Controller.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event type name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The event parameters"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "forget",
        "description": "When true, does not retain for subsequent subscribers"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "on",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#on",
    "access": "public",
    "description": "Subscribes to an event on this Controller.\n\nThe callback is be called with this component as scope.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called fired on the event"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this",
        "defaultRaw": "this",
        "name": "scope",
        "description": "Scope for the callback"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Handle to the subscription, which may be used to unsubscribe with {@link #off}."
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "off",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#off",
    "access": "public",
    "description": "Cancels an event subscription that was previously made with {@link Controller#on} or {@link Controller#once}.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "subId",
        "description": "Subscription ID"
      }
    ],
    "return": null
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "once",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#once",
    "access": "public",
    "description": "Subscribes to the next occurrence of the given event, then un-subscribes as soon as the event is handled.\n\nThis is equivalent to calling {@link Controller#on}, and then calling {@link Controller#off} inside the callback function.",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Data event to listen to"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called when fresh data is available at the event"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this",
        "defaultRaw": "this",
        "name": "scope",
        "description": "Scope for the callback"
      }
    ],
    "return": null
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "log",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#log",
    "access": "protected",
    "description": "Logs a console debugging message for this Controller.\n\nThe console message will have this format: *````[LOG] [<component type> <component id>: <message>````*",
    "lineNumber": 161,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to log"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "warn",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#warn",
    "access": "protected",
    "description": "Logs a warning for this Controller to the JavaScript console.\n\nThe console message will have this format: *````[WARN] [<component type> =<component id>: <message>````*",
    "lineNumber": 175,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to log"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "error",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#error",
    "access": "protected",
    "description": "Logs an error for this Controller to the JavaScript console.\n\nThe console message will have this format: *````[ERROR] [<component type> =<component id>: <message>````*",
    "lineNumber": 189,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to log"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "_mutexActivation",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#_mutexActivation",
    "access": "private",
    "description": null,
    "lineNumber": 194,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "controllers",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "setEnabled",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#setEnabled",
    "access": "protected",
    "description": "Enables or disables this Controller.\n\nFires an \"enabled\" event on update.",
    "lineNumber": 225,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "Whether or not to enable."
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "getEnabled",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#getEnabled",
    "access": "protected",
    "description": "Gets whether or not this Controller is enabled.",
    "lineNumber": 240,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "setActive",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#setActive",
    "access": "protected",
    "description": "Activates or deactivates this Controller.\n\nFires an \"active\" event on update.",
    "lineNumber": 253,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "active",
        "description": "Whether or not to activate."
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "getActive",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#getActive",
    "access": "protected",
    "description": "Gets whether or not this Controller is active.",
    "lineNumber": 268,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#destroy",
    "access": "protected",
    "description": "Destroys this Controller.",
    "lineNumber": 278,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 192,
    "kind": "file",
    "name": "src/explorer/ClassesExplorer.js",
    "content": "import {Controller} from \"../Controller.js\";\r\nimport {TreeViewPlugin} from \"@xeokit/xeokit-sdk/src/plugins/TreeViewPlugin/TreeViewPlugin.js\";\r\nimport {TreeViewContextMenu} from \"../contextMenus/TreeViewContextMenu.js\";\r\nimport {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\r\n\r\nconst tempVec3 = math.vec3();\r\n\r\n/** @private */\r\nclass ClassesExplorer extends Controller {\r\n\r\n    constructor(parent, cfg = {}) {\r\n\r\n        super(parent);\r\n\r\n        if (!cfg.classesTabElement) {\r\n            throw \"Missing config: classesTabElement\";\r\n        }\r\n\r\n        if (!cfg.showAllClassesButtonElement) {\r\n            throw \"Missing config: showAllClassesButtonElement\";\r\n        }\r\n\r\n        if (!cfg.hideAllClassesButtonElement) {\r\n            throw \"Missing config: hideAllClassesButtonElement\";\r\n        }\r\n\r\n        if (!cfg.classesElement) {\r\n            throw \"Missing config: classesElement\";\r\n        }\r\n\r\n        this._classesTabElement = cfg.classesTabElement;\r\n        this._showAllClassesButtonElement = cfg.showAllClassesButtonElement;\r\n        this._hideAllClassesButtonElement = cfg.hideAllClassesButtonElement;\r\n        this._classesTabButtonElement = this._classesTabElement.querySelector(\".xeokit-tab-btn\");\r\n\r\n        if (!this._classesTabButtonElement) {\r\n            throw \"Missing DOM element: xeokit-tab-btn\";\r\n        }\r\n\r\n        const classesElement = cfg.classesElement;\r\n\r\n        this._treeView = new TreeViewPlugin(this.viewer, {\r\n            containerElement: classesElement,\r\n            hierarchy: \"types\",\r\n            autoAddModels: false,\r\n            pruneEmptyNodes: true\r\n        });\r\n\r\n        this._treeViewContextMenu = new TreeViewContextMenu();\r\n\r\n        this._treeView.on(\"contextmenu\", (e) => {\r\n            this._treeViewContextMenu.context = {\r\n                viewer: e.viewer,\r\n                treeViewPlugin: e.treeViewPlugin,\r\n                treeViewNode: e.treeViewNode\r\n            };\r\n            this._treeViewContextMenu.show(e.event.pageX, e.event.pageY);\r\n        });\r\n\r\n        this._treeView.on(\"nodeTitleClicked\", (e) => {\r\n            const scene = this.viewer.scene;\r\n            const objectIds = [];\r\n            e.treeViewPlugin.withNodeTree(e.treeViewNode, (treeViewNode) => {\r\n                if (treeViewNode.objectId) {\r\n                    objectIds.push(treeViewNode.objectId);\r\n                }\r\n            });\r\n            const checked = e.treeViewNode.checked;\r\n            if (checked) {\r\n                scene.setObjectsXRayed(objectIds, false);\r\n                scene.setObjectsVisible(objectIds, false);\r\n                scene.setObjectsPickable(objectIds, true);\r\n            } else {\r\n                scene.setObjectsXRayed(objectIds, false);\r\n                scene.setObjectsVisible(objectIds, true);\r\n                scene.setObjectsPickable(objectIds, true);\r\n            }\r\n        });\r\n\r\n        this._onModelLoaded = this.viewer.scene.on(\"modelLoaded\", (modelId) =>{\r\n            if (this.viewer.metaScene.metaModels[modelId]) {\r\n                const modelInfo = this.bimViewer._modelsExplorer.getModelInfo(modelId);\r\n                if (!modelInfo) {\r\n                    return;\r\n                }\r\n                this._treeView.addModel(modelId, {\r\n                    rootName: modelInfo.name\r\n                });\r\n            }\r\n        });\r\n\r\n        this._onModelUnloaded = this.viewer.scene.on(\"modelUnloaded\", (modelId) => {\r\n            if (this.viewer.metaScene.metaModels[modelId]) {\r\n                this._treeView.removeModel(modelId);\r\n            }\r\n        });\r\n\r\n        this.bimViewer.on(\"reset\", () => {\r\n            this._treeView.collapse();\r\n        });\r\n    }\r\n\r\n    setEnabled(enabled) {\r\n        if (!enabled) {\r\n            this._classesTabButtonElement.classList.add(\"disabled\");\r\n            this._showAllClassesButtonElement.classList.add(\"disabled\");\r\n            this._hideAllClassesButtonElement.classList.add(\"disabled\");\r\n        } else {\r\n            this._classesTabButtonElement.classList.remove(\"disabled\");\r\n            this._showAllClassesButtonElement.classList.remove(\"disabled\");\r\n            this._hideAllClassesButtonElement.classList.remove(\"disabled\");\r\n        }\r\n    }\r\n\r\n    expandTreeViewToDepth(depth) {\r\n        this._treeView.expandToDepth(depth);\r\n    }\r\n\r\n    showNodeInTreeView(objectId) {\r\n        this._treeView.collapse();\r\n        this._treeView.showNode(objectId);\r\n    }\r\n\r\n    unShowNodeInTreeView() {\r\n        this._treeView.unShowNode();\r\n    }\r\n\r\n    destroy() {\r\n        super.destroy();\r\n        this._treeView.destroy();\r\n        this._treeViewContextMenu.destroy();\r\n        this.viewer.scene.off(this._onModelLoaded);\r\n        this.viewer.scene.off(this._onModelUnloaded);\r\n    }\r\n}\r\n\r\nexport {ClassesExplorer};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/explorer/ClassesExplorer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 193,
    "kind": "variable",
    "name": "tempVec3",
    "memberof": "src/explorer/ClassesExplorer.js",
    "static": true,
    "longname": "src/explorer/ClassesExplorer.js~tempVec3",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-bim-viewer/src/explorer/ClassesExplorer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 194,
    "kind": "class",
    "name": "ClassesExplorer",
    "memberof": "src/explorer/ClassesExplorer.js",
    "static": true,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/explorer/ClassesExplorer.js",
    "importStyle": "{ClassesExplorer}",
    "description": null,
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 195,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 196,
    "kind": "member",
    "name": "_classesTabElement",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#_classesTabElement",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "_showAllClassesButtonElement",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#_showAllClassesButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "_hideAllClassesButtonElement",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#_hideAllClassesButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "_classesTabButtonElement",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#_classesTabButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "_treeView",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#_treeView",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "_treeViewContextMenu",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#_treeViewContextMenu",
    "access": "private",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "_onModelLoaded",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#_onModelLoaded",
    "access": "private",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "member",
    "name": "_onModelUnloaded",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#_onModelUnloaded",
    "access": "private",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "setEnabled",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#setEnabled",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "expandTreeViewToDepth",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#expandTreeViewToDepth",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [
      {
        "name": "depth",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "showNodeInTreeView",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#showNodeInTreeView",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [
      {
        "name": "objectId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "unShowNodeInTreeView",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#unShowNodeInTreeView",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 209,
    "kind": "file",
    "name": "src/explorer/ModelsExplorer.js",
    "content": "import {Controller} from \"../Controller.js\";\r\nimport {XKTLoaderPlugin} from \"@xeokit/xeokit-sdk/src/plugins/XKTLoaderPlugin/XKTLoaderPlugin.js\";\r\nimport {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\r\nimport {ModelIFCObjectColors} from \"../IFCObjectDefaults/ModelIFCObjectColors.js\";\r\nimport {ViewerIFCObjectColors} from \"../IFCObjectDefaults/ViewerIFCObjectColors.js\";\r\nimport {ModelsContextMenu} from \"../contextMenus/ModelsContextMenu.js\";\r\n\r\nconst tempVec3 = math.vec3();\r\n\r\n/** @private */\r\nclass ModelsExplorer extends Controller {\r\n\r\n    constructor(parent, cfg) {\r\n\r\n        super(parent, cfg);\r\n\r\n        if (!cfg.modelsTabElement) {\r\n            throw \"Missing config: modelsTabElement\";\r\n        }\r\n\r\n        if (!cfg.unloadModelsButtonElement) {\r\n            throw \"Missing config: unloadModelsButtonElement\";\r\n        }\r\n\r\n        if (!cfg.modelsElement) {\r\n            throw \"Missing config: modelsElement\";\r\n        }\r\n\r\n        this._modelsTabElement = cfg.modelsTabElement;\r\n        this._unloadModelsButtonElement = cfg.unloadModelsButtonElement;\r\n        this._modelsElement = cfg.modelsElement;\r\n        this._modelsTabButtonElement = this._modelsTabElement.querySelector(\".xeokit-tab-btn\");\r\n\r\n        if (!this._modelsTabButtonElement) {\r\n            throw \"Missing DOM element: ,xeokit-tab-btn\";\r\n        }\r\n\r\n        this._xktLoader = new XKTLoaderPlugin(this.viewer, {\r\n            objectDefaults: ModelIFCObjectColors\r\n        });\r\n\r\n        this._modelsContextMenu = new ModelsContextMenu();\r\n\r\n        this._modelsInfo = {};\r\n        this._numModelsLoaded = 0;\r\n        this._projectId = null;\r\n    }\r\n\r\n    loadProject(projectId, done, error) {\r\n        this.server.getProject(projectId, (projectInfo) => {\r\n            this.unloadProject();\r\n            this._projectId = projectId;\r\n            this._modelsInfo = {};\r\n            this._parseProject(projectInfo, done);\r\n        }, (errMsg) => {\r\n            this.error(errMsg);\r\n            if (error) {\r\n                error(errMsg);\r\n            }\r\n        });\r\n    }\r\n\r\n    _parseProject(projectInfo, done) {\r\n        this._buildModelsMenu(projectInfo);\r\n        this._parseViewerConfigs(projectInfo);\r\n        this._parseViewerContent(projectInfo, () => {\r\n            this._parseViewerState(projectInfo, () => {\r\n                done();\r\n            });\r\n        });\r\n    }\r\n\r\n    _buildModelsMenu(projectInfo) {\r\n        var html = \"\";\r\n        const modelsInfo = projectInfo.models || [];\r\n        this._modelsInfo = {};\r\n        for (let i = 0, len = modelsInfo.length; i < len; i++) {\r\n            const modelInfo = modelsInfo[i];\r\n            this._modelsInfo[modelInfo.id] = modelInfo;\r\n            html += \"<div class='xeokit-form-check'>\";\r\n            html += \"<input id='\" + modelInfo.id + \"' type='checkbox' value=''><span id='span-\" + modelInfo.id + \"' class='disabled'>\" + modelInfo.name + \"</span>\";\r\n            html += \"</div>\";\r\n        }\r\n        this._modelsElement.innerHTML = html;\r\n        for (let i = 0, len = modelsInfo.length; i < len; i++) {\r\n            const modelInfo = modelsInfo[i];\r\n            const modelId = modelInfo.id;\r\n            const checkBox = document.getElementById(\"\" + modelId);\r\n            const span = document.getElementById(\"span-\" + modelId);\r\n            checkBox.addEventListener(\"click\", () => {\r\n                if (checkBox.checked) {\r\n                    this.loadModel(modelId);\r\n                } else {\r\n                    this.unloadModel(modelInfo.id);\r\n                }\r\n            });\r\n            span.addEventListener(\"click\", () => {\r\n                const model = this.viewer.scene.models[modelId];\r\n                const modelLoaded = (!!model);\r\n                if (!modelLoaded) {\r\n                    this.loadModel(modelId);\r\n                } else {\r\n                    this.unloadModel(modelInfo.id);\r\n                }\r\n            });\r\n            span.oncontextmenu = (e) => {\r\n                this._modelsContextMenu.context = {\r\n                    bimViewer: this.bimViewer,\r\n                    viewer: this.viewer,\r\n                    modelId: modelId\r\n                };\r\n                this._modelsContextMenu.show(e.pageX, e.pageY);\r\n                e.preventDefault();\r\n            };\r\n        }\r\n    }\r\n\r\n    _parseViewerConfigs(projectInfo) {\r\n        const viewerConfigs = projectInfo.viewerConfigs;\r\n        if (viewerConfigs) {\r\n            this.bimViewer.setConfigs(viewerConfigs);\r\n        }\r\n    }\r\n\r\n    _parseViewerContent(projectInfo, done) {\r\n        const viewerContent = projectInfo.viewerContent;\r\n        if (!viewerContent) {\r\n            done();\r\n            return;\r\n        }\r\n        this._parseModelsLoaded(viewerContent, () => {\r\n            done();\r\n        });\r\n    }\r\n\r\n    _parseModelsLoaded(viewerContent, done) {\r\n        const modelsLoaded = viewerContent.modelsLoaded;\r\n        if (!modelsLoaded || (modelsLoaded.length === 0)) {\r\n            done();\r\n            return;\r\n        }\r\n        this._loadNextModel(modelsLoaded.slice(0), done);\r\n    }\r\n\r\n    _loadNextModel(modelsLoaded, done) {\r\n        if (modelsLoaded.length === 0) {\r\n            done();\r\n            return;\r\n        }\r\n        const modelId = modelsLoaded.pop();\r\n        this.loadModel(modelId,\r\n            () => { // Done\r\n            this._loadNextModel(modelsLoaded, done);\r\n            },\r\n            () => { // Error - recover and attempt to load next model\r\n                this._loadNextModel(modelsLoaded, done);\r\n            });\r\n    }\r\n\r\n    _parseViewerState(projectInfo, done) {\r\n        const viewerState = projectInfo.viewerState;\r\n        if (!viewerState) {\r\n            done();\r\n            return;\r\n        }\r\n       this.bimViewer.setViewerState(viewerState, done);\r\n    }\r\n\r\n    unloadProject() {\r\n        if (!this._projectId) {\r\n            return;\r\n        }\r\n        const models = this.viewer.scene.models;\r\n        for (var modelId in models) {\r\n            if (models.hasOwnProperty(modelId)) {\r\n                const model = models[modelId];\r\n                model.destroy();\r\n            }\r\n        }\r\n        this._modelsElement.innerHTML = \"\";\r\n        this._numModelsLoaded = 0;\r\n        this._unloadModelsButtonElement.classList.add(\"disabled\");\r\n        const lastProjectId = this._projectId;\r\n        this._projectId = null;\r\n        this.fire(\"projectUnloaded\", {\r\n            projectId: lastProjectId\r\n        });\r\n    }\r\n\r\n    getLoadedProjectId() {\r\n        return this._projectId;\r\n    }\r\n\r\n    getModelIds() {\r\n        return Object.keys(this._modelsInfo);\r\n    }\r\n\r\n    loadModel(modelId, done, error) {\r\n        if (!this._projectId) {\r\n            const errMsg = \"No project currently loaded\";\r\n            this.error(errMsg);\r\n            if (error) {\r\n                error(errMsg);\r\n            }\r\n            return;\r\n        }\r\n        const modelInfo = this._modelsInfo[modelId];\r\n        if (!modelInfo) {\r\n            const errMsg = \"Model not in currently loaded project\";\r\n            this.error(errMsg);\r\n            if (error) {\r\n                error(errMsg);\r\n            }\r\n            return;\r\n        }\r\n        this.bimViewer._busyModal.show(\"Loading: \" + modelInfo.name);\r\n        this.server.getMetadata(this._projectId, modelId,\r\n            (json) => {\r\n                this.server.getGeometry(this._projectId, modelId,\r\n                    (arraybuffer) => {\r\n                        const objectColorSource = (modelInfo.objectColorSource || this.bimViewer.getObjectColorSource());\r\n                        const objectDefaults = (objectColorSource === \"model\") ? ModelIFCObjectColors : ViewerIFCObjectColors;\r\n                        const model = this._xktLoader.load({\r\n                            id: modelId,\r\n                            metaModelData: json,\r\n                            xkt: arraybuffer,\r\n                            objectDefaults: objectDefaults,\r\n                            excludeUnclassifiedObjects: true,\r\n                            position: modelInfo.position,\r\n                            scale: modelInfo.scale,\r\n                            rotation: modelInfo.rotation,\r\n                            matrix: modelInfo.matrix,\r\n                            edges: (modelInfo.edges !== false),\r\n                            saoEnabled: modelInfo.saoEnabled\r\n                        });\r\n                        model.on(\"loaded\", () => {\r\n                            const checkbox = document.getElementById(\"\" + modelId);\r\n                            checkbox.checked = true;\r\n                            const scene = this.viewer.scene;\r\n                            const aabb = scene.getAABB(scene.visibleObjectIds);\r\n                            this._numModelsLoaded++;\r\n                            this._unloadModelsButtonElement.classList.remove(\"disabled\");\r\n                            if (this._numModelsLoaded === 1) { // Jump camera to view-fit first model loaded\r\n                                this.viewer.cameraFlight.jumpTo({\r\n                                    aabb: aabb\r\n                                });\r\n                                this.viewer.cameraControl.pivotPos = math.getAABB3Center(aabb, tempVec3);\r\n                                this.fire(\"modelLoaded\", modelId);\r\n                                this.bimViewer._busyModal.hide();\r\n                                if (done) {\r\n                                    done();\r\n                                }\r\n                            } else {\r\n                                this.fire(\"modelLoaded\", modelId);\r\n                                this.bimViewer._busyModal.hide();\r\n                                if (done) {\r\n                                    done();\r\n                                }\r\n                            }\r\n                        });\r\n                    },\r\n                    (errMsg) => {\r\n                        this.bimViewer._busyModal.hide();\r\n                        this.error(errMsg);\r\n                        if (error) {\r\n                            error(errMsg);\r\n                        }\r\n                    });\r\n            },\r\n            (errMsg) => {\r\n                this.bimViewer._busyModal.hide();\r\n                this.error(errMsg);\r\n                if (error) {\r\n                    error(errMsg);\r\n                }\r\n            });\r\n    }\r\n\r\n    unloadModel(modelId) {\r\n        const model = this.viewer.scene.models[modelId];\r\n        if (!model) {\r\n            this.error(\"Model not loaded: \" + modelId);\r\n            return;\r\n        }\r\n        model.destroy();\r\n        const checkbox = document.getElementById(\"\" + modelId);\r\n        checkbox.checked = false;\r\n        const span = document.getElementById(\"span-\" + modelId);\r\n        this._numModelsLoaded--;\r\n        if (this._numModelsLoaded > 0) {\r\n            this._unloadModelsButtonElement.classList.remove(\"disabled\");\r\n        } else {\r\n            this._unloadModelsButtonElement.classList.add(\"disabled\");\r\n        }\r\n    }\r\n\r\n    unloadAllModels() {\r\n        const models = this.viewer.scene.models;\r\n        const modelIds = Object.keys(models);\r\n        for (var i = 0, len = modelIds.length; i < len; i++) {\r\n            const modelId = modelIds[i];\r\n            this.unloadModel(modelId);\r\n        }\r\n    }\r\n\r\n    getNumModelsLoaded() {\r\n        return this._numModelsLoaded;\r\n    }\r\n\r\n    _getLoadedModelIds() {\r\n        return Object.keys(this.viewer.scene.models);\r\n    }\r\n\r\n    isModelLoaded(modelId) {\r\n        return (!!this.viewer.scene.models[modelId]);\r\n    }\r\n\r\n    getModelsInfo() {\r\n        return this._modelsInfo;\r\n    }\r\n\r\n    getModelInfo(modelId) {\r\n        return this._modelsInfo[modelId];\r\n    }\r\n\r\n    setEnabled(enabled) {\r\n        if (!enabled) {\r\n            this._modelsTabButtonElement.classList.add(\"disabled\");\r\n            this._unloadModelsButtonElement.classList.add(\"disabled\");\r\n        } else {\r\n            this._modelsTabButtonElement.classList.remove(\"disabled\");\r\n            this._unloadModelsButtonElement.classList.remove(\"disabled\");\r\n        }\r\n    }\r\n\r\n    /** @private */\r\n    destroy() {\r\n        super.destroy();\r\n        this._xktLoader.destroy();\r\n    }\r\n}\r\n\r\nexport {ModelsExplorer};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/explorer/ModelsExplorer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 210,
    "kind": "variable",
    "name": "tempVec3",
    "memberof": "src/explorer/ModelsExplorer.js",
    "static": true,
    "longname": "src/explorer/ModelsExplorer.js~tempVec3",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-bim-viewer/src/explorer/ModelsExplorer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 211,
    "kind": "class",
    "name": "ModelsExplorer",
    "memberof": "src/explorer/ModelsExplorer.js",
    "static": true,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/explorer/ModelsExplorer.js",
    "importStyle": "{ModelsExplorer}",
    "description": null,
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 212,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "_modelsTabElement",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_modelsTabElement",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "_unloadModelsButtonElement",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_unloadModelsButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "_modelsElement",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_modelsElement",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "_modelsTabButtonElement",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_modelsTabButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "_xktLoader",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_xktLoader",
    "access": "private",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "_modelsContextMenu",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_modelsContextMenu",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "_modelsInfo",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_modelsInfo",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "_numModelsLoaded",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_numModelsLoaded",
    "access": "private",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "_projectId",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_projectId",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "loadProject",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#loadProject",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "projectId",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      },
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "_parseProject",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_parseProject",
    "access": "private",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "projectInfo",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "_buildModelsMenu",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_buildModelsMenu",
    "access": "private",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "projectInfo",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "_parseViewerConfigs",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_parseViewerConfigs",
    "access": "private",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "projectInfo",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "_parseViewerContent",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_parseViewerContent",
    "access": "private",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "projectInfo",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "_parseModelsLoaded",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_parseModelsLoaded",
    "access": "private",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "viewerContent",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "_loadNextModel",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_loadNextModel",
    "access": "private",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "modelsLoaded",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "_parseViewerState",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_parseViewerState",
    "access": "private",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "projectInfo",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "unloadProject",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#unloadProject",
    "access": "public",
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "getLoadedProjectId",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#getLoadedProjectId",
    "access": "public",
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "getModelIds",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#getModelIds",
    "access": "public",
    "description": null,
    "lineNumber": 194,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "loadModel",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#loadModel",
    "access": "public",
    "description": null,
    "lineNumber": 198,
    "undocument": true,
    "params": [
      {
        "name": "modelId",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      },
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "unloadModel",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#unloadModel",
    "access": "public",
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "params": [
      {
        "name": "modelId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "unloadAllModels",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#unloadAllModels",
    "access": "public",
    "description": null,
    "lineNumber": 297,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "getNumModelsLoaded",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#getNumModelsLoaded",
    "access": "public",
    "description": null,
    "lineNumber": 306,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "_getLoadedModelIds",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_getLoadedModelIds",
    "access": "private",
    "description": null,
    "lineNumber": 310,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "isModelLoaded",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#isModelLoaded",
    "access": "public",
    "description": null,
    "lineNumber": 314,
    "undocument": true,
    "params": [
      {
        "name": "modelId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "getModelsInfo",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#getModelsInfo",
    "access": "public",
    "description": null,
    "lineNumber": 318,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "getModelInfo",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#getModelInfo",
    "access": "public",
    "description": null,
    "lineNumber": 322,
    "undocument": true,
    "params": [
      {
        "name": "modelId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "setEnabled",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#setEnabled",
    "access": "public",
    "description": null,
    "lineNumber": 326,
    "undocument": true,
    "params": [
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#destroy",
    "access": "private",
    "description": null,
    "lineNumber": 337,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 248,
    "kind": "file",
    "name": "src/explorer/ObjectsExplorer.js",
    "content": "import {Controller} from \"../Controller.js\";\r\nimport {TreeViewPlugin} from \"@xeokit/xeokit-sdk/src/plugins/TreeViewPlugin/TreeViewPlugin.js\";\r\nimport {TreeViewContextMenu} from \"../contextMenus/TreeViewContextMenu.js\";\r\nimport {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\r\n\r\nconst tempVec3 = math.vec3();\r\n\r\n/** @private */\r\nclass ObjectsExplorer extends Controller {\r\n\r\n    constructor(parent, cfg = {}) {\r\n\r\n        super(parent);\r\n\r\n        if (!cfg.objectsTabElement) {\r\n            throw \"Missing config: objectsTabElement\";\r\n        }\r\n\r\n        if (!cfg.showAllObjectsButtonElement) {\r\n            throw \"Missing config: showAllObjectsButtonElement\";\r\n        }\r\n\r\n        if (!cfg.hideAllObjectsButtonElement) {\r\n            throw \"Missing config: hideAllObjectsButtonElement\";\r\n        }\r\n\r\n        if (!cfg.objectsElement) {\r\n            throw \"Missing config: objectsElement\";\r\n        }\r\n\r\n        this._objectsTabElement = cfg.objectsTabElement;\r\n        this._showAllObjectsButtonElement = cfg.showAllObjectsButtonElement;\r\n        this._hideAllObjectsButtonElement = cfg.hideAllObjectsButtonElement;\r\n        this._objectsTabButtonElement = this._objectsTabElement.querySelector(\".xeokit-tab-btn\");\r\n\r\n        if (!this._objectsTabButtonElement) {\r\n            throw \"Missing DOM element: ,xeokit-tab-btn\";\r\n        }\r\n\r\n        const objectsElement = cfg.objectsElement;\r\n\r\n        this._treeView = new TreeViewPlugin(this.viewer, {\r\n            containerElement: objectsElement,\r\n            hierarchy: \"containment\",\r\n            autoAddModels: false,\r\n            pruneEmptyNodes: true\r\n        });\r\n\r\n        this._treeViewContextMenu = new TreeViewContextMenu();\r\n\r\n        this._treeView.on(\"contextmenu\", (e) => {\r\n            this._treeViewContextMenu.context = {\r\n                viewer: e.viewer,\r\n                treeViewPlugin: e.treeViewPlugin,\r\n                treeViewNode: e.treeViewNode\r\n            };\r\n            this._treeViewContextMenu.show(e.event.pageX, e.event.pageY);\r\n        });\r\n\r\n        this._treeView.on(\"nodeTitleClicked\", (e) => {\r\n            const scene = this.viewer.scene;\r\n            const objectIds = [];\r\n            e.treeViewPlugin.withNodeTree(e.treeViewNode, (treeViewNode) => {\r\n                if (treeViewNode.objectId) {\r\n                    objectIds.push(treeViewNode.objectId);\r\n                }\r\n            });\r\n            const checked = e.treeViewNode.checked;\r\n            if (checked) {\r\n                scene.setObjectsXRayed(objectIds, false);\r\n                scene.setObjectsVisible(objectIds, false);\r\n                scene.setObjectsPickable(objectIds, true);\r\n            } else {\r\n                scene.setObjectsXRayed(objectIds, false);\r\n                scene.setObjectsVisible(objectIds, true);\r\n                scene.setObjectsPickable(objectIds, true);\r\n            }\r\n        });\r\n\r\n        this._onModelLoaded = this.viewer.scene.on(\"modelLoaded\", (modelId) => {\r\n            if (this.viewer.metaScene.metaModels[modelId]) {\r\n                const modelInfo = this.bimViewer._modelsExplorer.getModelInfo(modelId);\r\n                if (!modelInfo) {\r\n                    return;\r\n                }\r\n                this._treeView.addModel(modelId, {\r\n                    rootName: modelInfo.name\r\n                });\r\n            }\r\n        });\r\n\r\n        this._onModelUnloaded = this.viewer.scene.on(\"modelUnloaded\", (modelId) => {\r\n            if (this.viewer.metaScene.metaModels[modelId]) {\r\n                this._treeView.removeModel(modelId);\r\n            }\r\n        });\r\n\r\n        this.bimViewer.on(\"reset\", ()=>{\r\n            this._treeView.collapse();\r\n        });\r\n    }\r\n\r\n    setEnabled(enabled) {\r\n        if (!enabled) {\r\n            this._objectsTabButtonElement.classList.add(\"disabled\");\r\n            this._showAllObjectsButtonElement.classList.add(\"disabled\");\r\n            this._hideAllObjectsButtonElement.classList.add(\"disabled\");\r\n        } else {\r\n            this._objectsTabButtonElement.classList.remove(\"disabled\");\r\n            this._showAllObjectsButtonElement.classList.remove(\"disabled\");\r\n            this._hideAllObjectsButtonElement.classList.remove(\"disabled\");\r\n        }\r\n    }\r\n\r\n    expandTreeViewToDepth(depth) {\r\n        this._treeView.expandToDepth(depth);\r\n    }\r\n\r\n    showNodeInTreeView(objectId) {\r\n        this._treeView.collapse();\r\n        this._treeView.showNode(objectId);\r\n    }\r\n\r\n    unShowNodeInTreeView() {\r\n        this._treeView.unShowNode();\r\n    }\r\n\r\n    destroy() {\r\n        super.destroy();\r\n        this._treeView.destroy();\r\n        this._treeViewContextMenu.destroy();\r\n        this.viewer.scene.off(this._onModelLoaded);\r\n        this.viewer.scene.off(this._onModelUnloaded);\r\n    }\r\n}\r\n\r\nexport {ObjectsExplorer};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/explorer/ObjectsExplorer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 249,
    "kind": "variable",
    "name": "tempVec3",
    "memberof": "src/explorer/ObjectsExplorer.js",
    "static": true,
    "longname": "src/explorer/ObjectsExplorer.js~tempVec3",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-bim-viewer/src/explorer/ObjectsExplorer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 250,
    "kind": "class",
    "name": "ObjectsExplorer",
    "memberof": "src/explorer/ObjectsExplorer.js",
    "static": true,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/explorer/ObjectsExplorer.js",
    "importStyle": "{ObjectsExplorer}",
    "description": null,
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 251,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 252,
    "kind": "member",
    "name": "_objectsTabElement",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#_objectsTabElement",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "member",
    "name": "_showAllObjectsButtonElement",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#_showAllObjectsButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "member",
    "name": "_hideAllObjectsButtonElement",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#_hideAllObjectsButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "member",
    "name": "_objectsTabButtonElement",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#_objectsTabButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "member",
    "name": "_treeView",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#_treeView",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "_treeViewContextMenu",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#_treeViewContextMenu",
    "access": "private",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "_onModelLoaded",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#_onModelLoaded",
    "access": "private",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "_onModelUnloaded",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#_onModelUnloaded",
    "access": "private",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "setEnabled",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#setEnabled",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "expandTreeViewToDepth",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#expandTreeViewToDepth",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [
      {
        "name": "depth",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "showNodeInTreeView",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#showNodeInTreeView",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [
      {
        "name": "objectId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "unShowNodeInTreeView",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#unShowNodeInTreeView",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 265,
    "kind": "file",
    "name": "src/explorer/StoreysExplorer.js",
    "content": "import {Controller} from \"../Controller.js\";\r\nimport {TreeViewPlugin} from \"@xeokit/xeokit-sdk/src/plugins/TreeViewPlugin/TreeViewPlugin.js\";\r\nimport {TreeViewContextMenu} from \"../contextMenus/TreeViewContextMenu.js\";\r\nimport {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\r\n\r\nconst tempVec3 = math.vec3();\r\n\r\n/** @private */\r\nclass StoreysExplorer extends Controller {\r\n\r\n    constructor(parent, cfg = {}) {\r\n\r\n        super(parent);\r\n\r\n        if (!cfg.storeysTabElement) {\r\n            throw \"Missing config: storeysTabElement\";\r\n        }\r\n\r\n        if (!cfg.showAllStoreysButtonElement) {\r\n            throw \"Missing config: showAllStoreysButtonElement\";\r\n        }\r\n\r\n        if (!cfg.hideAllStoreysButtonElement) {\r\n            throw \"Missing config: hideAllStoreysButtonElement\";\r\n        }\r\n\r\n        if (!cfg.storeysElement) {\r\n            throw \"Missing config: storeysElement\";\r\n        }\r\n\r\n        this._storeysTabElement = cfg.storeysTabElement;\r\n        this._showAllStoreysButtonElement = cfg.showAllStoreysButtonElement;\r\n        this._hideAllStoreysButtonElement = cfg.hideAllStoreysButtonElement;\r\n        this._storeysTabButtonElement = this._storeysTabElement.querySelector(\".xeokit-tab-btn\");\r\n\r\n        if (!this._storeysTabButtonElement) {\r\n            throw \"Missing DOM element: .xeokit-tab-btn\";\r\n        }\r\n\r\n        const storeysElement = cfg.storeysElement;\r\n\r\n        this._treeView = new TreeViewPlugin(this.viewer, {\r\n            containerElement: storeysElement,\r\n            autoAddModels: false,\r\n            hierarchy: \"storeys\",\r\n            autoExpandDepth: 1\r\n        });\r\n\r\n        this._treeViewContextMenu = new TreeViewContextMenu();\r\n\r\n        this._treeView.on(\"contextmenu\", (e) => {\r\n            this._treeViewContextMenu.context = {\r\n                viewer: e.viewer,\r\n                treeViewPlugin: e.treeViewPlugin,\r\n                treeViewNode: e.treeViewNode,\r\n                pruneEmptyNodes: true\r\n            };\r\n            this._treeViewContextMenu.show(e.event.pageX, e.event.pageY);\r\n        });\r\n\r\n        this._treeView.on(\"nodeTitleClicked\", (e) => {\r\n            const scene = this.viewer.scene;\r\n            const objectIds = [];\r\n            e.treeViewPlugin.withNodeTree(e.treeViewNode, (treeViewNode) => {\r\n                if (treeViewNode.objectId) {\r\n                    objectIds.push(treeViewNode.objectId);\r\n                }\r\n            });\r\n            const checked = e.treeViewNode.checked;\r\n            if (checked) {\r\n                scene.setObjectsXRayed(objectIds, false);\r\n                scene.setObjectsVisible(objectIds, false);\r\n                scene.setObjectsPickable(objectIds, true);\r\n            } else {\r\n                scene.setObjectsXRayed(objectIds, false);\r\n                scene.setObjectsVisible(objectIds, true);\r\n                scene.setObjectsPickable(objectIds, true);\r\n            }\r\n        });\r\n\r\n        this._onModelLoaded = this.viewer.scene.on(\"modelLoaded\", (modelId) =>{\r\n            const modelInfo = this.bimViewer._modelsExplorer.getModelInfo(modelId);\r\n            if (!modelInfo) {\r\n                return;\r\n            }\r\n            this._treeView.addModel(modelId, {\r\n                rootName: modelInfo.name\r\n            });\r\n        });\r\n\r\n        this._onModelUnloaded = this.viewer.scene.on(\"modelUnloaded\", (modelId) => {\r\n            if (this.viewer.metaScene.metaModels[modelId]) {\r\n                this._treeView.removeModel(modelId);\r\n            }\r\n        });\r\n\r\n        this.bimViewer.on(\"reset\", () => {\r\n            this._treeView.collapse();\r\n            this._treeView.expandToDepth(1);\r\n        });\r\n    }\r\n\r\n    setEnabled(enabled) {\r\n        if (!enabled) {\r\n            this._storeysTabButtonElement.classList.add(\"disabled\");\r\n            this._showAllStoreysButtonElement.classList.add(\"disabled\");\r\n            this._hideAllStoreysButtonElement.classList.add(\"disabled\");\r\n        } else {\r\n            this._storeysTabButtonElement.classList.remove(\"disabled\");\r\n            this._showAllStoreysButtonElement.classList.remove(\"disabled\");\r\n            this._hideAllStoreysButtonElement.classList.remove(\"disabled\");\r\n        }\r\n    }\r\n\r\n    expandTreeViewToDepth(depth) {\r\n        this._treeView.expandToDepth(depth);\r\n    }\r\n\r\n    showNodeInTreeView(objectId) {\r\n        this._treeView.collapse();\r\n        this._treeView.showNode(objectId);\r\n    }\r\n\r\n    unShowNodeInTreeView() {\r\n        this._treeView.unShowNode();\r\n    }\r\n\r\n    selectStorey(storeyObjectId, done) {\r\n        const metaScene = this.viewer.metaScene;\r\n        const storeyMetaObject = metaScene.metaObjects[storeyObjectId];\r\n        if (!storeyMetaObject) {\r\n            this.error(\"selectStorey() - object is not found: '\" + storeyObjectId + \"'\");\r\n            return;\r\n        }\r\n        if (storeyMetaObject.type !== \"IfcBuildingStorey\") {\r\n            this.error(\"selectStorey() - object is not found: '\" + storeyObjectId + \"'\");\r\n            return;\r\n        }\r\n        const objectIds = storeyMetaObject.getObjectIDsInSubtree();\r\n        this._selectObjects(objectIds, done);\r\n    }\r\n\r\n    _selectObjects(objectIds, done) {\r\n        const scene = this.viewer.scene;\r\n        const aabb = scene.getAABB(objectIds);\r\n\r\n        this.viewer.cameraControl.pivotPos = math.getAABB3Center(aabb, tempVec3);\r\n\r\n        if (done) {\r\n\r\n            scene.setObjectsXRayed(scene.objectIds, true);\r\n            scene.setObjectsVisible(scene.objectIds, true);\r\n            scene.setObjectsPickable(scene.objectIds, false);\r\n            scene.setObjectsSelected(scene.selectedObjectIds, false);\r\n\r\n            scene.setObjectsXRayed(objectIds, false);\r\n            scene.setObjectsVisible(objectIds, true);\r\n            scene.setObjectsPickable(objectIds, true);\r\n\r\n            this.viewer.cameraFlight.flyTo({\r\n                aabb: aabb\r\n            }, () => {\r\n                setTimeout(function () {\r\n                    scene.setObjectsVisible(scene.xrayedObjectIds, false);\r\n                    scene.setObjectsXRayed(scene.xrayedObjectIds, false);\r\n                }, 500);\r\n                done();\r\n            });\r\n        } else {\r\n\r\n            scene.setObjectsVisible(scene.objectIds, false);\r\n            scene.setObjectsPickable(scene.xrayedObjectIds, true);\r\n            scene.setObjectsXRayed(scene.xrayedObjectIds, false);\r\n            scene.setObjectsSelected(scene.selectedObjectIds, false);\r\n\r\n            scene.setObjectsVisible(objectIds, true);\r\n\r\n            this.viewer.cameraFlight.jumpTo({\r\n                aabb: aabb\r\n            });\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        super.destroy();\r\n        this._treeView.destroy();\r\n        this._treeViewContextMenu.destroy();\r\n        this.viewer.scene.off(this._onModelLoaded);\r\n        this.viewer.scene.off(this._onModelUnloaded);\r\n    }\r\n}\r\n\r\nexport {StoreysExplorer};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/explorer/StoreysExplorer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 266,
    "kind": "variable",
    "name": "tempVec3",
    "memberof": "src/explorer/StoreysExplorer.js",
    "static": true,
    "longname": "src/explorer/StoreysExplorer.js~tempVec3",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-bim-viewer/src/explorer/StoreysExplorer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 267,
    "kind": "class",
    "name": "StoreysExplorer",
    "memberof": "src/explorer/StoreysExplorer.js",
    "static": true,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/explorer/StoreysExplorer.js",
    "importStyle": "{StoreysExplorer}",
    "description": null,
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 268,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "_storeysTabElement",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#_storeysTabElement",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "member",
    "name": "_showAllStoreysButtonElement",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#_showAllStoreysButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "member",
    "name": "_hideAllStoreysButtonElement",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#_hideAllStoreysButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "member",
    "name": "_storeysTabButtonElement",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#_storeysTabButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "member",
    "name": "_treeView",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#_treeView",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "member",
    "name": "_treeViewContextMenu",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#_treeViewContextMenu",
    "access": "private",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "member",
    "name": "_onModelLoaded",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#_onModelLoaded",
    "access": "private",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "_onModelUnloaded",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#_onModelUnloaded",
    "access": "private",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "setEnabled",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#setEnabled",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "expandTreeViewToDepth",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#expandTreeViewToDepth",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [
      {
        "name": "depth",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "showNodeInTreeView",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#showNodeInTreeView",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [
      {
        "name": "objectId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "unShowNodeInTreeView",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#unShowNodeInTreeView",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "selectStorey",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#selectStorey",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [
      {
        "name": "storeyObjectId",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "_selectObjects",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#_selectObjects",
    "access": "private",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "objectIds",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 284,
    "kind": "file",
    "name": "src/IFCObjectDefaults/ModelIFCObjectColors.js",
    "content": "/**\r\n * @desc Default initial properties for {@link Entity}s loaded from models accompanied by metadata.\r\n *\r\n * When loading a model, a loader plugins such as {@link GLTFLoaderPlugin} and {@link BIMServerLoaderPlugin} create\r\n * a tree of {@link Entity}s that represent the model. These loaders can optionally load metadata, to create\r\n * a {@link MetaModel} corresponding to the root {@link Entity}, with a {@link MetaObject} corresponding to each\r\n * object {@link Entity} within the tree.\r\n *\r\n * @private\r\n * @type {{String:Object}}\r\n */\r\nconst ModelIFCObjectColors = {\r\n    IfcSpace: {\r\n        opacity: 0.3\r\n    },\r\n    IfcWindow: { // Some IFC models have opaque windows\r\n        opacity: 0.4\r\n    },\r\n    IfcOpeningElement: { // These tend to obscure windows\r\n        opacity: 0.3\r\n    },\r\n    IfcPlate: { // These sometimes obscure windows\r\n        opacity: 0.3\r\n    }\r\n};\r\n\r\nexport {ModelIFCObjectColors};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/IFCObjectDefaults/ModelIFCObjectColors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 285,
    "kind": "variable",
    "name": "ModelIFCObjectColors",
    "memberof": "src/IFCObjectDefaults/ModelIFCObjectColors.js",
    "static": true,
    "longname": "src/IFCObjectDefaults/ModelIFCObjectColors.js~ModelIFCObjectColors",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/IFCObjectDefaults/ModelIFCObjectColors.js",
    "importStyle": "{ModelIFCObjectColors}",
    "description": "Default initial properties for {@link Entity}s loaded from models accompanied by metadata.\n\nWhen loading a model, a loader plugins such as {@link GLTFLoaderPlugin} and {@link BIMServerLoaderPlugin} create\na tree of {@link Entity}s that represent the model. These loaders can optionally load metadata, to create\na {@link MetaModel} corresponding to the root {@link Entity}, with a {@link MetaObject} corresponding to each\nobject {@link Entity} within the tree.",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "{String:Object}"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 286,
    "kind": "file",
    "name": "src/IFCObjectDefaults/ViewerIFCObjectColors.js",
    "content": "/**\r\n * @desc Default initial properties for {@link Entity}s loaded from models accompanied by metadata.\r\n *\r\n * When loading a model, a loader plugins such as {@link GLTFLoaderPlugin} and {@link BIMServerLoaderPlugin} create\r\n * a tree of {@link Entity}s that represent the model. These loaders can optionally load metadata, to create\r\n * a {@link MetaModel} corresponding to the root {@link Entity}, with a {@link MetaObject} corresponding to each\r\n * object {@link Entity} within the tree.\r\n *\r\n * @private\r\n * @type {{String:Object}}\r\n */\r\nconst ViewerIFCObjectColors = {\r\n\r\n    // Priority 0\r\n\r\n    IfcRoof: {\r\n        colorize: [0.837255, 0.203922, 0.270588],\r\n        priority: 0\r\n    },\r\n    IfcSlab: {\r\n        colorize: [0.637255, 0.603922, 0.670588],\r\n        priority: 0\r\n    },\r\n    IfcWall: {\r\n        colorize: [0.537255, 0.337255, 0.237255],\r\n        priority: 0\r\n    },\r\n    IfcWallStandardCase: {\r\n        colorize: [0.537255, 0.337255, 0.237255],\r\n        priority: 0\r\n    },\r\n    IfcCovering: {\r\n        colorize: [0.8470588235, 0.427450980392, 0],\r\n        priority: 0\r\n    },\r\n\r\n    // Priority 1\r\n\r\n    IfcDoor: {\r\n        colorize: [0.637255, 0.603922, 0.670588],\r\n        priority: 1\r\n    },\r\n\r\n    // Priority 2\r\n\r\n    IfcStair: {\r\n        colorize: [0.637255, 0.603922, 0.670588],\r\n        priority: 2\r\n    },\r\n    IfcStairFlight: {\r\n        colorize: [0.637255, 0.603922, 0.670588],\r\n        priority: 2\r\n    },\r\n    IfcProxy: {\r\n        colorize: [0.137255, 0.403922, 0.870588],\r\n        priority: 2\r\n    },\r\n    IfcRamp: {\r\n        colorize: [0.8470588235, 0.427450980392, 0],\r\n        priority: 2\r\n    },\r\n\r\n    // Priority 3\r\n\r\n    IfcColumn: {\r\n        colorize: [0.137255, 0.403922, 0.870588],\r\n        priority: 3\r\n    },\r\n    IfcBeam: {\r\n        colorize: [0.137255, 0.403922, 0.870588],\r\n        priority: 3\r\n    },\r\n    IfcCurtainWall: {\r\n        colorize: [0.137255, 0.403922, 0.870588],\r\n        priority: 3\r\n    },\r\n    IfcPlate: {\r\n        colorize: [0.8470588235, 0.427450980392, 0, 0.5],\r\n        opacity: 0.5,\r\n        priority: 3\r\n    },\r\n    IfcTransportElement: {\r\n        colorize: [0.8470588235, 0.427450980392, 0],\r\n        priority: 3\r\n    },\r\n    IfcFooting: {\r\n        colorize: [0.8470588235, 0.427450980392, 0],\r\n        priority: 3\r\n    },\r\n\r\n    // Priority 4\r\n\r\n    IfcRailing: {\r\n        colorize: [0.137255, 0.403922, 0.870588],\r\n        priority: 4\r\n    },\r\n    IfcFurnishingElement: {\r\n        colorize: [0.137255, 0.403922, 0.870588],\r\n        priority: 4\r\n    },\r\n    IfcFurniture: {\r\n        colorize: [0.8470588235, 0.427450980392, 0],\r\n        priority: 4\r\n    },\r\n    IfcSystemFurnitureElement: {\r\n        colorize: [0.8470588235, 0.427450980392, 0],\r\n        priority: 4\r\n    },\r\n\r\n    // Priority 5\r\n\r\n    IfcFlowSegment: {\r\n        colorize: [0.137255, 0.403922, 0.870588],\r\n        priority: 5\r\n    },\r\n    IfcFlowitting: {\r\n        colorize: [0.137255, 0.403922, 0.870588],\r\n        priority: 5\r\n    },\r\n    IfcFlowTerminal: {\r\n        colorize: [0.137255, 0.403922, 0.870588],\r\n        priority: 5\r\n    },\r\n    IfcFlowController: {\r\n        colorize: [0.8470588235, 0.427450980392, 0],\r\n        priority: 5\r\n    },\r\n    IfcFlowFitting: {\r\n        colorize: [0.8470588235, 0.427450980392, 0],\r\n        priority: 5\r\n    },\r\n    IfcDuctSegment: {\r\n        colorize: [0.8470588235, 0.427450980392, 0],\r\n        priority: 5\r\n    },\r\n    IfcDistributionFlowElement: {\r\n        colorize: [0.8470588235, 0.427450980392, 0],\r\n        priority: 5\r\n    },\r\n    IfcDuctFitting: {\r\n        colorize: [0.8470588235, 0.427450980392, 0],\r\n        priority: 5\r\n    },\r\n    IfcLightFixture: {\r\n        colorize: [0.8470588235, 0.8470588235, 0.870588],\r\n        priority: 5\r\n    },\r\n\r\n    // Priority 6\r\n\r\n    IfcAirTerminal: {\r\n        colorize: [0.8470588235, 0.427450980392, 0],\r\n        priority: 6\r\n    },\r\n\r\n    IfcOpeningElement: {\r\n        colorize: [0.137255, 0.403922, 0.870588],\r\n        opacity: 0.3,\r\n        priority: 6\r\n    },\r\n    IfcSpace: {\r\n        colorize: [0.137255, 0.403922, 0.870588],\r\n        opacity: 0.5,\r\n        priority: 6\r\n    },\r\n\r\n    IfcWindow: {\r\n        colorize: [0.137255, 0.403922, 0.870588],\r\n        opacity: 0.4,\r\n        priority: 6 // FIXME: transparent objects need to be last in order to avoid strange wireframe effect\r\n    },\r\n\r\n    //\r\n\r\n    IfcBuildingElementProxy: {\r\n        colorize: [0.5, 0.5, 0.5]\r\n    },\r\n\r\n    IfcSite: {\r\n        colorize: [0.137255, 0.403922, 0.870588]\r\n    },\r\n\r\n    IfcMember: {\r\n        colorize: [0.8470588235, 0.427450980392, 0]\r\n    },\r\n\r\n    DEFAULT: {\r\n        colorize: [0.5, 0.5, 0.5],\r\n        priority: 10\r\n    }\r\n};\r\n\r\nexport {ViewerIFCObjectColors}",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/IFCObjectDefaults/ViewerIFCObjectColors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 287,
    "kind": "variable",
    "name": "ViewerIFCObjectColors",
    "memberof": "src/IFCObjectDefaults/ViewerIFCObjectColors.js",
    "static": true,
    "longname": "src/IFCObjectDefaults/ViewerIFCObjectColors.js~ViewerIFCObjectColors",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/IFCObjectDefaults/ViewerIFCObjectColors.js",
    "importStyle": "{ViewerIFCObjectColors}",
    "description": "Default initial properties for {@link Entity}s loaded from models accompanied by metadata.\n\nWhen loading a model, a loader plugins such as {@link GLTFLoaderPlugin} and {@link BIMServerLoaderPlugin} create\na tree of {@link Entity}s that represent the model. These loaders can optionally load metadata, to create\na {@link MetaModel} corresponding to the root {@link Entity}, with a {@link MetaObject} corresponding to each\nobject {@link Entity} within the tree.",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "{String:Object}"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 288,
    "kind": "file",
    "name": "src/server/Server.js",
    "content": "import {utils} from \"@xeokit/xeokit-sdk/src/viewer/scene/utils.js\";\r\n\r\n/**\r\n * Default server client which loads content for a {@link BIMViewer} via HTTP from the file system.\r\n *\r\n * A BIMViewer is instantiated with an instance of this class.\r\n *\r\n * To load content from an alternative source, instantiate BIMViewer with your own custom implementation of this class.\r\n */\r\nclass Server {\r\n\r\n    /**\r\n     * Constructs a Server.\r\n     *\r\n     * @param {*} [cfg] Server configuration.\r\n     * @param {String} [cfg.dataDir] Base directory for content.\r\n     */\r\n    constructor(cfg = {}) {\r\n        this._dataDir = cfg.dataDir || \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets information on all available projects.\r\n     *\r\n     * @param {Function} done Callback through which the JSON result is returned.\r\n     * @param {Function} error Callback through which an error message is returned on error.\r\n     */\r\n    getProjects(done, error) {\r\n        const url = this._dataDir + \"/projects/index.json\";\r\n        utils.loadJSON(url, done, error);\r\n    }\r\n\r\n    /**\r\n     * Gets information for a project.\r\n     *\r\n     * @param {String} projectId ID of the project.\r\n     * @param {Function} done Callback through which the JSON result is returned.\r\n     * @param {Function} error Callback through which an error message is returned on error.\r\n     */\r\n    getProject(projectId, done, error) {\r\n        const url = this._dataDir + \"/projects/\" + projectId + \"/index.json\";\r\n        utils.loadJSON(url, done, error);\r\n    }\r\n\r\n    /**\r\n     * Gets metadata for a model within a project.\r\n     *\r\n     * @param {String} projectId ID of the project.\r\n     * @param {String} modelId ID of the model.\r\n     * @param {Function} done Callback through which the JSON result is returned.\r\n     * @param {Function} error Callback through which an error message is returned on error.\r\n     */\r\n    getMetadata(projectId, modelId, done, error) {\r\n        const url = this._dataDir + \"/projects/\" + projectId + \"/models/\" + modelId + \"/metadata.json\";\r\n        utils.loadJSON(url, done, error);\r\n    }\r\n\r\n    /**\r\n     * Gets geometry for a model within a project.\r\n     *\r\n     * @param {String} projectId ID of the project.\r\n     * @param {String} modelId ID of the model.\r\n     * @param {Function} done Callback through which the JSON result is returned.\r\n     * @param {Function} error Callback through which an error message is returned on error.\r\n     */\r\n    getGeometry(projectId, modelId, done, error) {\r\n        const url = this._dataDir + \"/projects/\" + projectId + \"/models/\" + modelId + \"/geometry.xkt\";\r\n        utils.loadArraybuffer(url, done, error);\r\n    }\r\n\r\n    /**\r\n     * Gets metadata for an object within a model within a project.\r\n     *\r\n     * @param {String} projectId ID of the project.\r\n     * @param {String} modelId ID of the model.\r\n     * @param {String} objectId ID of the object.\r\n     * @param {Function} done Callback through which the JSON result is returned.\r\n     * @param {Function} error Callback through which an error message is returned on error.\r\n     */\r\n    getObjectInfo(projectId, modelId, objectId, done, error) {\r\n        const url = this._dataDir + \"/projects/\" + projectId + \"/models/\" + modelId + \"/objects/\" + objectId + \"/properties.json\";\r\n        utils.loadJSON(url, done, error);\r\n    }\r\n\r\n    /**\r\n     * Gets existing issues for a model within a project.\r\n     *\r\n     * @param {String} projectId ID of the project.\r\n     * @param {String} modelId ID of the model.\r\n     * @param {Function} done Callback through which the JSON result is returned.\r\n     * @param {Function} error Callback through which an error message is returned on error.\r\n     */\r\n    getIssues(projectId, modelId, done, error) {\r\n        const url = this._dataDir + \"/projects/\" + projectId + \"/models/\" + modelId + \"/issues.json\";\r\n        utils.loadJSON(url, done, error);\r\n    }\r\n}\r\n\r\nexport {Server};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/server/Server.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 289,
    "kind": "class",
    "name": "Server",
    "memberof": "src/server/Server.js",
    "static": true,
    "longname": "src/server/Server.js~Server",
    "access": "public",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/server/Server.js",
    "importStyle": "{Server}",
    "description": "Default server client which loads content for a {@link BIMViewer} via HTTP from the file system.\n\nA BIMViewer is instantiated with an instance of this class.\n\nTo load content from an alternative source, instantiate BIMViewer with your own custom implementation of this class.",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 290,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/server/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/Server.js~Server#constructor",
    "access": "public",
    "description": "Constructs a Server.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "Server configuration."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.dataDir",
        "description": "Base directory for content."
      }
    ]
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "_dataDir",
    "memberof": "src/server/Server.js~Server",
    "static": false,
    "longname": "src/server/Server.js~Server#_dataDir",
    "access": "private",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "getProjects",
    "memberof": "src/server/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/Server.js~Server#getProjects",
    "access": "public",
    "description": "Gets information on all available projects.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback through which the JSON result is returned."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "Callback through which an error message is returned on error."
      }
    ],
    "return": null
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "getProject",
    "memberof": "src/server/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/Server.js~Server#getProject",
    "access": "public",
    "description": "Gets information for a project.",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "projectId",
        "description": "ID of the project."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback through which the JSON result is returned."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "Callback through which an error message is returned on error."
      }
    ],
    "return": null
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "getMetadata",
    "memberof": "src/server/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/Server.js~Server#getMetadata",
    "access": "public",
    "description": "Gets metadata for a model within a project.",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "projectId",
        "description": "ID of the project."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "modelId",
        "description": "ID of the model."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback through which the JSON result is returned."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "Callback through which an error message is returned on error."
      }
    ],
    "return": null
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "getGeometry",
    "memberof": "src/server/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/Server.js~Server#getGeometry",
    "access": "public",
    "description": "Gets geometry for a model within a project.",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "projectId",
        "description": "ID of the project."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "modelId",
        "description": "ID of the model."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback through which the JSON result is returned."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "Callback through which an error message is returned on error."
      }
    ],
    "return": null
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "getObjectInfo",
    "memberof": "src/server/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/Server.js~Server#getObjectInfo",
    "access": "public",
    "description": "Gets metadata for an object within a model within a project.",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "projectId",
        "description": "ID of the project."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "modelId",
        "description": "ID of the model."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "objectId",
        "description": "ID of the object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback through which the JSON result is returned."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "Callback through which an error message is returned on error."
      }
    ],
    "return": null
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "getIssues",
    "memberof": "src/server/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/Server.js~Server#getIssues",
    "access": "public",
    "description": "Gets existing issues for a model within a project.",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "projectId",
        "description": "ID of the project."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "modelId",
        "description": "ID of the model."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback through which the JSON result is returned."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "Callback through which an error message is returned on error."
      }
    ],
    "return": null
  },
  {
    "__docId__": 298,
    "kind": "file",
    "name": "src/toolbar/FirstPersonMode.js",
    "content": "import {Controller} from \"../Controller.js\";\r\n\r\n/** @private */\r\nclass FirstPersonMode extends Controller {\r\n\r\n    constructor(parent, cfg) {\r\n\r\n        super(parent, cfg);\r\n\r\n        if (!cfg.buttonElement) {\r\n            throw \"Missing config: buttonElement\";\r\n        }\r\n\r\n        const buttonElement = cfg.buttonElement;\r\n        const cameraControl = this.viewer.cameraControl;\r\n\r\n        cameraControl.firstPerson = false;\r\n        cameraControl.pivoting = true;\r\n        cameraControl.panToPointer = true;\r\n\r\n        this.on(\"enabled\", (enabled) => {\r\n            if (!enabled) {\r\n                buttonElement.classList.add(\"disabled\");\r\n            } else {\r\n                buttonElement.classList.remove(\"disabled\");\r\n            }\r\n        });\r\n\r\n        this.on(\"active\", (active) => {\r\n            if (active) {\r\n                buttonElement.classList.add(\"active\");\r\n            } else {\r\n                buttonElement.classList.remove(\"active\");\r\n            }\r\n        });\r\n\r\n        this.on(\"active\", (active) => {\r\n            if (active) {\r\n                cameraControl.firstPerson = true;\r\n                cameraControl.panToPointer = true;\r\n                cameraControl.pivoting = false;\r\n            } else {\r\n                cameraControl.firstPerson = false;\r\n                cameraControl.pivoting = true;\r\n                cameraControl.panToPointer = true;\r\n            }\r\n            this.viewer.cameraControl.planView = false;\r\n        });\r\n\r\n        buttonElement.addEventListener(\"click\", (event) => {\r\n            if (!this.getEnabled()) {\r\n                return;\r\n            }\r\n            const active = this.getActive();\r\n            this.setActive(!active);\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.bimViewer.on(\"reset\", ()=>{\r\n            this.setActive(false);\r\n        });\r\n    }\r\n}\r\n\r\nexport {FirstPersonMode};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/toolbar/FirstPersonMode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 299,
    "kind": "class",
    "name": "FirstPersonMode",
    "memberof": "src/toolbar/FirstPersonMode.js",
    "static": true,
    "longname": "src/toolbar/FirstPersonMode.js~FirstPersonMode",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/toolbar/FirstPersonMode.js",
    "importStyle": "{FirstPersonMode}",
    "description": null,
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 300,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/toolbar/FirstPersonMode.js~FirstPersonMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/FirstPersonMode.js~FirstPersonMode#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 301,
    "kind": "file",
    "name": "src/toolbar/FitAction.js",
    "content": "import {Controller} from \"../Controller.js\";\r\nimport {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\r\n\r\nconst tempVec3 = math.vec3();\r\n\r\n/** @private */\r\nclass FitAction extends Controller {\r\n\r\n    constructor(parent, cfg={}) {\r\n\r\n        super(parent, cfg);\r\n\r\n        if (!cfg.buttonElement) {\r\n            throw \"Missing config: buttonElement\";\r\n        }\r\n\r\n        const buttonElement = cfg.buttonElement;\r\n\r\n        this.on(\"enabled\", (enabled) => {\r\n            if (!enabled) {\r\n                buttonElement.classList.add(\"disabled\");\r\n            } else {\r\n                buttonElement.classList.remove(\"disabled\");\r\n            }\r\n        });\r\n\r\n        this.on(\"active\", (active) => {\r\n            if (active) {\r\n                buttonElement.classList.add(\"active\");\r\n            } else {\r\n                buttonElement.classList.remove(\"active\");\r\n            }\r\n        });\r\n\r\n        buttonElement.addEventListener(\"click\", (event) => {\r\n            if (this.getEnabled()) {\r\n                this.fit();\r\n            }\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    fit() {\r\n        const scene = this.viewer.scene;\r\n        const aabb = scene.getAABB(scene.visibleObjectIds);\r\n        this.viewer.cameraFlight.flyTo({\r\n            aabb: aabb\r\n        });\r\n        this.viewer.cameraControl.pivotPos = math.getAABB3Center(aabb, tempVec3);\r\n    }\r\n\r\n    set fov(fov) {\r\n        this.viewer.scene.cameraFlight.fitFOV = fov;\r\n    }\r\n\r\n    get fov() {\r\n        return this.viewer.scene.cameraFlight.fitFOV;\r\n    }\r\n\r\n    set duration(duration) {\r\n        this.viewer.scene.cameraFlight.duration = duration;\r\n    }\r\n\r\n    get duration() {\r\n        return this.viewer.scene.cameraFlight.duration;\r\n    }\r\n}\r\n\r\nexport {FitAction};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/toolbar/FitAction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 302,
    "kind": "variable",
    "name": "tempVec3",
    "memberof": "src/toolbar/FitAction.js",
    "static": true,
    "longname": "src/toolbar/FitAction.js~tempVec3",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-bim-viewer/src/toolbar/FitAction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 303,
    "kind": "class",
    "name": "FitAction",
    "memberof": "src/toolbar/FitAction.js",
    "static": true,
    "longname": "src/toolbar/FitAction.js~FitAction",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/toolbar/FitAction.js",
    "importStyle": "{FitAction}",
    "description": null,
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 304,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/toolbar/FitAction.js~FitAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/FitAction.js~FitAction#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "fit",
    "memberof": "src/toolbar/FitAction.js~FitAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/FitAction.js~FitAction#fit",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 306,
    "kind": "set",
    "name": "fov",
    "memberof": "src/toolbar/FitAction.js~FitAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/FitAction.js~FitAction#fov",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true
  },
  {
    "__docId__": 307,
    "kind": "get",
    "name": "fov",
    "memberof": "src/toolbar/FitAction.js~FitAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/FitAction.js~FitAction#fov",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "set",
    "name": "duration",
    "memberof": "src/toolbar/FitAction.js~FitAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/FitAction.js~FitAction#duration",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true
  },
  {
    "__docId__": 309,
    "kind": "get",
    "name": "duration",
    "memberof": "src/toolbar/FitAction.js~FitAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/FitAction.js~FitAction#duration",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "file",
    "name": "src/toolbar/HideTool.js",
    "content": "import {Controller} from \"../Controller.js\";\r\nimport {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\r\n\r\nfunction closeEnough(p, q) {\r\n    const CLICK_DIST = 4;\r\n    return (Math.abs(p[0] - q[0]) < 4) && (Math.abs(p[1] - q[1]) < CLICK_DIST);\r\n}\r\n\r\n/** @private */\r\nclass HideTool extends Controller {\r\n\r\n    constructor(parent, cfg) {\r\n\r\n        super(parent, cfg);\r\n\r\n        if (!cfg.buttonElement) {\r\n            throw \"Missing config: buttonElement\";\r\n        }\r\n\r\n        const buttonElement = cfg.buttonElement;\r\n\r\n        this.on(\"enabled\", (enabled) => {\r\n            if (!enabled) {\r\n                buttonElement.classList.add(\"disabled\");\r\n            } else {\r\n                buttonElement.classList.remove(\"disabled\");\r\n            }\r\n        });\r\n\r\n        this.on(\"active\", (active) => {\r\n            if (active) {\r\n                buttonElement.classList.add(\"active\");\r\n                this.viewer.cameraControl.doublePickFlyTo = false;\r\n            } else {\r\n                buttonElement.classList.remove(\"active\");\r\n                this.viewer.cameraControl.doublePickFlyTo = true;\r\n            }\r\n        });\r\n\r\n        buttonElement.addEventListener(\"click\", (event) => {\r\n            if (!this.getEnabled()) {\r\n                return;\r\n            }\r\n            const active = this.getActive();\r\n            this.setActive(!active);\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.bimViewer.on(\"reset\", () => {\r\n            this.setActive(false);\r\n        });\r\n\r\n        this._init();\r\n    }\r\n\r\n    _init() {\r\n        var entity = null;\r\n        this._onHover = this.viewer.cameraControl.on(\"hover\", (e) => {\r\n            if (!this.getActive() || !this.getEnabled()) {\r\n                return;\r\n            }\r\n            if (entity) {\r\n                entity.highlighted = false;\r\n                entity = null;\r\n            }\r\n            entity = e.entity;\r\n            entity.highlighted = true;\r\n        });\r\n        this._onHoverOff = this.viewer.cameraControl.on(\"hoverOff\", (e) => {\r\n            if (!this.getActive() || !this.getEnabled()) {\r\n                return;\r\n            }\r\n            if (entity) {\r\n                entity.highlighted = false;\r\n                entity = null;\r\n            }\r\n        });\r\n        const lastCoords = math.vec2();\r\n        const input = this.viewer.scene.input;\r\n        this._onMousedown = input.on(\"mousedown\", (coords) => {\r\n            if (!input.mouseDownLeft || input.mouseDownRight || input.mouseDownMiddle) {\r\n                return;\r\n            }\r\n            lastCoords[0] = coords[0];\r\n            lastCoords[1] = coords[1];\r\n        });\r\n        this._onMouseup = input.on(\"mouseup\", (coords) => {\r\n            if (!this.getActive() || !this.getEnabled()) {\r\n                return;\r\n            }\r\n            if (entity) {\r\n                if (!closeEnough(lastCoords, coords)) {\r\n                    entity = null;\r\n                    return;\r\n                }\r\n                entity.visible = false;\r\n                entity.highlighted = false;\r\n                entity = null;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport {HideTool};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/toolbar/HideTool.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 311,
    "kind": "function",
    "name": "closeEnough",
    "memberof": "src/toolbar/HideTool.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/toolbar/HideTool.js~closeEnough",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-bim-viewer/src/toolbar/HideTool.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      },
      {
        "name": "q",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 312,
    "kind": "class",
    "name": "HideTool",
    "memberof": "src/toolbar/HideTool.js",
    "static": true,
    "longname": "src/toolbar/HideTool.js~HideTool",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/toolbar/HideTool.js",
    "importStyle": "{HideTool}",
    "description": null,
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 313,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/toolbar/HideTool.js~HideTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/HideTool.js~HideTool#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "_init",
    "memberof": "src/toolbar/HideTool.js~HideTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/HideTool.js~HideTool#_init",
    "access": "private",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 315,
    "kind": "member",
    "name": "_onHover",
    "memberof": "src/toolbar/HideTool.js~HideTool",
    "static": false,
    "longname": "src/toolbar/HideTool.js~HideTool#_onHover",
    "access": "private",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "member",
    "name": "_onHoverOff",
    "memberof": "src/toolbar/HideTool.js~HideTool",
    "static": false,
    "longname": "src/toolbar/HideTool.js~HideTool#_onHoverOff",
    "access": "private",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "member",
    "name": "_onMousedown",
    "memberof": "src/toolbar/HideTool.js~HideTool",
    "static": false,
    "longname": "src/toolbar/HideTool.js~HideTool#_onMousedown",
    "access": "private",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "member",
    "name": "_onMouseup",
    "memberof": "src/toolbar/HideTool.js~HideTool",
    "static": false,
    "longname": "src/toolbar/HideTool.js~HideTool#_onMouseup",
    "access": "private",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 319,
    "kind": "file",
    "name": "src/toolbar/NavCubeMode.js",
    "content": "import {Controller} from \"../Controller.js\";\r\nimport {NavCubePlugin} from \"@xeokit/xeokit-sdk/src/plugins/NavCubePlugin/NavCubePlugin.js\";\r\n\r\n/** @private */\r\nclass NavCubeMode extends Controller {\r\n\r\n    constructor(parent, cfg) {\r\n\r\n        super(parent, cfg);\r\n\r\n        if (!cfg.navCubeCanvasElement) {\r\n            throw \"Missing config: navCubeCanvasElement\";\r\n        }\r\n\r\n        const navCubeCanvasElement = cfg.navCubeCanvasElement;\r\n\r\n        this._navCube = new NavCubePlugin(this.viewer, {\r\n            canvasElement: navCubeCanvasElement,\r\n            fitVisible: true,\r\n            color: \"#CFCFCF\"\r\n        });\r\n\r\n        this._navCube.setVisible(this._active);\r\n\r\n        this.on(\"active\", (active) => {\r\n            this._navCube.setVisible(active);\r\n        });\r\n    }\r\n\r\n    destroy() {\r\n        this._navCube.destroy();\r\n        super.destroy();\r\n    }\r\n}\r\n\r\nexport {NavCubeMode};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/toolbar/NavCubeMode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 320,
    "kind": "class",
    "name": "NavCubeMode",
    "memberof": "src/toolbar/NavCubeMode.js",
    "static": true,
    "longname": "src/toolbar/NavCubeMode.js~NavCubeMode",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/toolbar/NavCubeMode.js",
    "importStyle": "{NavCubeMode}",
    "description": null,
    "lineNumber": 5,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 321,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/toolbar/NavCubeMode.js~NavCubeMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/NavCubeMode.js~NavCubeMode#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 322,
    "kind": "member",
    "name": "_navCube",
    "memberof": "src/toolbar/NavCubeMode.js~NavCubeMode",
    "static": false,
    "longname": "src/toolbar/NavCubeMode.js~NavCubeMode#_navCube",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/toolbar/NavCubeMode.js~NavCubeMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/NavCubeMode.js~NavCubeMode#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 324,
    "kind": "file",
    "name": "src/toolbar/OrthoMode.js",
    "content": "import {Controller} from \"../Controller.js\";\r\n\r\n/** @private */\r\nclass OrthoMode extends Controller {\r\n\r\n    constructor(parent, cfg) {\r\n\r\n        super(parent, cfg);\r\n\r\n        if (!cfg.buttonElement) {\r\n            throw \"Missing config: buttonElement\";\r\n        }\r\n\r\n        const buttonElement = cfg.buttonElement;\r\n\r\n        this.on(\"enabled\", (enabled) => {\r\n            if (!enabled) {\r\n                buttonElement.classList.add(\"disabled\");\r\n            } else {\r\n                buttonElement.classList.remove(\"disabled\");\r\n            }\r\n        });\r\n\r\n        this.on(\"active\", (active) => {\r\n            if (active) {\r\n                buttonElement.classList.add(\"active\");\r\n            } else {\r\n                buttonElement.classList.remove(\"active\");\r\n            }\r\n        });\r\n        \r\n        this.on(\"active\", (active) => {\r\n            if (active) {\r\n                this.viewer.cameraFlight.flyTo({projection: \"ortho\", duration: 0.5}, () => {});\r\n            } else {\r\n                this.viewer.cameraFlight.flyTo({projection: \"perspective\", duration: 0.5}, () => {});\r\n            }\r\n        });\r\n        \r\n        buttonElement.addEventListener(\"click\", (event) => {\r\n            this.setActive(!this.getActive());\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.bimViewer.on(\"reset\", ()=>{\r\n            this.setActive(false);\r\n        });\r\n    }\r\n}\r\n\r\nexport {OrthoMode};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/toolbar/OrthoMode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 325,
    "kind": "class",
    "name": "OrthoMode",
    "memberof": "src/toolbar/OrthoMode.js",
    "static": true,
    "longname": "src/toolbar/OrthoMode.js~OrthoMode",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/toolbar/OrthoMode.js",
    "importStyle": "{OrthoMode}",
    "description": null,
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 326,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/toolbar/OrthoMode.js~OrthoMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/OrthoMode.js~OrthoMode#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 327,
    "kind": "file",
    "name": "src/toolbar/QueryTool.js",
    "content": "import {Controller} from \"../Controller.js\";\r\nimport {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\r\n\r\nfunction closeEnough(p, q) {\r\n    const CLICK_DIST = 4;\r\n    return (Math.abs(p[0] - q[0]) < 4) && (Math.abs(p[1] - q[1]) < CLICK_DIST);\r\n}\r\n\r\n/** @private */\r\nclass QueryTool extends Controller {\r\n\r\n    constructor(parent, cfg) {\r\n\r\n        super(parent);\r\n\r\n        if (!cfg.buttonElement) {\r\n            throw \"Missing config: buttonElement\";\r\n        }\r\n\r\n        const buttonElement = cfg.buttonElement;\r\n\r\n        this.on(\"enabled\", (enabled) => {\r\n            if (!enabled) {\r\n                buttonElement.classList.add(\"disabled\");\r\n            } else {\r\n                buttonElement.classList.remove(\"disabled\");\r\n            }\r\n        });\r\n\r\n        this.on(\"active\", (active) => {\r\n            if (active) {\r\n                buttonElement.classList.add(\"active\");\r\n            } else {\r\n                buttonElement.classList.remove(\"active\");\r\n            }\r\n        });\r\n\r\n        buttonElement.addEventListener(\"click\", (event) => {\r\n            if (!this.getEnabled()) {\r\n                return;\r\n            }\r\n            const active = this.getActive();\r\n            this.setActive(!active);\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.bimViewer.on(\"reset\", ()=>{\r\n            this.setActive(false);\r\n        });\r\n\r\n        this._init();\r\n    }\r\n\r\n    _init() {\r\n        const viewer = this.viewer;\r\n        const cameraControl = viewer.cameraControl;\r\n        var entity = null;\r\n        this._onHover = cameraControl.on(\"hover\", (e) => {\r\n            if (!this.getActive() || !this.getEnabled()) {\r\n                return;\r\n            }\r\n            if (entity) {\r\n                entity.highlighted = false;\r\n                entity = null;\r\n            }\r\n            entity = e.entity;\r\n            entity.highlighted = true;\r\n        });\r\n        this._onHoverOff = cameraControl.on(\"hoverOff\", (e) => {\r\n            if (!this.getActive() || !this.getEnabled()) {\r\n                return;\r\n            }\r\n            if (entity) {\r\n                entity.highlighted = false;\r\n                entity = null;\r\n            }\r\n        });\r\n        const lastCoords = math.vec2();\r\n        const input = viewer.scene.input;\r\n        this._onMousedown = input.on(\"mousedown\", (coords) => {\r\n            if (!this.getActive() || !this.getEnabled()) {\r\n                return;\r\n            }\r\n            if (!input.mouseDownLeft || input.mouseDownRight || input.mouseDownMiddle) {\r\n                return;\r\n            }\r\n            lastCoords[0] = coords[0];\r\n            lastCoords[1] = coords[1];\r\n        });\r\n        this._onMouseup = input.on(\"mouseup\", (coords) => {\r\n            if (!this.getActive() || !this.getEnabled()) {\r\n                return;\r\n            }\r\n            if (entity) {\r\n                if (!closeEnough(lastCoords, coords)) {\r\n                    entity = null;\r\n                    return;\r\n                }\r\n                const model = entity.model;\r\n                if (!model) { // OK to click on entities that don't belong to models - could be a navigation gizmo or helper\r\n                    return;\r\n                }\r\n                const projectId = this.bimViewer.getLoadedProjectId();\r\n                if (!projectId) {\r\n                    this.error(\"Query tool: should be a project loaded - ignoring query-pick\");\r\n                    return;\r\n                }\r\n                const modelId = model.id;\r\n                const objectId = entity.id;\r\n                const metaObject = viewer.metaScene.metaObjects[objectId];\r\n                if (!metaObject) {\r\n                    return;\r\n                }\r\n                const objectName = metaObject.name;\r\n                const objectType = metaObject.type;\r\n                const objectQueryResult = {\r\n                    projectId: projectId,\r\n                    modelId: modelId,\r\n                    objectId: objectId,\r\n                    objectName: objectName,\r\n                    objectType: objectType\r\n                };\r\n                this.fire(\"queryPicked\", objectQueryResult);\r\n                entity = null;\r\n            } else {\r\n                this.fire(\"queryNotPicked\", false);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport {QueryTool};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/toolbar/QueryTool.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 328,
    "kind": "function",
    "name": "closeEnough",
    "memberof": "src/toolbar/QueryTool.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/toolbar/QueryTool.js~closeEnough",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-bim-viewer/src/toolbar/QueryTool.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      },
      {
        "name": "q",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 329,
    "kind": "class",
    "name": "QueryTool",
    "memberof": "src/toolbar/QueryTool.js",
    "static": true,
    "longname": "src/toolbar/QueryTool.js~QueryTool",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/toolbar/QueryTool.js",
    "importStyle": "{QueryTool}",
    "description": null,
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 330,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/toolbar/QueryTool.js~QueryTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/QueryTool.js~QueryTool#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "_init",
    "memberof": "src/toolbar/QueryTool.js~QueryTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/QueryTool.js~QueryTool#_init",
    "access": "private",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 332,
    "kind": "member",
    "name": "_onHover",
    "memberof": "src/toolbar/QueryTool.js~QueryTool",
    "static": false,
    "longname": "src/toolbar/QueryTool.js~QueryTool#_onHover",
    "access": "private",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "member",
    "name": "_onHoverOff",
    "memberof": "src/toolbar/QueryTool.js~QueryTool",
    "static": false,
    "longname": "src/toolbar/QueryTool.js~QueryTool#_onHoverOff",
    "access": "private",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "member",
    "name": "_onMousedown",
    "memberof": "src/toolbar/QueryTool.js~QueryTool",
    "static": false,
    "longname": "src/toolbar/QueryTool.js~QueryTool#_onMousedown",
    "access": "private",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 335,
    "kind": "member",
    "name": "_onMouseup",
    "memberof": "src/toolbar/QueryTool.js~QueryTool",
    "static": false,
    "longname": "src/toolbar/QueryTool.js~QueryTool#_onMouseup",
    "access": "private",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "file",
    "name": "src/toolbar/ResetAction.js",
    "content": "import {Controller} from \"../Controller.js\";\r\nimport {ModelMemento} from \"@xeokit/xeokit-sdk/src/viewer/scene/mementos/ModelMemento.js\";\r\nimport {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\r\n\r\nconst tempVec3a = math.vec3();\r\n\r\n/** @private */\r\nclass ResetAction extends Controller {\r\n\r\n    constructor(parent, cfg = {}) {\r\n\r\n        super(parent, cfg);\r\n\r\n        if (!cfg.buttonElement) {\r\n            throw \"Missing config: buttonElement\";\r\n        }\r\n\r\n        const buttonElement = cfg.buttonElement;\r\n        const camera = this.viewer.camera;\r\n\r\n        this._modelMementos = {};\r\n\r\n        // Initial camera position - looking down negative diagonal\r\n\r\n        camera.eye = [0.577, 0.577, 0.577];\r\n        camera.look = [0,0,0];\r\n        camera.up = [-1, 1, -1];\r\n\r\n        this.bimViewer._modelsExplorer.on(\"modelLoaded\", (modelId) => {\r\n            this._saveModelMemento(modelId);\r\n        });\r\n\r\n        this.bimViewer._modelsExplorer.on(\"modelUnloaded\", (modelId) => {\r\n            this._destroyModelMemento(modelId);\r\n        });\r\n\r\n        this.on(\"enabled\", (enabled) => {\r\n            if (!enabled) {\r\n                buttonElement.classList.add(\"disabled\");\r\n            } else {\r\n                buttonElement.classList.remove(\"disabled\");\r\n            }\r\n        });\r\n\r\n        this.on(\"active\", (active) => {\r\n            if (active) {\r\n                buttonElement.classList.add(\"active\");\r\n            } else {\r\n                buttonElement.classList.remove(\"active\");\r\n            }\r\n        });\r\n\r\n        buttonElement.addEventListener(\"click\", (event) => {\r\n            if (this.getEnabled()) {\r\n                this.reset();\r\n            }\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    _saveModelMemento(modelId) {\r\n        const metaModel = this.viewer.metaScene.metaModels[modelId];\r\n        if (!metaModel) {\r\n            return;\r\n        }\r\n        const modelMemento = new ModelMemento();\r\n        modelMemento.saveObjects(this.viewer.scene, metaModel, {\r\n            visible: true,\r\n            edges: true,\r\n            xrayed: true,\r\n            highlighted: true,\r\n            selected: true,\r\n            clippable: true,\r\n            pickable: true,\r\n            colorize: true,\r\n            opacity: false // FIXME: Restoring opacity broken by colorize fix - details at https://github.com/xeokit/xeokit-sdk/issues/239\r\n        });\r\n        this._modelMementos[modelId] = modelMemento;\r\n    }\r\n\r\n    _restoreModelMemento(modelId) {\r\n        const metaModel = this.viewer.metaScene.metaModels[modelId];\r\n        if (!metaModel) {\r\n            return;\r\n        }\r\n        const modelMemento = this._modelMementos[modelId];\r\n        modelMemento.restoreObjects(this.viewer.scene, metaModel);\r\n    }\r\n\r\n    _destroyModelMemento(modelId) {\r\n        delete this._modelMementos[modelId];\r\n    }\r\n\r\n    reset() {\r\n        const scene = this.viewer.scene;\r\n        const modelIds = scene.modelIds;\r\n        for (var i = 0, len = modelIds.length; i < len; i++) {\r\n            const modelId = modelIds[i];\r\n            this._restoreModelMemento(modelId);\r\n        }\r\n        this.bimViewer.unShowObjectInExplorers();\r\n        this.fire(\"reset\", true);\r\n        this._resetCamera();\r\n    }\r\n\r\n    _resetCamera() {\r\n        const viewer = this.viewer;\r\n        const scene = viewer.scene;\r\n        const aabb = scene.getAABB(scene.visibleObjectIds);\r\n        const diag = math.getAABB3Diag(aabb);\r\n        const center = math.getAABB3Center(aabb, tempVec3a);\r\n        const dist = Math.abs(diag / Math.tan(65.0 / 2));     // TODO: fovy match with CameraFlight\r\n        const camera = scene.camera;\r\n        const dir = (camera.yUp) ? [-1, -1, -1] : [1, 1, 1];\r\n    //    const up = math.mulVec3Scalar((camera.yUp) ? [-1, 1, -1] : [-1, 1, 1], -1, []);\r\n        const up = (camera.yUp) ? [-1, 1, -1] : [-1, 1, 1];\r\n        viewer.cameraControl.pivotPos = center;\r\n        viewer.cameraControl.planView = false;\r\n        viewer.cameraFlight.flyTo({\r\n            look: center,\r\n            eye: [center[0] - (dist * dir[0]), center[1] - (dist * dir[1]), center[2] - (dist * dir[2])],\r\n            up: up,\r\n            orthoScale: diag * 1.3,\r\n            projection: \"perspective\",\r\n            duration: 1\r\n        });\r\n    }\r\n}\r\n\r\nexport {ResetAction};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/toolbar/ResetAction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 337,
    "kind": "variable",
    "name": "tempVec3a",
    "memberof": "src/toolbar/ResetAction.js",
    "static": true,
    "longname": "src/toolbar/ResetAction.js~tempVec3a",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-bim-viewer/src/toolbar/ResetAction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 338,
    "kind": "class",
    "name": "ResetAction",
    "memberof": "src/toolbar/ResetAction.js",
    "static": true,
    "longname": "src/toolbar/ResetAction.js~ResetAction",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/toolbar/ResetAction.js",
    "importStyle": "{ResetAction}",
    "description": null,
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 339,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/toolbar/ResetAction.js~ResetAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/ResetAction.js~ResetAction#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 340,
    "kind": "member",
    "name": "_modelMementos",
    "memberof": "src/toolbar/ResetAction.js~ResetAction",
    "static": false,
    "longname": "src/toolbar/ResetAction.js~ResetAction#_modelMementos",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "_saveModelMemento",
    "memberof": "src/toolbar/ResetAction.js~ResetAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/ResetAction.js~ResetAction#_saveModelMemento",
    "access": "private",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "modelId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "_restoreModelMemento",
    "memberof": "src/toolbar/ResetAction.js~ResetAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/ResetAction.js~ResetAction#_restoreModelMemento",
    "access": "private",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "modelId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "_destroyModelMemento",
    "memberof": "src/toolbar/ResetAction.js~ResetAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/ResetAction.js~ResetAction#_destroyModelMemento",
    "access": "private",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "modelId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "reset",
    "memberof": "src/toolbar/ResetAction.js~ResetAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/ResetAction.js~ResetAction#reset",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "_resetCamera",
    "memberof": "src/toolbar/ResetAction.js~ResetAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/ResetAction.js~ResetAction#_resetCamera",
    "access": "private",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 346,
    "kind": "file",
    "name": "src/toolbar/SectionTool.js",
    "content": "import {Controller} from \"../Controller.js\";\r\nimport {SectionPlanesPlugin} from \"@xeokit/xeokit-sdk/src/plugins/SectionPlanesPlugin/SectionPlanesPlugin.js\";\r\n\r\n/** @private */\r\nclass SectionTool extends Controller {\r\n\r\n    constructor(parent, cfg) {\r\n\r\n        super(parent, cfg);\r\n\r\n        if (!cfg.buttonElement) {\r\n            throw \"Missing config: buttonElement\";\r\n        }\r\n\r\n        const buttonElement = cfg.buttonElement;\r\n\r\n        this._sectionPlanesPlugin = new SectionPlanesPlugin(this.viewer, {\r\n        });\r\n\r\n        this._sectionPlanesPlugin.setOverviewVisible(false);\r\n\r\n        this.on(\"enabled\", (enabled) => {\r\n            if (!enabled) {\r\n                buttonElement.classList.add(\"disabled\");\r\n            } else {\r\n                buttonElement.classList.remove(\"disabled\");\r\n            }\r\n        });\r\n\r\n        this.on(\"active\", (active) => {\r\n            if (active) {\r\n                buttonElement.classList.add(\"active\");\r\n            } else {\r\n                buttonElement.classList.remove(\"active\");\r\n            }\r\n        });\r\n\r\n        this.on(\"active\", (active) => {\r\n            if (!active) {\r\n                this._sectionPlanesPlugin.hideControl();\r\n            }\r\n        });\r\n\r\n        buttonElement.addEventListener(\"click\", (event) => {\r\n            if (!this.getEnabled()) {\r\n                return;\r\n            }\r\n            const active = this.getActive();\r\n            this.setActive(!active);\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.bimViewer.on(\"reset\", () => {\r\n            this.clear();\r\n            this.setActive(false);\r\n        });\r\n\r\n        this._initSectionMode();\r\n    }\r\n\r\n    _initSectionMode() {\r\n        this._onPickedSurface = this.viewer.cameraControl.on(\"pickedSurface\", (e) => {\r\n            if (!this.getActive() || !this.getEnabled()) {\r\n                return;\r\n            }\r\n            const sectionPlane = this._sectionPlanesPlugin.createSectionPlane({\r\n                pos: e.worldPos,\r\n                dir: [-e.worldNormal[0], -e.worldNormal[1], -e.worldNormal[2]]\r\n            });\r\n            this._sectionPlanesPlugin.showControl(sectionPlane.id);\r\n        });\r\n    }\r\n\r\n    clear() {\r\n        this._sectionPlanesPlugin.clear();\r\n    }\r\n\r\n    destroy() {\r\n        this._sectionPlanesPlugin.destroy();\r\n        super.destroy();\r\n    }\r\n}\r\n\r\nexport {SectionTool};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/toolbar/SectionTool.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 347,
    "kind": "class",
    "name": "SectionTool",
    "memberof": "src/toolbar/SectionTool.js",
    "static": true,
    "longname": "src/toolbar/SectionTool.js~SectionTool",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/toolbar/SectionTool.js",
    "importStyle": "{SectionTool}",
    "description": null,
    "lineNumber": 5,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 348,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/toolbar/SectionTool.js~SectionTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/SectionTool.js~SectionTool#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 349,
    "kind": "member",
    "name": "_sectionPlanesPlugin",
    "memberof": "src/toolbar/SectionTool.js~SectionTool",
    "static": false,
    "longname": "src/toolbar/SectionTool.js~SectionTool#_sectionPlanesPlugin",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "_initSectionMode",
    "memberof": "src/toolbar/SectionTool.js~SectionTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/SectionTool.js~SectionTool#_initSectionMode",
    "access": "private",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 351,
    "kind": "member",
    "name": "_onPickedSurface",
    "memberof": "src/toolbar/SectionTool.js~SectionTool",
    "static": false,
    "longname": "src/toolbar/SectionTool.js~SectionTool#_onPickedSurface",
    "access": "private",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "clear",
    "memberof": "src/toolbar/SectionTool.js~SectionTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/SectionTool.js~SectionTool#clear",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 353,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/toolbar/SectionTool.js~SectionTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/SectionTool.js~SectionTool#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 354,
    "kind": "file",
    "name": "src/toolbar/SelectionTool.js",
    "content": "import {Controller} from \"../Controller.js\";\r\nimport {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\r\n\r\n\r\nfunction closeEnough(p, q) {\r\n    const CLICK_DIST = 4;\r\n    return (Math.abs(p[0] - q[0]) < 4) && (Math.abs(p[1] - q[1]) < CLICK_DIST);\r\n}\r\n\r\n/** @private */\r\nclass SelectionTool extends Controller {\r\n\r\n    constructor(parent, cfg) {\r\n\r\n        super(parent);\r\n\r\n        if (!cfg.buttonElement) {\r\n            throw \"Missing config: buttonElement\";\r\n        }\r\n\r\n        const buttonElement = cfg.buttonElement;\r\n\r\n        this.on(\"enabled\", (enabled) => {\r\n            if (!enabled) {\r\n                buttonElement.classList.add(\"disabled\");\r\n            } else {\r\n                buttonElement.classList.remove(\"disabled\");\r\n            }\r\n        });\r\n\r\n        this.on(\"active\", (active) => {\r\n            if (active) {\r\n                buttonElement.classList.add(\"active\");\r\n            } else {\r\n                buttonElement.classList.remove(\"active\");\r\n            }\r\n        });\r\n\r\n        buttonElement.addEventListener(\"click\", (event) => {\r\n            if (!this.getEnabled()) {\r\n                return;\r\n            }\r\n            const active = this.getActive();\r\n            this.setActive(!active);\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.bimViewer.on(\"reset\", () => {\r\n            this.setActive(false);\r\n        });\r\n\r\n        this._initSectionMode();\r\n    }\r\n\r\n    _initSectionMode() {\r\n        const viewer = this.viewer;\r\n        const cameraControl = viewer.cameraControl;\r\n        var entity = null;\r\n        this._onHover = cameraControl.on(\"hover\", (e) => {\r\n            if (!this.getActive() || !this.getEnabled()) {\r\n                return;\r\n            }\r\n            if (entity) {\r\n                entity.highlighted = false;\r\n                entity = null;\r\n            }\r\n            entity = e.entity;\r\n            entity.highlighted = true;\r\n        });\r\n        this._onHoverOff = cameraControl.on(\"hoverOff\", (e) => {\r\n            if (!this.getActive() || !this.getEnabled()) {\r\n                return;\r\n            }\r\n            if (entity) {\r\n                entity.highlighted = false;\r\n                entity = null;\r\n            }\r\n        });\r\n        const lastCoords = math.vec2();\r\n        const input = viewer.scene.input;\r\n        this._onMousedown = input.on(\"mousedown\", (coords) => {\r\n            if (!this.getActive() || !this.getEnabled()) {\r\n                return;\r\n            }\r\n            if (!input.mouseDownLeft || input.mouseDownRight || input.mouseDownMiddle) {\r\n                return;\r\n            }\r\n            lastCoords[0] = coords[0];\r\n            lastCoords[1] = coords[1];\r\n        });\r\n        this._onMouseup = input.on(\"mouseup\", (coords) => {\r\n            if (!this.getActive() || !this.getEnabled()) {\r\n                return;\r\n            }\r\n            if (entity) {\r\n                if (!closeEnough(lastCoords, coords)) {\r\n                    entity = null;\r\n                    return;\r\n                }\r\n                entity.selected = !entity.selected;\r\n                entity = null;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport {SelectionTool};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/toolbar/SelectionTool.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 355,
    "kind": "function",
    "name": "closeEnough",
    "memberof": "src/toolbar/SelectionTool.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/toolbar/SelectionTool.js~closeEnough",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-bim-viewer/src/toolbar/SelectionTool.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      },
      {
        "name": "q",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 356,
    "kind": "class",
    "name": "SelectionTool",
    "memberof": "src/toolbar/SelectionTool.js",
    "static": true,
    "longname": "src/toolbar/SelectionTool.js~SelectionTool",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/toolbar/SelectionTool.js",
    "importStyle": "{SelectionTool}",
    "description": null,
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 357,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/toolbar/SelectionTool.js~SelectionTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/SelectionTool.js~SelectionTool#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "_initSectionMode",
    "memberof": "src/toolbar/SelectionTool.js~SelectionTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/SelectionTool.js~SelectionTool#_initSectionMode",
    "access": "private",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 359,
    "kind": "member",
    "name": "_onHover",
    "memberof": "src/toolbar/SelectionTool.js~SelectionTool",
    "static": false,
    "longname": "src/toolbar/SelectionTool.js~SelectionTool#_onHover",
    "access": "private",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 360,
    "kind": "member",
    "name": "_onHoverOff",
    "memberof": "src/toolbar/SelectionTool.js~SelectionTool",
    "static": false,
    "longname": "src/toolbar/SelectionTool.js~SelectionTool#_onHoverOff",
    "access": "private",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "_onMousedown",
    "memberof": "src/toolbar/SelectionTool.js~SelectionTool",
    "static": false,
    "longname": "src/toolbar/SelectionTool.js~SelectionTool#_onMousedown",
    "access": "private",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "member",
    "name": "_onMouseup",
    "memberof": "src/toolbar/SelectionTool.js~SelectionTool",
    "static": false,
    "longname": "src/toolbar/SelectionTool.js~SelectionTool#_onMouseup",
    "access": "private",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "file",
    "name": "src/toolbar/ThreeDMode.js",
    "content": "import {Controller} from \"../Controller.js\";\r\nimport {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\r\n\r\nconst tempVec3a = math.vec3();\r\n\r\n/** @private */\r\nclass ThreeDMode extends Controller {\r\n\r\n    constructor(parent, cfg) {\r\n\r\n        super(parent, cfg);\r\n\r\n        if (!cfg.buttonElement) {\r\n            throw \"Missing config: buttonElement\";\r\n        }\r\n\r\n        this._buttonElement = cfg.buttonElement;\r\n\r\n        this._active = false;\r\n\r\n        this.on(\"enabled\", (enabled) => {\r\n            if (!enabled) {\r\n                this._buttonElement.classList.add(\"disabled\");\r\n            } else {\r\n                this._buttonElement.classList.remove(\"disabled\");\r\n            }\r\n        });\r\n\r\n        this._buttonElement.addEventListener(\"click\", (event) => {\r\n            this.setActive(!this.getActive(), () => { // Animated\r\n            });\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.bimViewer.on(\"reset\", () => {\r\n            this.setActive(true, () => { // Animated\r\n            });\r\n        });\r\n    }\r\n\r\n    setActive(active, done) {\r\n        if (this._active === active) {\r\n            if (done) {\r\n                done();\r\n            }\r\n            return;\r\n        }\r\n        this._active = active;\r\n        if (active) {\r\n            this._buttonElement.classList.add(\"active\");\r\n            if (done) {\r\n                this._enterThreeDMode(() => {\r\n                    this.fire(\"active\", this._active);\r\n                    done();\r\n                });\r\n            } else {\r\n                this._enterThreeDMode();\r\n                this.fire(\"active\", this._active);\r\n            }\r\n        } else {\r\n            this._buttonElement.classList.remove(\"active\");\r\n            if (done) {\r\n                this._exitThreeDMode(() => {\r\n                    this.fire(\"active\", this._active);\r\n                    done();\r\n                });\r\n            } else {\r\n                this._exitThreeDMode();\r\n                this.fire(\"active\", this._active);\r\n            }\r\n        }\r\n    }\r\n\r\n    _enterThreeDMode(done) {\r\n\r\n        const viewer = this.viewer;\r\n        const scene = viewer.scene;\r\n        const aabb = scene.getAABB(scene.visibleObjectIds);\r\n        const diag = math.getAABB3Diag(aabb);\r\n        const center = math.getAABB3Center(aabb, tempVec3a);\r\n        const dist = Math.abs(diag / Math.tan(65.0 / 2));     // TODO: fovy match with CameraFlight\r\n        const camera = scene.camera;\r\n        const dir = (camera.yUp) ? [-1, -1, -1] : [1, 1, 1];\r\n        const up = (camera.yUp) ? [-1, 1, -1] : [-1, 1, 1];\r\n\r\n        viewer.cameraControl.pivotPos = center;\r\n        viewer.cameraControl.planView = false;\r\n\r\n        this.bimViewer._navCubeMode.setActive(true);\r\n        this.viewer.cameraControl.planView = false;\r\n        this.bimViewer._firstPersonMode.setEnabled(true);\r\n        this.bimViewer._sectionTool.setEnabled(true);\r\n\r\n        if (done) {\r\n            viewer.cameraFlight.flyTo({\r\n                look: center,\r\n                eye: [center[0] - (dist * dir[0]), center[1] - (dist * dir[1]), center[2] - (dist * dir[2])],\r\n                up: up,\r\n                orthoScale: diag * 1.3,\r\n                projection: \"perspective\",\r\n                duration: 1\r\n            }, () => {\r\n                done();\r\n            });\r\n        } else {\r\n            viewer.cameraFlight.jumpTo({\r\n                look: center,\r\n                eye: [center[0] - (dist * dir[0]), center[1] - (dist * dir[1]), center[2] - (dist * dir[2])],\r\n                up: up,\r\n                orthoScale: diag * 1.3,\r\n                projection: \"perspective\"\r\n            });\r\n        }\r\n    }\r\n\r\n    _exitThreeDMode(done) {\r\n\r\n        const viewer = this.viewer;\r\n        const scene = viewer.scene;\r\n        const camera = scene.camera;\r\n        const aabb = scene.getAABB(scene.visibleObjectIds);\r\n        const look2 = math.getAABB3Center(aabb);\r\n        const diag = math.getAABB3Diag(aabb);\r\n        const fitFOV = 45; // fitFOV;\r\n        const sca = Math.abs(diag / Math.tan(fitFOV * math.DEGTORAD));\r\n        const orthoScale2 = diag * 1.3;\r\n        const eye2 = tempVec3a;\r\n\r\n        eye2[0] = look2[0] + (camera.worldUp[0] * sca);\r\n        eye2[1] = look2[1] + (camera.worldUp[1] * sca);\r\n        eye2[2] = look2[2] + (camera.worldUp[2] * sca);\r\n\r\n        const up2 = math.mulVec3Scalar(camera.worldForward, -1, []);\r\n\r\n        this.bimViewer._sectionTool.setActive(false);\r\n        this.bimViewer._sectionTool.clear();\r\n        this.viewer.cameraControl.planView = true;\r\n        this.bimViewer._firstPersonMode.setEnabled(false);\r\n        this.bimViewer._firstPersonMode.setActive(false);\r\n        this.bimViewer._sectionTool.setEnabled(false);\r\n\r\n        if (done) {\r\n            viewer.cameraFlight.flyTo({\r\n                projection: \"ortho\",\r\n                eye: eye2,\r\n                look: look2,\r\n                up: up2,\r\n                orthoScale: orthoScale2\r\n            }, () => {\r\n                this.bimViewer._navCubeMode.setActive(false);\r\n            });\r\n        } else {\r\n            viewer.cameraFlight.jumpTo({\r\n                projection: \"ortho\",\r\n                eye: eye2,\r\n                look: look2,\r\n                up: up2,\r\n                orthoScale: orthoScale2\r\n            });\r\n            this.bimViewer._navCubeMode.setActive(false);\r\n        }\r\n    }\r\n}\r\n\r\nexport {ThreeDMode};",
    "static": true,
    "longname": "D:/projects/2020-04-28-Node/xeokit-bim-viewer/src/toolbar/ThreeDMode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 364,
    "kind": "variable",
    "name": "tempVec3a",
    "memberof": "src/toolbar/ThreeDMode.js",
    "static": true,
    "longname": "src/toolbar/ThreeDMode.js~tempVec3a",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-bim-viewer/src/toolbar/ThreeDMode.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 365,
    "kind": "class",
    "name": "ThreeDMode",
    "memberof": "src/toolbar/ThreeDMode.js",
    "static": true,
    "longname": "src/toolbar/ThreeDMode.js~ThreeDMode",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-bim-viewer/src/toolbar/ThreeDMode.js",
    "importStyle": "{ThreeDMode}",
    "description": null,
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 366,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/toolbar/ThreeDMode.js~ThreeDMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/ThreeDMode.js~ThreeDMode#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 367,
    "kind": "member",
    "name": "_buttonElement",
    "memberof": "src/toolbar/ThreeDMode.js~ThreeDMode",
    "static": false,
    "longname": "src/toolbar/ThreeDMode.js~ThreeDMode#_buttonElement",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 368,
    "kind": "member",
    "name": "_active",
    "memberof": "src/toolbar/ThreeDMode.js~ThreeDMode",
    "static": false,
    "longname": "src/toolbar/ThreeDMode.js~ThreeDMode#_active",
    "access": "private",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "setActive",
    "memberof": "src/toolbar/ThreeDMode.js~ThreeDMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/ThreeDMode.js~ThreeDMode#setActive",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "active",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "_enterThreeDMode",
    "memberof": "src/toolbar/ThreeDMode.js~ThreeDMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/ThreeDMode.js~ThreeDMode#_enterThreeDMode",
    "access": "private",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "_exitThreeDMode",
    "memberof": "src/toolbar/ThreeDMode.js~ThreeDMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/ThreeDMode.js~ThreeDMode#_exitThreeDMode",
    "access": "private",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# xeokit-bim-viewer\r\n\r\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/9144bfee5a4b42ae8dc2eb603aa9966c)](https://www.codacy.com/manual/lindsay-kay/xeokit-viewer?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=xeokit/xeokit-viewer&amp;utm_campaign=Badge_Grade)\r\n[![npm version](https://badge.fury.io/js/%40xeokit%2Fxeokit-bim-viewer.svg)](https://badge.fury.io/js/%40xeokit%2Fxeokit-bim-viewer)\r\n\r\n\r\n \r\n[![Screenshot](https://github.com/xeokit/xeokit-bim-viewer/raw/master/images/xeokit-bim-viewer.png)](https://xeokit.github.io/xeokit-bim-viewer/app/index.html?projectId=OTCConferenceCenter&tab=storeys)\r\n\r\n\r\n---\r\n\r\n**[xeokit-bim-viewer](https://github.com/xeokit/xeokit-bim-viewer)** is an open source 2D/3D BIM viewer that runs in the browser and loads models from your file system. \r\n\r\nThe viewer is built on **[xeokit](http://xeokit.io)**, and is bundled as part of the **[xeokit SDK](http://xeokit.io)**.\r\n\r\nThe viewer is developed by [xeolabs](http://xeolabs.com) and [OpenProject](https://www.openproject.org/),  and is integrated within [OpenProject BIM 10.4](https://www.openproject.org/openproject-bim-10-4/) and later. \r\n\r\nThe viewer can be used as a stand-alone JavaScript application. In combination with open source CLI model conversion tools, it represents a low-cost, high-performance way to get your IFC models on the Web, that allows you the freedom to convert and host your models on your own server or GitHub repository.\r\n\r\nTo view your models with this viewer: \r\n\r\n1. Fork the [xeokit-bim-viewer](https://github.com/xeokit/xeokit-bim-viewer) repository on GitHub.\r\n1. Convert your IFC STEP files using [open source CLI tools](https://github.com/xeokit/xeokit-sdk/wiki/Creating-Files-for-Offline-BIM). \r\n3. Add your converted models to your fork's data directory.\r\n4. Serve your fork using [GitHub Pages](https://pages.github.com/).\r\n\r\nThen users can view your models in their browsers, with URLs like this:\r\n\r\n[````https://xeokit.github.io/xeokit-bim-viewer/app/index.html?projectId=OTCConferenceCenter&tab=storeys````](https://xeokit.github.io/xeokit-bim-viewer/app/index.html?projectId=OTCConferenceCenter&tab=storeys)\r\n\r\n\r\nRead the documentation below to get started. \r\n\r\n[Need Help?](#need-help)\r\n\r\n---\r\n\r\n* [Source Code](https://github.com/xeokit/xeokit-bim-viewer)\r\n* [API Docs](https://xeokit.github.io/xeokit-bim-viewer/docs)\r\n* [xeokit SDK](http://xeokit.io)\r\n \r\n---\r\n \r\n## Contents\r\n\r\n- [Features](#features)\r\n- [Demos](#demos)\r\n- [Need Help?](#need-help-)\r\n- [License](#license)\r\n- [The Viewer Application](#the-viewer-application)\r\n- [Model Database](#model-database)\r\n  * [Viewer Configurations](#viewer-configurations)\r\n  * [Viewer States](#viewer-states)\r\n- [Programming API](#programming-api)\r\n  * [Creating a Viewer](#creating-a-viewer)\r\n  * [Configuring the Viewer](#configuring-the-viewer)\r\n  * [Querying Projects, Models and Objects](#querying-projects--models-and-objects)\r\n    + [Getting Info on Available Projects](#getting-info-on-available-projects)\r\n    + [Getting Info on a Project](#getting-info-on-a-project)\r\n    + [Getting Info on an Object](#getting-info-on-an-object)\r\n  * [Loading Projects and Models](#loading-projects-and-models)\r\n    + [Loading a Project](#loading-a-project)\r\n    + [Loading a Model](#loading-a-model)\r\n  * [Controlling Viewer State](#controlling-viewer-state)\r\n  * [Saving and Loading BCF Viewpoints](#saving-and-loading-bcf-viewpoints)\r\n- [Customizing Viewer Style](#customizing-viewer-style)\r\n  * [Modal Busy Dialog](#modal-busy-dialog)\r\n  * [Tooltips](#tooltips)\r\n  * [Customizing Appearances of IFC Types](#customizing-appearances-of-ifc-types)\r\n- [xeokit Components Used in the Viewer](#xeokit-components-used-in-the-viewer)\r\n- [Building the Viewer](#building-the-viewer)\r\n  * [Installing from NPM](#installing-from-npm)\r\n  * [Building the Binary](#building-the-binary)\r\n  * [Building the Documentation](#building-the-documentation)\r\n\r\n---\r\n \r\n[Get in touch](http://xeolabs.com/contact/) if you could use a little help getting started. \r\n\r\n\r\n## Features\r\n\r\n* Uses [xeokit](https://xeokit.io) for efficient model loading and rendering.\r\n* Works in all major browsers, including mobile.\r\n* Loads models from the file system.\r\n* Loads multiple models.\r\n* Saves and loads BCF viewpoints\r\n* 3D and 2D viewing modes.\r\n* Interactively X-ray, highlight, show, hide and section objects. \r\n* Tree views of structure, layers and storeys.\r\n* Supports IFC2x3 and IFC4.\r\n* Customize viewer appearance with your own CSS.\r\n* JavaScript programming API for all viewer functions.\r\n\r\n## Demos \r\n\r\nClick the links below to run some demos.\r\n\r\n| Live Demo | Model Source |\r\n|---|---|\r\n| [OTC Conference Center](https://xeokit.github.io/xeokit-bim-viewer/app/index.html?projectId=OTCConferenceCenter&tab=storeys) | [Details](http://openifcmodel.cs.auckland.ac.nz/Model/Details/301) |\r\n| [Holter Tower](https://xeokit.github.io/xeokit-bim-viewer/app/index.html?projectId=HolterTower&tab=storeys)| [Details](http://openifcmodel.cs.auckland.ac.nz/Model/Details/316) |\r\n| [West Riverside Hospital](https://xeokit.github.io/xeokit-bim-viewer/app/index.html?projectId=WestRiversideHospital&tab=models)| [Details](http://openifcmodel.cs.auckland.ac.nz/Model/Details/308) |\r\n| [Schependomlaan](https://xeokit.github.io/xeokit-bim-viewer/app/index.html?projectId=Schependomlaan&tab=storeys)| [Details](https://github.com/openBIMstandards/DataSetSchependomlaan) |\r\n| [Schependomlaan Ground Floor](https://xeokit.github.io/xeokit-bim-viewer/app/index.html?projectId=Schependomlaan_selectedStorey&tab=storeys)| [Details](https://github.com/openBIMstandards/DataSetSchependomlaan) |\r\n| [Duplex](https://xeokit.github.io/xeokit-bim-viewer/app/index.html?projectId=Duplex&tab=storeys)| [Details](http://openifcmodel.cs.auckland.ac.nz/Model/Details/274) |\r\n  \r\n## Need Help?\r\n\r\nEverything here is tested and used in production, so we're confident it will work well for you. \r\n\r\nSometimes, however, users may benefit from a few hours consultation to get started more quickly. \r\n\r\n[Get in touch](http://xeolabs.com/contact/) if you could use a little help setting up your  ````xeokit-bim-viewer```` with your models. \r\n\r\n## License\r\n\r\nxeokit-bim-viewer is bundled within the [xeokit SDK](http://xeokit.io), which is provided under an [Affero GPL V3](https://github.com/xeokit/xeokit-sdk/blob/master/LICENSE.txt) for non-commercial use. See [Pricing](https://xeokit.io/index.html#pricing) for commercial licensing options.\r\n\r\n## The Viewer Application\r\n\r\nThe [````./app/index.html````](https://github.com/xeokit/xeokit-bim-viewer/tree/master/app/index.html) page provides a ready-to-use instance of xeokit-bim-viewer. We'll just call it *viewer* from now on.\r\n\r\nThe viewer loads projects and models from the [````./app/data````](https://github.com/xeokit/xeokit-bim-viewer/tree/master/app/data) directory.\r\n\r\nTo view a project, load the viewer with the project's ID on the URL: \r\n\r\n[````https://xeokit.github.io/xeokit-bim-viewer/app/index.html?projectId=WestRiversideHospital````](https://xeokit.github.io/xeokit-bim-viewer/app/index.html?projectId=WestRiversideHospital)\r\n\r\n## Model Database\r\n\r\n**This section aims to show you how how to add your own models to the viewer application.**\r\n                 \r\nLet's examine the structure of the [````./app/data````](https://github.com/xeokit/xeokit-bim-viewer/tree/master/app/data) directory, where the viewer keeps its projects and models.   \r\n\r\nShown below is a portion of the ````./app/data```` directory. We'll describe it from the root directory downwards.\r\n                                                   \r\nWithin the root, we have a directory for each project, along with a manifest of the projects in ````index.json````.\r\n\r\nWithin a project directory, we have a directory for each model in the project, along with a manifest of the models in ````index.json````.\r\n\r\nWithin a model directory, we have two files that comprise the model itself:\r\n\r\n* ````geometry.xkt```` - the model's geometry, formatted as ````.XKT````, which is xeokit's native binary geometry format, and \r\n* ````metadata.json```` - the model's structural metadata, a JSON file containing the IFC element hierarchy.\r\n\r\n````\r\n.app/data/\r\n└── projects\r\n    ├── index.json\r\n    ├── Duplex\r\n    │   ├── index.json\r\n    │   └── models\r\n    │       └── design\r\n    │           ├── geometry.xkt\r\n    │           └── metadata.json\r\n    └── WestRiversideHospital\r\n          ├── index.json\r\n          └── models\r\n              ├── architecture\r\n              │   ├── geometry.xkt\r\n              │   └── metadata.json\r\n              ├── structure\r\n              │   ├── geometry.xkt\r\n              │   └── metadata.json\r\n              └── electrical\r\n                  ├── geometry.xkt\r\n                  └── metadata.json\r\n````\r\n\r\nThe ````index.json```` at the root of ````./data```` is shown below. \r\n\r\nWithin this file, the ````id```` of each project matches the name of that project's subdirectory. \r\n\r\n````json\r\n{\r\n  \"projects\": [\r\n    {\r\n      \"id\": \"Duplex\",\r\n      \"name\": \"Duplex\",\r\n      \"position\": [-20, 0.0, -10.0],\r\n      \"scale\": [1.0, 1.0, 1.0],\r\n      \"rotation\": [0.0, 0.0, 0.0]\r\n    },\r\n    {\r\n      \"id\": \"WestRiversideHospital\",\r\n      \"name\": \"West Riverside Hospital\",\r\n      \"position\": [20, 0.0, 0.0],\r\n      \"scale\": [1.0, 1.0, 1.0],\r\n      \"rotation\": [0.0, 0.0, 0.0]\r\n    },\r\n    //...\r\n  ]\r\n}\r\n```` \r\n\r\nThe ````index.json```` for the \"WestRiversideHospital\" project is shown below.\r\n \r\n Within this file, the ````id```` of each model matches the name of that model's subdirectory. Each model's ````name```` is the human-readable name that's displayed in the viewers Models tab.\r\n\r\n````json\r\n{\r\n    \"id\": \"WestRiversideHospital\",\r\n    \"name\": \"West Riverside Hospital\",\r\n    \"models\": [\r\n        {\r\n            \"id\": \"architectural\",\r\n            \"name\": \"Hospital Architecture\"\r\n        },\r\n        {\r\n            \"id\": \"structure\",\r\n            \"name\": \"Hospital Structure\"\r\n        },\r\n        {\r\n            \"id\": \"electrical\",\r\n            \"name\": \"Hospital Electrical\",\r\n            \"saoEnabled\": false\r\n        }\r\n    ],\r\n    \"viewerConfigs\": {\r\n        \"backgroundColor\": [0.9, 0.9, 1.0],\r\n        \"saoEnabled\": true\r\n    },\r\n    \"viewerContent\": {\r\n        \"modelsLoaded\": [\r\n            \"structure\",\r\n            \"architectural\"\r\n        ]\r\n    },\r\n    \"viewerState\": {\r\n        \"tabOpen\": \"models\"\r\n    }\r\n}\r\n````\r\n\r\nThe optional ````viewerConfigs```` section specifies configurations for the viewer to set on itself as it loads the project. See the complete list of available viewer configurations in [Viewer Configurations](#viewer-configurations).\r\n\r\nThe optional ````viewerContent```` array specifies IDs of models that the viewer will load initially, right after it's applied the configurations. \r\n\r\nThe optional ````viewerState```` section specifies how the viewer should set up the initial state of its UI, right after its loaded the initial models. See the complete list of available viewer states in [Viewer States](#viewer-states).\r\n\r\nThe ````geometry.xkt```` and ````metadata.json```` files for each model are created from an IFC file using open source CLI tools. Learn how to create those files in the [Creating  Files for Offline BIM](https://github.com/xeokit/xeokit-sdk/wiki/Creating-Files-for-Offline-BIM) tutorial.  \r\n\r\nWhile not essential, you can learn about the format of an ````.xkt```` geometry file in [XKT Format](https://github.com/xeokit/xeokit-sdk/wiki/XKT-Format) specification. \r\n\r\n### Viewer Configurations\r\n\r\nThe table below lists the complete set of available configurations. Think of these as user preferences. These may be provided to the viewer within project info files, as described in [Model Database](#model-database), or set programmatically on the viewer with [````BIMViewer#setConfigs()````](https://xeokit.github.io/xeokit-bim-viewer/docs/class/src/BIMViewer.js~BIMViewer.html#instance-method-setConfigs), as described in [Configuring the Viewer](#configuring-the-viewer).  \r\n \r\n| Property              | Type              | Range                 | Default Value     | Description                    |\r\n|:----------------------|:------------------|:----------------------|:------------------|:----------------------------------|\r\n| \"backgroundColor\"     | Array             |                       | ````[1.0,1.0,1.0]````   | Canvas background color           |     \r\n| \"cameraNear\"          | Number            | ````[0.01-0.1]````    | ````0.05````      | Distance to the near clipping plane |\r\n| \"cameraFar\"           | Number            | ````[1-10000]````     | ````3000.0````    | Distance to the far clipping plane |\r\n| \"saoEnabled\"          | Boolean           |                       | ````false````     | Whether or not to enable Scalable Ambient Obscurance (SAO) |\r\n| \"saoBias\"             | Number            | ````[0.0...10.0]````  | ````0.5````       | SAO bias          |\r\n| \"saoIntensity\"        | Number            | ````[0.0...200.0]```` | ````100.0````     | SAO intensity factor |\r\n| \"saoScale\"            | Number            | ````[0.0...1000.0]````| ````500.0````     | SAO scale factor |\r\n| \"saoKernelRadius\"     | Number            | ````[0.0...200.0]```` | ````100.0````     | The maximum area that SAO takes into account when checking for possible occlusion |\r\n| \"saoBlur\"             | Boolean           |                       | ````true````      | Whether Guassian blur is enabled for SAO |\r\n| \"saoInteractive\"      | Boolean           |                       | ````true````      | When ````true````, applies SAO when moving the camera, otherwise applies it once the camera stops moving |\r\n| \"saoInteractiveDelay\" | Number            |                       | ````200````       | when \"saoInteractive\" is ````false````, this is the time delay in milliseconds after which SAO is applied after the camera has stopped moving |\r\n| \"viewFitFOV\"          | Number            | ````[10.0...70.0]```` | ````30````        | When fitting objects to view, this is the amount in degrees of how much they should fit the user's field of view |\r\n| \"viewFitDuration\"     | Number            | ````[0..5]````        | ````0.5````       | When fitting objects to view with an animated transition, this is the duration of the transition in seconds |\r\n| \"perspectiveFOV\"      | Number            | ````[10.0...70.0]```` | ````55````        | When in perspective projection, this is the field of view, in degrees, that the user sees |\r\n| \"objectColorSource\"   | String            | \"model\", \"viewer\"     | \"model\"           | Where the colors for model objects will be loaded from |\r\n\r\n### Viewer States\r\n\r\nIn [Model Database](#model-database) we saw how a project can specify directives for how the viewer should set up the initial state of its UI, right after the project has loaded. The table below lists the available directives.  These can also be set on the viewer using [````BIMViewer#setViewerState()````](https://xeokit.github.io/xeokit-bim-viewer/docs/class/src/BIMViewer.js~BIMViewer.html#instance-method-setViewerState). So far, we have:\r\n\r\n| Property              | Type              | Range                 | Default Value     | Description                      |\r\n|:----------------------|:------------------|:----------------------|:------------------|:----------------------------------|\r\n| \"focusObject\"         | String            |                       |                   | ID of object to focus on        |     \r\n| \"tabOpen\"             | String            |  \"objects\", \"classes\" or \"storeys\"  |                   | Which explorer tab to open           |     \r\n| \"expandObjectsTree\"   | Number            |  [0..*]               | 0                 | How deep to expand the \"objects\" tree |\r\n| \"expandClassesTree\"   | Number            |  [0..*]               | 0                 | How deep to expand the \"classes\" tree |\r\n| \"expandStoreysTree\"   | Number            |  [0..*]               | 0                 | How deep to expand the \"storeys\" tree |\r\n| \"setCamera\"           | { eye: Number[], look: Number[], up: Number[] } |  | 0        | Camera position |\r\n\r\n## Programming API\r\n\r\n**This section goes deeper into the viewer, describing how to instantiate a viewer, and how to use its JavaScript programming API.**\r\n\r\nThe viewer is implemented by the JavaScript [````BIMViewer````](https://xeokit.github.io/xeokit-bim-viewer/docs/class/src/BIMViewer.js~BIMViewer.html) class, which provides a complete set of methods to programmatically control it.\r\n \r\nUsing these methods, we can: \r\n\r\n * create and configure a viewer, \r\n * query what models are available, \r\n * load projects and models, \r\n * interact with the 3D view, \r\n * save and load BCF viewpoints,\r\n * control the various viewer tools, and \r\n * drive the state of the viewer's UI.\r\n \r\n### Creating a Viewer\r\n \r\nIn the example below, we'll create a [````BIMViewer````](https://xeokit.github.io/xeokit-bim-viewer/docs/class/src/BIMViewer.js~BIMViewer.html), with a [````Server````](https://xeokit.github.io/xeokit-bim-viewer/docs/class/src/server/Server.js~Server.html) through which it will load projects and models from the file system.  \r\n\r\nWe'll configure the ````Server```` to load that data from the [````./app/data````](https://github.com/xeokit/xeokit-bim-viewer/tree/master/app/data) directory.\r\n \r\nWe'll also configure our ````BimViewer```` with DOM elements to hold the four parts of its UI, which are: \r\n\r\n1. the 3D canvas, \r\n2. the explorer panel containing the tree views, \r\n3. the toolbar, \r\n4. the NavCube, and \r\n4. the \"backdrop\" element, which covers everything in the UI to prevent interaction whenever the viewer is busy loading a model. \r\n\r\n  \r\n````javascript\r\nconst server = new Server({\r\n     dataDir: \"./data\"\r\n });\r\n\r\nconst myBIMViewer = new BIMViewer(server, {\r\n     canvasElement: document.getElementById(\"myCanvas\"),                // The 3D WebGL canvas\r\n     explorerElement: document.getElementById(\"myExplorer\"),            // Container for the explorer panel\r\n     toolbarElement: document.getElementById(\"myToolbar\"),              // Container for the toolbar\r\n     navCubeCanvasElement: document.getElementById(\"myNavCubeCanvas\"),  // Canvas for the NavCube\r\n     busyModelBackdropElement: document.querySelector(\".xeokit-busy-modal-backdrop\") // Busy modal dialog backdrop element\r\n});\r\n````\r\n \r\nConfiguring the ````BIMViewer```` with separate places to locate its parts allows us to integrate them more flexibly into our web page.\r\n\r\nIn our [````app/index.html````](https://github.com/xeokit/xeokit-bim-viewer/blob/master/app/index.html) page, the HTML elements look like this:\r\n \r\n````html\r\n<div id=\"myViewer\" class=\"xeokit-busy-modal-backdrop\">\r\n     <div id=\"myExplorer\" class=\"active\"></div>\r\n     <div id=\"myContent\">\r\n         <div id=\"myToolbar\"></div>\r\n         <canvas id=\"myCanvas\"></canvas>\r\n     </div>\r\n </div>\r\n <canvas id=\"myNavCubeCanvas\"></canvas>\r\n````\r\n \r\nSee [````app/css/style.css````](https://github.com/xeokit/xeokit-bim-viewer/blob/master/app/css/style.css) for how we've styled these elements. \r\n\r\nAlso see [````css/BIMViewer.css````](https://github.com/xeokit/xeokit-bim-viewer/blob/master/css/BIMViewer.css) for the CSS styles that BIMViewer applies to the elements it creates internally.  \r\n \r\n### Configuring the Viewer\r\n \r\nWith our viewer created, let's use [````BIMViewer#setConfigs()````](https://xeokit.github.io/xeokit-bim-viewer/docs/class/src/BIMViewer.js~BIMViewer.html#instance-method-setConfigs) to configure it. \r\n\r\nWe'll enable Scalable Ambient Obscurance and set the canvas background color to white:\r\n \r\n````javascript\r\nmyBIMViewer.setConfigs({\r\n    \"saoEnabled\":        \"white\",\r\n    \"backgroundColor\":   [1.0, 1.0, 1.0]\r\n});\r\n````\r\n \r\nSee [Viewer Configurations](#viewer-configurations) for the list of available configurations.\r\n\r\n### Querying Projects, Models and Objects\r\n\r\nWith our viewer created and configured, let's find out what content is available.\r\n\r\n#### Getting Info on Available Projects\r\n\r\nLet's query what projects are available. \r\n \r\n````javascript\r\nmyBIMViewer.getProjectsInfo((projectsInfo) => {\r\n     console.log(JSON.stringify(projectsInfo, null, \"\\t\"));\r\n});\r\n````\r\n \r\nInternally, the viewer will call [````Server#getProjects()````](https://xeokit.github.io/xeokit-bim-viewer/docs/class/src/server/Server.js~Server.html#instance-method-getProjects) to get the projects info.\r\n \r\nAs described earlier in [Model Database](#model-database), the projects info is the JSON in [````./app/data/projects/index.json````](https://github.com/xeokit/xeokit-bim-viewer/tree/master/app/data/projects/index.json). We'll just log that info to the console.\r\n\r\nThe projects info will look similar to:\r\n \r\n````json\r\n{\r\n     \"projects\": [\r\n         {\r\n             \"id\": \"Duplex\",\r\n             \"name\": \"Duplex\"\r\n         },\r\n         {\r\n             \"id\": \"Schependomlaan\",\r\n             \"name\": \"Schependomlaan\"\r\n         },\r\n         {\r\n             \"id\": \"WestRiversideHospital\",\r\n             \"name\": \"West Riverside Hospital\"\r\n         }\r\n \t ]\r\n}\r\n````\r\n\r\n#### Getting Info on a Project\r\n\r\nNow we know what projects are available, we'll get info on one of those projects.\r\n\r\n````javascript\r\nmyBIMViewer.getProjectInfo(\"WestRiversideHospital\", (projectInfo) => {\r\n     console.log(JSON.stringify(projectInfo, null, \"\\t\"));\r\n});\r\n````\r\nInternally, the viewer will call [````Server#getProject()````](https://xeokit.github.io/xeokit-bim-viewer/docs/class/src/server/Server.js~Server.html#instance-method-getProject) to get that project info. Like before, we'll just log it to the console.\r\n\r\nThe project info will be the contents of [````./app/data/projects/WestRiversideHospital/index.json````](https://github.com/xeokit/xeokit-bim-viewer/tree/master/app/data/projects/WestRiversideHospital/index.json).\r\n\r\nThe project info will be similar to:\r\n \r\n````json\r\n{\r\n    \"id\": \"WestRiversideHospital\",\r\n    \"name\": \"West Riverside Hospital\",\r\n    \"models\": [\r\n        {\r\n            \"id\": \"architectural\",\r\n            \"name\": \"Hospital Architecture\"\r\n        },\r\n        {\r\n            \"id\": \"structure\",\r\n            \"name\": \"Hospital Structure\"\r\n        },\r\n        {\r\n            \"id\": \"electrical\",\r\n            \"name\": \"Hospital Electrical\",\r\n            \"saoEnabled\": false\r\n        }\r\n    ],\r\n    \"viewerConfigs\": {\r\n        \"backgroundColor\": [0.9, 0.9, 1.0],\r\n        \"saoEnabled\": true\r\n    },\r\n    \"viewerContent\": {\r\n        \"modelsLoaded\": [\r\n            \"structure\",\r\n            \"architectural\"\r\n        ]\r\n    },\r\n    \"viewerState\": {\r\n        \"tabOpen\": \"models\"\r\n    }\r\n}\r\n````\r\n\r\nIn this project info, we have:\r\n\r\n* **````id````** - ID of the project,\r\n* **````name````** - human-readable name of the project, \r\n* **````models````** - info on each model in this project,\r\n* **````viewerConfigs````** - configurations for the viewer to apply when loading the project,\r\n* **````viewerContent````** - which models the viewer should immediately load when loading the project, and\r\n* **````viewerState````** - how the viewer should set up its UI after loading the project.\r\n\r\n\r\nWhen we later load the project in section [Loading a Project](#loading_a_project), the viewer is going to pass the ````viewerConfigs```` to [````BIMViewer#setConfigs()````](https://xeokit.github.io/xeokit-sdk/docs/class/src/BIMViewer.js~BIMViewer.html#instance-method-setConfigs), which we described earlier in [Configuring the Viewer](#configuring-the-viewer). \r\n\r\nIn the ````viewerConfigs```` we're enabling the viewer's Scalable Ambient Obscurance effect, which will create ambient shadows in the crevices of our models. This is an expensive effect for the viewer to render, so we've disabled it for the \"electrical\" model, which contains many long, thin wire objects that don't show the SAO effect well.\r\n\r\n#### Getting Info on an Object\r\n\r\nLet's attempt to get some info on an object within one of our project's models.\r\n\r\nWe say \"attempt\" because it's up to the [````Server````](https://xeokit.github.io/xeokit-bim-viewer/docs/class/src/server/Server.js~Server.html) to try to find that info for us, which might not exist. \r\n\r\nInternally, the viewer will call [````Server#getObjectInfo()````](https://xeokit.github.io/xeokit-bim-viewer/docs/class/src/server/Server.js~Server.html#instance-method-getObjectInfo), which will attempt to load that object info from a file. \r\n\r\nIf you were to substitute ````Server```` with your own implementation, your implementation might get that info from a data store, such as a relational database, populated with metadata for all the objects in your project's models, keyed to their IDs. \r\n \r\nWe'll go ahead and assume that our ````Server```` has info an an object. \r\n\r\n````javascript\r\nmyViewer.getObjectInfo(\"WestRiversideHospital\", \"architectural\", \"2HaS6zNOX8xOGjmaNi_r6b\", \r\n    (objectInfo) => {\r\n        console.log(JSON.stringify(objectInfo, null, \"\\t\"));\r\n    },\r\n    (errMsg) => {\r\n         console.log(\"Oops! There was an error getting info for this object: \" + errMsg);\r\n    });\r\n````\r\n\r\nIf the object does not exist in the specified project and model, the method will invoke its error callback.\r\n\r\nOur file system database does happen to have info for that object, stored in [````./app/data/projects/WestRiversideHospital/models/architectural/objects/2HaS6zNOX8xOGjmaNi_r6b.json````](https://github.com/xeokit/xeokit-bim-viewer/tree/master/app/data/projects/WestRiversideHospital/models/architectural/objects/2HaS6zNOX8xOGjmaNi_r6b.json).\r\n\r\nSince our object info exists, we'll get a result similar to this: \r\n\r\n````json\r\n{\r\n    \"id\": \"2HaS6zNOX8xOGjmaNi_r6b\",\r\n    \"projectId\": \"WestRiversideHospital\",\r\n    \"modelId\": \"architectural\",\r\n    \"name\": \"Basic Wall:Exterior - Metal Panel on Mtl. Stud:187578\",\r\n    \"type\": \"IfcWall\",\r\n    \"parent\": \"2hExBg8jj4NRG6zzD0RZML\"\r\n}\r\n```` \r\n\r\n> By now, you've probably noticed that our file system database is structured to support [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) URIs, which our [````Server````](https://xeokit.github.io/xeokit-bim-viewer/docs/class/src/server/Server.js~Server.html) constructs from the project, model and object IDs we supplied to the viewer's query methods. \r\n       \r\n### Loading Projects and Models\r\n \r\nLet's now load some of the projects and models that we queried in the previous section.\r\n\r\n#### Loading a Project\r\n\r\nLet's start by loading the project we just queried info on. \r\n\r\n````javascript\r\nmyBIMViewer.loadProject(\"WestRiversideHospital\", \r\n    () => {\r\n         console.log(\"Nice! The project loaded successfully.\");\r\n    },\r\n    (errMsg) => {\r\n         console.log(\"Oops! There was an error loading this project: \" + errMsg);\r\n    });\r\n````\r\n\r\nIf that succeeds, the viewer will now have two models loaded, ````\"architectural\"```` and ````\"structure\"````, since those are specified in the project info's ````viewerContent````.\r\n\r\nThe viewer will also enable Scalable Ambient Obscurance, since that's specified by the ````saoEnabled```` property in the ````viewerConfigs````. The viewer will also set various other configs on itself, as specified in that section.\r\n\r\nThe viewer will also open its \"Models\" tab, thanks to the ````tabOpen```` property in the project info's ````viewerState```` section. \r\n\r\nWe can confirm that the two models are loaded by querying the IDs of the models that are currently loaded in the viewer:\r\n\r\n````javascript\r\nconst modelIds = myBIMViewer.getModelLoadedIds();\r\n\r\nconsole.log(modelIds);\r\n````\r\n\r\nThe result would be:\r\n\r\n````json\r\n[\"architectural\", \"structure\"]\r\n````\r\n\r\n#### Loading a Model \r\n\r\nWith our project loaded, let's load another of its models.\r\n\r\nWe could start by getting the IDs of all the models in our project, just to make sure the model is available:\r\n\r\n````javascript\r\nconst modelIds = myBIMViewer.getModelIds();\r\n\r\nconsole.log(modelIds);\r\n````\r\n\r\nThe result would be:\r\n\r\n````json\r\n[\"architectural\", \"structure\", \"electrical\"]\r\n````\r\n\r\nTo load the model:\r\n\r\n````javascript\r\nmyBIMViewer.loadModel(\"electrical\", \r\n    () => {\r\n         console.log(\"Nice! The model loaded successfully.\");\r\n    },\r\n    (errMsg) => {\r\n         console.log(\"Oops! There was an error loading this model: \" + errMsg);\r\n    });\r\n````\r\n\r\nIf we no longer need that model, we can unload it again:\r\n\r\n````javascript\r\nmyBIMViewer.unloadModel(\"electrical\");\r\n````\r\n\r\nWhen we no longer need the project, unload like so:\r\n\r\n````javascript\r\nmyBIMViewer.unloadProject();\r\n````\r\n\r\nNote that we can only load one project at a time.\r\n\r\n\r\n### Controlling Viewer State\r\n\r\n[````BIMViewer````](https://xeokit.github.io/xeokit-bim-viewer/docs/class/src/BIMViewer.js~BIMViewer.html) has various methods with which we can programmatically control the state of its UI. \r\n\r\nLet's take a quick look at some of these methods to get an idea of what sort of UI state we can control with them. This won't be an exhaustive guide - see the ````BIMViewer```` class documentation for the complete list.\r\n\r\nHaving loaded a couple of models in the previous section, let's open the viewer's Objects tab, which contains a tree view of the containment hierarchy of the objects within those models:\r\n\r\n````javascript\r\nmyBIMViewer.openTab(\"objects\");\r\n````\r\n\r\nTo confirm which tab is currently open: \r\n\r\n````javascript\r\nconst tabId = myBIMViewer.getOpenTab();\r\n\r\nconsole.log(\"Currently open tab: '\" + tabId + \"'\"); // \"objects\"\r\n````\r\n\r\nNow let's arrange the camera to fit an object in view:\r\n\r\n````javascript\r\nmyBIMViewer.flyToObject(\"1fOVjSd7T40PyRtVEklS6X\", ()=>{ /* Done */ });\r\n````\r\n\r\nTODO: Complete this section once API methods are finalized\r\n\r\n### Saving and Loading BCF Viewpoints\r\n\r\n[Bim Collaborative Format](https://en.wikipedia.org/wiki/BIM_Collaboration_Format) (BCF) is a format for managing issues on a BIM project. A BCF record captures the visual state of a BIM viewer, which includes the camera position, the visibility and selected states of the objects, and any section planes that are currently active. \r\n\r\nA BCF record saved from one BIM viewer can be loaded into another viewer, to synchronize the visual states of both viewers.\r\n\r\nNote that BCF viewpoints do not record which models are currently loaded. It's assumed that both the source and target viewers have the same models loaded.\r\n\r\nUse the [````BIMViewer#saveBCFViewpoint()````](https://xeokit.github.io/xeokit-bim-viewer/docs/class/src/BIMViewer.js~BIMViewer.html#instance-method-saveBCFViewpoint) to save a JSON BCF record of the current view: \r\n\r\n````javascript\r\nconst viewpoint = bimViewer.saveBCFViewpoint({\r\n    // Options - see BIMViewer#saveBCFViewpoint() documentation for details\r\n});\r\n````\r\n\r\nOur viewpoint JSON will look similar to below. Before saving this viewpoint, we've hidden one object, selected another object, and created section plane to slice our model. The viewpoint also contains a PNG snapshot of the viewer's canvas, which we've truncated here for brevity.\r\n\r\n````\r\n{\r\n    perspective_camera: {\r\n        camera_view_point: { x: 0.0, y: 0.0, z: 0.0 },\r\n        camera_direction: { x: 1.0, y: 1.0, z: 2.0 },\r\n        camera_up_vector: { x: 0.0, y: 0.0, z: 1.0 },\r\n        field_of_view: 90.0\r\n    },\r\n    lines: [],\r\n    clipping_planes: [{\r\n        location: { x: 0.5, y: 0.5, z: 0.5 },\r\n        direction: { x: 1.0, y: 0.0, z: 0.0 }\r\n    }],\r\n    bitmaps: [],\r\n    snapshot: {\r\n        snapshot_type: png,\r\n        snapshot_data: \"data:image/png;base64,......\"\r\n    },\r\n    components: {\r\n        visibility: {\r\n            default_visibility: false,\r\n            exceptions: [{\r\n                ifc_guid: 4$cshxZO9AJBebsni$z9Yk,\r\n                originating_system: xeokit.io,\r\n                authoring_tool_id: xeokit/v1.0\r\n            }]\r\n       },\r\n        selection: [{\r\n           ifc_guid: \"4$cshxZO9AJBebsni$z9Yk\",\r\n        }]\r\n    }\r\n}\r\n````\r\n\r\nUse the [````BIMViewer#loadBCFViewpoint()````](https://xeokit.github.io/xeokit-bim-viewer/docs/class/src/BIMViewer.js~BIMViewer.html#instance-method-loadBCFViewpoint) to load a JSON BCF record: \r\n\r\n\r\n````javascript\r\nbimViewer.loadBCFViewpoint(viewpoint, {\r\n    // Options - see BIMViewer#loadBCFViewpoint() documentation for details\r\n});\r\n````\r\n\r\n## Customizing Viewer Style\r\n\r\nThe [````app/index.html````](https://github.com/xeokit/xeokit-bim-viewer/blob/master/app/index.html) file for the standalone viewer contains CSS rules for the various viewer elements, which you can modify as required.\r\n\r\n### Modal Busy Dialog\r\n\r\nThe viewer displays a modal dialog box whenever we load a model. The dialog box has a backdrop element, which overlays the viewer. Whenever the dialog becomes visible, the backdrop will block interaction events on the viewer's UI. \r\n\r\nWithin our [````app/index.html````](https://github.com/xeokit/xeokit-bim-viewer/blob/master/app/index.html) page, the main ````<div>```` is the backdrop element:\r\n \r\n````html\r\n<div id=\"myBIMViewer\" class=\"xeokit-busy-modal-backdrop\">\r\n    <div id=\"myExplorer\" class=\"active\"></div>\r\n    <div id=\"myContent\">\r\n        <div id=\"myToolbar\"></div>\r\n        <canvas id=\"myCanvas\"></canvas>\r\n    </div>\r\n</div>\r\n<canvas id=\"myNavCubeCanvas\"></canvas>\r\n````\r\n\r\nAs defined in [````css/BIMViewer.css````](https://github.com/xeokit/xeokit-bim-viewer/blob/master/css/BIMViewer.css), the backdrop gets the following style, which allows the dialog to position itself correctly within the backdrop:\r\n\r\n````css\r\n.xeokit-busy-modal-backdrop {\r\n    position:relative;\r\n}\r\n````\r\n\r\nIf you need to tweak CSS relating to the dialog, search for \"xeokit-busy-dialog\" within [````css/BIMViewer.css````](https://github.com/xeokit/xeokit-bim-viewer/blob/master/css/BIMViewer.css).\r\n\r\n### Tooltips\r\n\r\nTooltips are not part of the core JavaScript for the viewer. Instead, viewer HTML elements are marked with ````data-tippy-content```` attributes that provide strings to show in their tooltips. \r\n\r\nFor example, the *Toggle 2D/3D* button's element looks like this:\r\n\r\n````html\r\n<button type=\"button\" class=\"xeokit-threeD xeokit-btn fa fa-cube fa-2x\" data-tippy-content=\"Toggle 2D/3D\"></button>\r\n```` \r\n\r\nIn the [app/index.html](https://github.com/xeokit/xeokit-bim-viewer/blob/master/app/index.html) file for the standalone viewer, we're using [tippy.js](https://github.com/atomiks/tippyjs), which automatically creates tooltips for those elements.\r\n\r\n### Customizing Appearances of IFC Types\r\n\r\nTODO: Correct this section - viewer can load from model and viewer\r\n\r\nThe viewer loads colors for the various IFC element types straight from the IFC model, except where overrides are defined in the configuration file [````./src/IFCObjectDefaults/ViewerIFCObjectColors.js````](https://github.com/xeokit/xeokit-bim-viewer/blob/master/src/IFCObjectDefaults/ViewerIFCObjectColors.js).\r\n\r\nYou can add or remove configurations in that file if you need to customize the color and pickability of specific IFC types.\r\n\r\nFor example, to ensure that ````IfcWindow```` and ````IfcSpace```` types are initially visible, transparent and pickable (ie. able to be selected by clicking on them), you might configure that file as shown below:\r\n\r\n````javascript\r\nconst IFCObjectDefaults = {\r\n    IfcSpace: { \r\n        visible: true,\r\n        pickable: true,\r\n        opacity: 0.2\r\n    },\r\n    IfcWindow: { \r\n        visible: true,\r\n        pickable: true,\r\n        opacity: 0.5\r\n    }\r\n};\r\n\r\nexport {IFCObjectDefaults};\r\n```` \r\n \r\nSometimes IFC models have opaque ````IfcWindow```` and ````IfcSpace```` elements, so it's a good idea to have configurations in there so that we can see through them.\r\n\r\n## xeokit Components Used in the Viewer\r\n\r\nThe viewer is built on various [xeokit SDK](http://xeokit.io) components and plugins that are designed to accelerate the development of BIM and CAD visualization apps. \r\n\r\nThe table below lists the main ones used in this viewer. \r\n\r\n| Component              | Purpose          | \r\n|:-----------------------|:------------------|\r\n| [````Viewer````](https://xeokit.github.io/xeokit-sdk/docs/class/src/viewer/Viewer.js~Viewer.html) | The WebGL-based viewer at the heart of ````BIMViewer````. |\r\n| [````XKTLoaderPlugin````](https://xeokit.github.io/xeokit-sdk/docs/class/src/plugins/XKTLoaderPlugin/XKTLoaderPlugin.js~XKTLoaderPlugin.html)  | Loads model geometry and metadata. |\r\n| [````NavCubePlugin````](https://xeokit.github.io/xeokit-sdk/docs/class/src/plugins/NavCubePlugin/NavCubePlugin.js~NavCubePlugin.html)  | Navigation cube gizmo that allows us to rotate the scene and move the camera to look at it along a selected axis or diagonal. |\r\n| [````TreeViewPlugin````](https://xeokit.github.io/xeokit-sdk/docs/class/src/plugins/TreeViewPlugin/TreeViewPlugin.js~TreeViewPlugin.html)  | Implements the Objects, Classes and Storeys tree views within the explorer panel. |\r\n| [````SectionPlanesPlugin````](https://xeokit.github.io/xeokit-sdk/docs/class/src/plugins/SectionPlanesPlugin/SectionPlanesPlugin.js~SectionPlanesPlugin.html) | Manages interactive section planes, which are used to slice objects to reveal inner structures. |\r\n| [````BCFViewpointsPlugin````](https://xeokit.github.io/xeokit-sdk/docs/class/src/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js~BCFViewpointsPlugin.html) | Saves and loads BCF viewpoints. |\r\n| [````ContextMenu````](https://xeokit.github.io/xeokit-sdk/docs/class/src/extras/ContextMenu/ContextMenu.js~ContextMenu.html)  | Implements the context menus for the explorer tree views and 3D canvas. |\r\n \r\n## Building the Viewer\r\n\r\n### Installing from NPM\r\n\r\nTo install the npm package:\r\n\r\n````\r\nnpm i @xeokit/xeokit-bim-viewer\r\n````\r\n\r\n### Building the Binary\r\n\r\nTo build the ES6 module in ````/dist/main.js````:\r\n\r\n````\r\nnpm run build\r\n````\r\n\r\n### Building the Documentation\r\n\r\nTo build the API documentation in ````/docs/````:\r\n\r\n````\r\nnpm run docs\r\n````\r\n\r\n",
    "longname": "D:\\projects\\2020-04-28-Node\\xeokit-bim-viewer\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"@xeokit/xeokit-bim-viewer\",\r\n  \"version\": \"1.7.8\",\r\n  \"description\": \"BIM viewer built on xeokit\",\r\n  \"main\": \"index.js\",\r\n  \"directories\": {\r\n    \"lib\": \"lib\"\r\n  },\r\n  \"files\": [\r\n    \"/css\",\r\n    \"/lib\",\r\n    \"/src\",\r\n    \"/dist\"\r\n  ],\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n    \"build\": \" rollup -c\",\r\n    \"docs\": \"./node_modules/.bin/esdoc\",\r\n    \"publish\": \"npm publish --access public\"\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git+https://github.com/xeokit/xeokit-bim-viewer.git\"\r\n  },\r\n  \"keywords\": [\r\n    \"WebGL\",\r\n    \"BIM\",\r\n    \"IFC\",\r\n    \"xeokit\",\r\n    \"OpenProject\"\r\n  ],\r\n  \"author\": \"Lindsay Kay\",\r\n  \"license\": \"See LICENSE.txt\",\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/xeokit/xeokit-bim-viewer/issues\"\r\n  },\r\n  \"homepage\": \"https://github.com/xeokit/xeokit-bim-viewer#readme\",\r\n  \"devDependencies\": {\r\n    \"autoprefixer\": \"^9.7.4\",\r\n    \"esdoc\": \"^1.1.0\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"rollup\": \"^1.32.1\",\r\n    \"rollup-plugin-minify-es\": \"^1.1.1\",\r\n    \"rollup-plugin-node-resolve\": \"^5.2.0\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@xeokit/xeokit-sdk\": \"^0.9.96\"\r\n  }\r\n}\r\n",
    "longname": "D:\\projects\\2020-04-28-Node\\xeokit-bim-viewer\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]